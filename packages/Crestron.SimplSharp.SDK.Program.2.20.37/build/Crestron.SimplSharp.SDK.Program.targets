<?xml version="1.0" encoding="UTF-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
	<PropertyGroup>
		<ArchiveExtension>.cpz</ArchiveExtension>
	</PropertyGroup>
	<Target Name="SimplSharpClean" AfterTargets="AfterClean">
		<Delete Files="$(OutputPath)\ProgramInfo.config" ContinueOnError="true" />
		<Delete Files="$(OutputPath)\$(TargetName)$(ArchiveExtension)" ContinueOnError="true" />
	</Target>
	<PropertyGroup>
		<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
	</PropertyGroup>
	<Choose>
		<When Condition=" ( '$(TargetFramework)' == 'net6.0' ) Or ( '$(TargetFramework)' == 'net8.0' )">
			<PropertyGroup>
				<TaskFactory>RoslynCodeTaskFactory</TaskFactory>
				<MicrosoftAssembly>Microsoft.Build.Tasks.Core.dll</MicrosoftAssembly>
			</PropertyGroup>
		</When>
		<Otherwise>
			<PropertyGroup>
				<MicrosoftAssembly>Microsoft.Build.Tasks.v4.0.dll</MicrosoftAssembly>
				<TaskFactory>CodeTaskFactory</TaskFactory>
			</PropertyGroup>
		</Otherwise>
	</Choose>
	<Target Name="SimplSharpPostProcess" Condition=" ( '$(TargetFramework)' == 'net6.0' ) Or ( '$(TargetFramework)' == 'net8.0' )" BeforeTargets="AfterBuild">
		<GetAssemblyIdentity AssemblyFiles="$(TargetPath)">
			<Output TaskParameter="Assemblies" ItemName="Assembly" />
		</GetAssemblyIdentity>
		<SimplSharpProPostProcess programInfoFilename="$(OutputPath)\ProgramInfo.config" targetPath="$(TargetPath)" targetName="$(TargetName)" packagePath="$(MSBuildThisFileDirectory)" outputPath="$(OutputPath)" archiveFilename="$(TargetName)$(ArchiveExtension)" excludeTargets="$(MSBuildThisFileFullPath)" assemblyVersion="%(Assembly.Version)" targetFramework="$(TargetFrameworkVersion)"/>
	</Target>

	<Target Name="SimplSharpPostProcess47" Condition=" ( '$(TargetFramework)' != 'net6.0' ) And ( '$(TargetFramework)' != 'net8.0' )" BeforeTargets="AfterBuild">
		<GetAssemblyIdentity AssemblyFiles="$(TargetPath)">
			<Output TaskParameter="Assemblies" ItemName="Assembly" />
		</GetAssemblyIdentity>
		<SimplSharpProPostProcess47 programInfoFilename="$(OutputPath)\ProgramInfo.config" targetPath="$(TargetPath)" targetName="$(TargetName)" packagePath="$(MSBuildThisFileDirectory)" outputPath="$(OutputPath)" archiveFilename="$(TargetName)$(ArchiveExtension)" excludeTargets="$(MSBuildThisFileFullPath)" assemblyVersion="%(Assembly.Version)" targetFramework="$(TargetFrameworkVersion)"/>
	</Target>

	<UsingTask TaskName="SimplSharpProPostProcess47" TaskFactory="$(TaskFactory)" AssemblyFile="$(MSBuildToolsPath)\$(MicrosoftAssembly)">
		<ParameterGroup>
			<programInfoFilename ParameterType="System.String" Required="true" />
			<targetPath ParameterType="System.String" Required="true" />
			<targetName ParameterType="System.String" Required="true" />
			<packagePath ParameterType="System.String" Required="true" />
			<outputPath ParameterType="System.String" Required="true" />
			<archiveFilename ParameterType="System.String" Required="true" />
			<excludeTargets ParameterType="System.String" Required="true" />
			<assemblyVersion ParameterType="System.String" Required="true" />
			<targetFramework Required="true" />
		</ParameterGroup>
		<Task>
			<Reference Include="System.IO" />
			<Reference Include="System.IO.Compression" />
			<Reference Include="System.Xml" />
			<Reference Include="System.Globalization" />
			<Reference Include="System.Text.RegularExpressions" />
			<Using Namespace="System.IO" />
			<Using Namespace="System.IO.Compression" />
			<Using Namespace="System.Xml" />
			<Using Namespace="System.Globalization" />
			<Using Namespace="System.Text.RegularExpressions" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
		 
			  try
			  {
					var version = string.Empty;
					var parts = packagePath.Split(Path.DirectorySeparatorChar);
					for(int i = parts.Length - 1; i > 0; i--)
					{
						var part = parts[i];
						var mc = Regex.Matches(part, @"\d+(\.\d+)+");
						if(mc.Count > 0) 
						{
							version =  mc[0].Value;
							break;
						}		
					}

					var xmlDoc = new XmlDocument();
					var root = xmlDoc.CreateElement("ProgramInfo");
					xmlDoc.AppendChild(root);

					var required = xmlDoc.CreateElement("RequiredInfo");
					root.AppendChild(required);

					var node = xmlDoc.CreateElement("FriendlyName");
					node.AppendChild(xmlDoc.CreateTextNode(targetName.Length >  20 ? targetName.Substring(0,20) : targetName));
					required.AppendChild(node);	

					node = xmlDoc.CreateElement("SystemName");
					node.AppendChild(xmlDoc.CreateTextNode(targetName));
					required.AppendChild(node);	

					node = xmlDoc.CreateElement("EntryPoint");
					node.AppendChild(xmlDoc.CreateTextNode(targetName));
					required.AppendChild(node);	

					node = xmlDoc.CreateElement("DesignToolId");
					node.AppendChild(xmlDoc.CreateTextNode("6"));
					required.AppendChild(node);	

					node = xmlDoc.CreateElement("ProgramToolId");
					node.AppendChild(xmlDoc.CreateTextNode("6"));
					required.AppendChild(node);	

					node = xmlDoc.CreateElement("TargetFramework");
					node.AppendChild(xmlDoc.CreateTextNode(targetFramework));
					required.AppendChild(node);	

					FileInfo fileInfo = new FileInfo(targetPath);

					var optional = xmlDoc.CreateElement("OptionalInfo");
					root.AppendChild(optional);

					node = xmlDoc.CreateElement("CompiledOn");
					node.AppendChild(xmlDoc.CreateTextNode(fileInfo.LastWriteTime.ToString("yyyy-MM-dd'T'HH:mm:ss.fffzzz", DateTimeFormatInfo.InvariantInfo)));
					optional.AppendChild(node);

					node = xmlDoc.CreateElement("CompilerRev");
					node.AppendChild(xmlDoc.CreateTextNode(assemblyVersion));
					optional.AppendChild(node);

					var plugin = xmlDoc.CreateElement("Plugin");
					root.AppendChild(plugin);
		
					node = xmlDoc.CreateElement("Include4.dat");
					node.AppendChild(xmlDoc.CreateTextNode(version));
					plugin.AppendChild(node);
						
					xmlDoc.Save(programInfoFilename);		


					string archiveName = Path.Combine(outputPath, archiveFilename);
					if(File.Exists(archiveName))
						File.Delete(archiveName);
				  
					using (Stream zipStream = new FileStream(Path.GetFullPath(archiveName), FileMode.Create, FileAccess.Write))
					using (ZipArchive archive = new ZipArchive(zipStream, ZipArchiveMode.Create))
					{
						var outputFiles = Directory.GetFiles(outputPath, "*.*", SearchOption.AllDirectories);
						var copyOnvif = File.Exists(Path.Combine(outputPath, "SimplSharpOnvifInterface.dll"));
						var packageFiles = Directory.GetFiles(packagePath, "*.*", SearchOption.AllDirectories);	
						var files = new string[outputFiles.Length + packageFiles.Length];
						outputFiles.CopyTo(files, 0);
						packageFiles.CopyTo(files, outputFiles.Length);	
							
						foreach (var filename in files)
						{
							if(filename.Equals(archiveName,StringComparison.OrdinalIgnoreCase) ||
							   filename.Equals(excludeTargets,StringComparison.OrdinalIgnoreCase) ||
							   (Path.GetFileName(filename).Equals("CrestronOnvif.dll", StringComparison.OrdinalIgnoreCase) && !copyOnvif))
								continue;


							var modificationDate = File.GetLastWriteTime(filename);
							
							using (Stream fileStream = new FileStream(filename, FileMode.Open, FileAccess.Read))
							{
								var fileNameToUse = filename.Replace(outputPath, null).Replace(packagePath, null);
								
								var entry = archive.CreateEntry(fileNameToUse);
								entry.LastWriteTime = modificationDate;
								using (Stream fileStreamInZip = entry.Open())
								{										
									fileStream.CopyTo(fileStreamInZip);
								}
							}
						}
					}
					
				
				}
				catch (Exception ex)
				{
					Log.LogErrorFromException(ex);
					return false;
				}
				#if NET6_0_OR_GREATER
				return true;
				#endif
				]]>
			</Code>
		</Task>
	</UsingTask>
	<UsingTask TaskName="SimplSharpProPostProcess" TaskFactory="$(TaskFactory)" AssemblyFile="$(MSBuildToolsPath)\$(MicrosoftAssembly)">
		<ParameterGroup>
			<programInfoFilename ParameterType="System.String" Required="true" />
			<targetPath ParameterType="System.String" Required="true" />
			<targetName ParameterType="System.String" Required="true" />
			<packagePath ParameterType="System.String" Required="true" />
			<outputPath ParameterType="System.String" Required="true" />
			<archiveFilename ParameterType="System.String" Required="true" />
			<excludeTargets ParameterType="System.String" Required="true" />
			<assemblyVersion ParameterType="System.String" Required="true" />
			<targetFramework Required="true" />
		</ParameterGroup>
		<Task>			
			<Using Namespace="System.IO" />
			<Using Namespace="System.IO.Compression" />
			<Using Namespace="System.Xml" />
			<Using Namespace="System.Globalization" />
			<Using Namespace="System.Text.RegularExpressions" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
		 
			  try
			  {
					var version = string.Empty;
					var parts = packagePath.Split(Path.DirectorySeparatorChar);
					for(int i = parts.Length - 1; i > 0; i--)
					{
						var part = parts[i];
						var mc = Regex.Matches(part, @"\d+(\.\d+)+");
						if(mc.Count > 0) 
						{
							version =  mc[0].Value;
							break;
						}		
					}

					var xmlDoc = new XmlDocument();
					var root = xmlDoc.CreateElement("ProgramInfo");
					xmlDoc.AppendChild(root);

					var required = xmlDoc.CreateElement("RequiredInfo");
					root.AppendChild(required);

					var node = xmlDoc.CreateElement("FriendlyName");
					node.AppendChild(xmlDoc.CreateTextNode(targetName.Length >  20 ? targetName.Substring(0,20) : targetName));
					required.AppendChild(node);	

					node = xmlDoc.CreateElement("SystemName");
					node.AppendChild(xmlDoc.CreateTextNode(targetName));
					required.AppendChild(node);	

					node = xmlDoc.CreateElement("EntryPoint");
					node.AppendChild(xmlDoc.CreateTextNode(targetName));
					required.AppendChild(node);	

					node = xmlDoc.CreateElement("DesignToolId");
					node.AppendChild(xmlDoc.CreateTextNode("6"));
					required.AppendChild(node);	

					node = xmlDoc.CreateElement("ProgramToolId");
					node.AppendChild(xmlDoc.CreateTextNode("6"));
					required.AppendChild(node);	

					node = xmlDoc.CreateElement("TargetFramework");
					node.AppendChild(xmlDoc.CreateTextNode(targetFramework));
					required.AppendChild(node);	

					FileInfo fileInfo = new FileInfo(targetPath);

					var optional = xmlDoc.CreateElement("OptionalInfo");
					root.AppendChild(optional);

					node = xmlDoc.CreateElement("CompiledOn");
					node.AppendChild(xmlDoc.CreateTextNode(fileInfo.LastWriteTime.ToString("yyyy-MM-dd'T'HH:mm:ss.fffzzz", DateTimeFormatInfo.InvariantInfo)));
					optional.AppendChild(node);

					node = xmlDoc.CreateElement("CompilerRev");
					node.AppendChild(xmlDoc.CreateTextNode(assemblyVersion));
					optional.AppendChild(node);

					var plugin = xmlDoc.CreateElement("Plugin");
					root.AppendChild(plugin);
		
					node = xmlDoc.CreateElement("Include4.dat");
					node.AppendChild(xmlDoc.CreateTextNode(version));
					plugin.AppendChild(node);
						
					xmlDoc.Save(programInfoFilename);		


					string archiveName = Path.Combine(outputPath, archiveFilename);
					if(File.Exists(archiveName))
						File.Delete(archiveName);
				  
					using (Stream zipStream = new FileStream(Path.GetFullPath(archiveName), FileMode.Create, FileAccess.Write))
					using (ZipArchive archive = new ZipArchive(zipStream, ZipArchiveMode.Create))
					{
						var outputFiles = Directory.GetFiles(outputPath, "*.*", SearchOption.AllDirectories);
						var copyOnvif = File.Exists(Path.Combine(outputPath, "SimplSharpOnvifInterface.dll"));
						var packageFiles = Directory.GetFiles(packagePath, "*.*", SearchOption.AllDirectories);	
						var files = new string[outputFiles.Length + packageFiles.Length];
						outputFiles.CopyTo(files, 0);
						packageFiles.CopyTo(files, outputFiles.Length);	
							
						foreach (var filename in files)
						{
							if(filename.Equals(archiveName,StringComparison.OrdinalIgnoreCase) ||
							   filename.Equals(excludeTargets,StringComparison.OrdinalIgnoreCase) ||
							   (Path.GetFileName(filename).Equals("CrestronOnvif.dll", StringComparison.OrdinalIgnoreCase) && !copyOnvif))
								continue;


							var modificationDate = File.GetLastWriteTime(filename);
							
							using (Stream fileStream = new FileStream(filename, FileMode.Open, FileAccess.Read))
							{
								var fileNameToUse = filename.Replace(outputPath, null).Replace(packagePath, null);
								
								var entry = archive.CreateEntry(fileNameToUse);
								entry.LastWriteTime = modificationDate;
								using (Stream fileStreamInZip = entry.Open())
								{										
									fileStream.CopyTo(fileStreamInZip);
								}
							}
						}
					}
					
				
				}
				catch (Exception ex)
				{
					Log.LogErrorFromException(ex);
					return false;
				}
				#if NET6_0_OR_GREATER
				return true;
				#endif
				]]>
			</Code>
		</Task>
	</UsingTask>
</Project>