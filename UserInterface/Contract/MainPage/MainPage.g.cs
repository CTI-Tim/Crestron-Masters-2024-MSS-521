//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     Version: 1.3001.21.0
//
//     Project:     MSSXpanel
//     Version:     1.0.0.0
//     Sdk:         CH5:2.7.0
//     Strategy:    Modern
//     IndexOnly:   True
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharpPro.DeviceSupport;
using Crestron.SimplSharpPro;
using MSSXpanel;

namespace MSSXpanel.MainPage
{

    /// <summary>
    /// MainPage
    /// </summary>
    public interface IMainPage 
    {
        object UserObject { get; set; }

        /// <summary>
        /// MutedFeedback.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void MutedFeedback_Visibility(MainPageBoolInputSigDelegate callback);

        /// <summary>
        /// MutedFeedback.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void MutedFeedback_Visibility(bool digital);

        /// <summary>
        /// MainPage.VisibilityJoin Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void MainPage_VisibilityJoin(MainPageBoolInputSigDelegate callback);

        /// <summary>
        /// MainPage.VisibilityJoin Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void MainPage_VisibilityJoin(bool digital);

        /// <summary>
        /// VolumeBar.Touch fb Feedback
        /// </summary>
        /// <param name="callback">The ushort delegate to update the panel.</param>
        void VolumeBar_Touchfb(MainPageUShortInputSigDelegate callback);

        /// <summary>
        /// VolumeBar.Touch fb Feedback
        /// </summary>
        /// <param name="callback">The ushort analog to update the panel.</param>
        void VolumeBar_Touchfb(ushort analog);

        /// <summary>
        /// VolumeBar.Touch fb Feedback
        /// </summary>
        /// <param name="callback">The short analog to update the panel.</param>
        void VolumeBar_Touchfb(short analog);

        /// <summary>
        /// SourceFeedbackLabel.Indirect Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void SourceFeedbackLabel_Indirect(MainPageStringInputSigDelegate callback);

        /// <summary>
        /// SourceFeedbackLabel.Indirect Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void SourceFeedbackLabel_Indirect(string serial);

        /// <summary>
        /// ComplexComponent VolumeButtonList
        /// </summary>
        MSSXpanel.MainPage.IVolumeButtonList VolumeButtonList { get; }

        /// <summary>
        /// ComplexComponent NvxInfo
        /// </summary>
        MSSXpanel.MainPage.INvxInfo NvxInfo { get; }

        /// <summary>
        /// ComplexComponent MediaControl
        /// </summary>
        MSSXpanel.MainPage.IMediaControl MediaControl { get; }

        /// <summary>
        /// ComplexComponent AirMediaInfo
        /// </summary>
        MSSXpanel.MainPage.IAirMediaInfo AirMediaInfo { get; }

        /// <summary>
        /// ComplexComponent PowerOffOk
        /// </summary>
        MSSXpanel.MainPage.IPowerOffOk PowerOffOk { get; }

        /// <summary>
        /// ComplexComponent SourceList
        /// </summary>
        MSSXpanel.MainPage.ISourceList SourceList { get; }
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> signal data.</param>
    /// <param name="mainpage">The <see cref="IMainPage"/> on which to apply the feedback.</param>
    public delegate void MainPageBoolInputSigDelegate(BoolInputSig boolInputSig, IMainPage mainpage);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="uShortInputSig">The <see cref="UShortInputSig"/> signal data.</param>
    /// <param name="mainpage">The <see cref="IMainPage"/> on which to apply the feedback.</param>
    public delegate void MainPageUShortInputSigDelegate(UShortInputSig uShortInputSig, IMainPage mainpage);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="stringInputSig">The <see cref="StringInputSig"/> signal data.</param>
    /// <param name="mainpage">The <see cref="IMainPage"/> on which to apply the feedback.</param>
    public delegate void MainPageStringInputSigDelegate(StringInputSig stringInputSig, IMainPage mainpage);

    /// <summary>
    /// MainPage
    /// </summary>
    internal partial class MainPage : IMainPage, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {

                /// <summary>
                /// Input or Feedback digital signal from Control System to panel: MainPage.MutedFeedback.Visibility
                /// MutedFeedback.Visibility
                /// </summary>
                public const uint MutedFeedback_VisibilityState = 1;

                /// <summary>
                /// Input or Feedback digital signal from Control System to panel: MainPageVisibilityJoin
                /// MainPage.VisibilityJoin
                /// </summary>
                public const uint MainPage_VisibilityJoinState = 2;

            }
            /// <summary>
            /// Analog signals.
            /// </summary>
            internal static class Numerics
            {

                /// <summary>
                /// Input or Feedback analog signal from Control System to panel: MainPage.VolumeBar.Touchfb
                /// VolumeBar.Touch fb
                /// </summary>
                public const uint VolumeBar_TouchfbState = 3;

            }
            /// <summary>
            /// Serial signals.
            /// </summary>
            internal static class Strings
            {

                /// <summary>
                /// Input or Feedback serial signal from Control System to panel: MainPage.SourceFeedbackLabel.Indirect
                /// SourceFeedbackLabel.Indirect
                /// </summary>
                public const uint SourceFeedbackLabel_IndirectState = 1;
            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="MainPage"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal MainPage(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MainPage"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal MainPage(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="MainPage"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 
            VolumeButtonList = new MSSXpanel.MainPage.VolumeButtonList(ComponentMediator, 4);
            NvxInfo = new MSSXpanel.MainPage.NvxInfo(ComponentMediator, 5);
            MediaControl = new MSSXpanel.MainPage.MediaControl(ComponentMediator, 6);
            AirMediaInfo = new MSSXpanel.MainPage.AirMediaInfo(ComponentMediator, 7);
            PowerOffOk = new MSSXpanel.MainPage.PowerOffOk(ComponentMediator, 8);
            SourceList = new MSSXpanel.MainPage.SourceList(ComponentMediator, 9);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((MSSXpanel.MainPage.VolumeButtonList)VolumeButtonList).AddDevice(device);

            ((MSSXpanel.MainPage.NvxInfo)NvxInfo).AddDevice(device);

            ((MSSXpanel.MainPage.MediaControl)MediaControl).AddDevice(device);

            ((MSSXpanel.MainPage.AirMediaInfo)AirMediaInfo).AddDevice(device);

            ((MSSXpanel.MainPage.PowerOffOk)PowerOffOk).AddDevice(device);

            ((MSSXpanel.MainPage.SourceList)SourceList).AddDevice(device);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((MSSXpanel.MainPage.VolumeButtonList)VolumeButtonList).RemoveDevice(device);

            ((MSSXpanel.MainPage.NvxInfo)NvxInfo).RemoveDevice(device);

            ((MSSXpanel.MainPage.MediaControl)MediaControl).RemoveDevice(device);

            ((MSSXpanel.MainPage.AirMediaInfo)AirMediaInfo).RemoveDevice(device);

            ((MSSXpanel.MainPage.PowerOffOk)PowerOffOk).RemoveDevice(device);

            ((MSSXpanel.MainPage.SourceList)SourceList).RemoveDevice(device);
        }

        #endregion

        #region CH5 Contract

        /// <summary>
        /// Boolean feedback MainPage.VisibilityJoin (from Control System to Panel)
        /// </summary>
        public void MainPage_VisibilityJoin(MainPageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.MainPage_VisibilityJoinState], this);
            }
        }

        /// <summary>
        /// Boolean feedback MainPage.VisibilityJoin (from Control System to Panel)
        /// </summary>
        public void MainPage_VisibilityJoin(bool digital)
        {
            MainPage_VisibilityJoin((sig, component) => sig.BoolValue = digital);
        }
        /// <summary>
        /// Boolean feedback MutedFeedback.Visibility (from Control System to Panel)
        /// </summary>
        public void MutedFeedback_Visibility(MainPageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.MutedFeedback_VisibilityState], this);
            }
        }

        /// <summary>
        /// Boolean feedback MutedFeedback.Visibility (from Control System to Panel)
        /// </summary>
        public void MutedFeedback_Visibility(bool digital)
        {
            MutedFeedback_Visibility((sig, component) => sig.BoolValue = digital);
        }

        /// <summary>
        /// Numeric feedback VolumeBar.Touch fb
        /// </summary>
        /// <param name="itemIndex">Index of the Widget List (0 based).</param>
        /// <param name="callback">The ushort delegate to update the panel.</param>
        public void VolumeBar_Touchfb(MainPageUShortInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].UShortInput[Joins.Numerics.VolumeBar_TouchfbState], this);
            }
        }

        /// <summary>
        /// Numeric feedback VolumeBar.Touch fb
        /// </summary>
        /// <param name="analog">The ushort analog to update the panel.</param>
        public void VolumeBar_Touchfb(ushort analog)
        {
            VolumeBar_Touchfb((sig, component) => sig.UShortValue = analog);
        }

        /// <summary>
        /// Numeric feedback VolumeBar.Touch fb
        /// </summary>
        /// <param name="analog">The short analog to update the panel.</param>
        public void VolumeBar_Touchfb(short analog)
        {
            VolumeBar_Touchfb((sig, component) => sig.ShortValue = analog);
        }

        /// <summary>
        /// String feedback SourceFeedbackLabel.Indirect
        /// </summary>
        /// <param name="buttonIndex">The index of the button (0 based).</param>
        /// <param name="callback">The delegate to set the string feedback.</param>
        public void SourceFeedbackLabel_Indirect(MainPageStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.SourceFeedbackLabel_IndirectState], this);
            }
        }

        /// <summary>
        /// String feedback SourceFeedbackLabel.Indirect
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        public void SourceFeedbackLabel_Indirect(string serial)
        {
            SourceFeedbackLabel_Indirect((sig, component) => sig.StringValue = serial);
        }

        /// <summary>
        /// ComplexComponent VolumeButtonList
        /// </summary>
        public MSSXpanel.MainPage.IVolumeButtonList VolumeButtonList { get; private set; }

        /// <summary>
        /// ComplexComponent NvxInfo
        /// </summary>
        public MSSXpanel.MainPage.INvxInfo NvxInfo { get; private set; }

        /// <summary>
        /// ComplexComponent MediaControl
        /// </summary>
        public MSSXpanel.MainPage.IMediaControl MediaControl { get; private set; }

        /// <summary>
        /// ComplexComponent AirMediaInfo
        /// </summary>
        public MSSXpanel.MainPage.IAirMediaInfo AirMediaInfo { get; private set; }

        /// <summary>
        /// ComplexComponent PowerOffOk
        /// </summary>
        public MSSXpanel.MainPage.IPowerOffOk PowerOffOk { get; private set; }

        /// <summary>
        /// ComplexComponent SourceList
        /// </summary>
        public MSSXpanel.MainPage.ISourceList SourceList { get; private set; }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "MainPage", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

        }

        #endregion
    }
}
