//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     Version: 1.3001.21.0
//
//     Project:     MSSXpanel
//     Version:     1.0.0.0
//     Sdk:         CH5:2.7.0
//     Strategy:    Modern
//     IndexOnly:   True
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharpPro.DeviceSupport;
using Crestron.SimplSharpPro;

namespace MSSXpanel
{
    /// <summary>
    /// Common Interface for Root Contracts.
    /// </summary>
    public interface IContract
    {
        object UserObject { get; set; }
        void AddDevice(BasicTriListWithSmartObject device);
        void RemoveDevice(BasicTriListWithSmartObject device);

        /// <summary>
        /// Fires on ANY activity on the panel.
        /// </summary>
        event EventHandler<EventArgs> Activity;
    }

    /// <summary>
    /// Root contract giving access to top level project items such as Pages and global Widgets.
    /// </summary>
    public sealed class Contract : IContract, IDisposable
    {
        #region Components

        private ComponentMediator ComponentMediator { get; set; }

        public MSSXpanel.IStartPage StartPage { get { return (MSSXpanel.IStartPage)InternalStartPage; } }
        private MSSXpanel.StartPage InternalStartPage { get; set; }

        public MSSXpanel.MainPage.IMainPage MainPage { get { return (MSSXpanel.MainPage.IMainPage)InternalMainPage; } }
        private MSSXpanel.MainPage.MainPage InternalMainPage { get; set; }

        public MSSXpanel.IAirMediaInfo AirMediaInfo { get { return (MSSXpanel.IAirMediaInfo)InternalAirMediaInfo; } }
        private MSSXpanel.AirMediaInfo InternalAirMediaInfo { get; set; }

        public MSSXpanel.IPowerOffOk PowerOffOk { get { return (MSSXpanel.IPowerOffOk)InternalPowerOffOk; } }
        private MSSXpanel.PowerOffOk InternalPowerOffOk { get; set; }

        public MSSXpanel.IHeaderBar HeaderBar { get { return (MSSXpanel.IHeaderBar)InternalHeaderBar; } }
        private MSSXpanel.HeaderBar InternalHeaderBar { get; set; }

        public MSSXpanel.INvxInfo NvxInfo { get { return (MSSXpanel.INvxInfo)InternalNvxInfo; } }
        private MSSXpanel.NvxInfo InternalNvxInfo { get; set; }

        public MSSXpanel.MediaControl.IMediaControl MediaControl { get { return (MSSXpanel.MediaControl.IMediaControl)InternalMediaControl; } }
        private MSSXpanel.MediaControl.MediaControl InternalMediaControl { get; set; }

        #endregion

        #region Construction and Initialization

        public Contract()
            : this(new List<BasicTriListWithSmartObject>().ToArray())
        {
        }

        public Contract(BasicTriListWithSmartObject device)
            : this(new [] { device })
        {
        }

        public Contract(BasicTriListWithSmartObject[] devices)
        {
            if (devices == null)
                throw new ArgumentNullException("Devices is null");

            ComponentMediator = new ComponentMediator();
            ComponentMediator.ConfigureActivityEvent(onActivity);

            InternalStartPage = new MSSXpanel.StartPage(ComponentMediator, 1);

            InternalMainPage = new MSSXpanel.MainPage.MainPage(ComponentMediator, 2);

            InternalAirMediaInfo = new MSSXpanel.AirMediaInfo(ComponentMediator, 10);

            InternalPowerOffOk = new MSSXpanel.PowerOffOk(ComponentMediator, 11);

            InternalHeaderBar = new MSSXpanel.HeaderBar(ComponentMediator, 12);

            InternalNvxInfo = new MSSXpanel.NvxInfo(ComponentMediator, 13);

            InternalMediaControl = new MSSXpanel.MediaControl.MediaControl(ComponentMediator, 14);


            for (int index = 0; index < devices.Length; index++)
            {
                AddDevice(devices[index]);
            }
        }

        /// <summary>
        /// Fires on ANY activity on the panel.
        /// </summary>
        public event EventHandler<EventArgs> Activity;
        private void onActivity(GenericBase currentDevice, SmartObjectEventArgs args)
        {
            var handler = Activity;
            if (handler != null)
                handler(currentDevice, args);
        }
        #endregion

        #region Standard Contract Members

        public object UserObject { get; set; }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            InternalStartPage.AddDevice(device);
            InternalMainPage.AddDevice(device);
            InternalAirMediaInfo.AddDevice(device);
            InternalPowerOffOk.AddDevice(device);
            InternalHeaderBar.AddDevice(device);
            InternalNvxInfo.AddDevice(device);
            InternalMediaControl.AddDevice(device);

        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            InternalStartPage.RemoveDevice(device);
            InternalMainPage.RemoveDevice(device);
            InternalAirMediaInfo.RemoveDevice(device);
            InternalPowerOffOk.RemoveDevice(device);
            InternalHeaderBar.RemoveDevice(device);
            InternalNvxInfo.RemoveDevice(device);
            InternalMediaControl.RemoveDevice(device);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            InternalStartPage.Dispose();
            InternalMainPage.Dispose();
            InternalAirMediaInfo.Dispose();
            InternalPowerOffOk.Dispose();
            InternalHeaderBar.Dispose();
            InternalNvxInfo.Dispose();
            InternalMediaControl.Dispose();

            ComponentMediator.Dispose(); 
        }

        #endregion
    }
}

