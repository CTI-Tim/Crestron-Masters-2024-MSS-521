<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RADCommon</name>
    </assembly>
    <members>
        <member name="T:Crestron.RAD.Common.Attributes.Programming.AvailableValuesAttribute">
            <summary>
            Specifies the values allowed for a parameter or property.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Attributes.Programming.AvailableValuesAttribute.AvailableValues">
            <summary>
            Returns the values allowed for a parameter or property.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.AvailableValuesAttribute.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.AvailableValuesAttribute"/> class.
            </summary>
            <param name="availableValues">The values allowed.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.AvailableValuesAttribute.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.AvailableValuesAttribute"/> class.
            </summary>
            <param name="availableValues">The values allowed.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.AvailableValuesAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.AvailableValuesAttribute"/> class.
            </summary>
            <param name="availableValues">The values allowed.</param>
        </member>
        <member name="T:Crestron.RAD.Common.Attributes.Programming.DefaultAttribute">
            <summary>
            Specifies the default value for a parameter or property.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Attributes.Programming.DefaultAttribute.DefaultValue">
            <summary>
            Returns the default value.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Attributes.Programming.DefaultAttribute.ReadOnly">
            <summary>
            Returns true if the default value is read-only, false otherwise.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.DefaultAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.DefaultAttribute"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.DefaultAttribute.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.DefaultAttribute"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
            <param name="readOnly">True if the default value is read-only, false otherwise.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.DefaultAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.DefaultAttribute"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.DefaultAttribute.#ctor(System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.DefaultAttribute"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
            <param name="readOnly">True if the default value is read-only, false otherwise.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.DefaultAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.DefaultAttribute"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.DefaultAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.DefaultAttribute"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
            <param name="readOnly">True if the default value is read-only, false otherwise.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.DefaultAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.DefaultAttribute"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.DefaultAttribute.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.DefaultAttribute"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
            <param name="readOnly">True if the default value is read-only, false otherwise.</param>
        </member>
        <member name="T:Crestron.RAD.Common.Attributes.Programming.DisplayAttribute">
            <summary>
            Specifies the display name of a parameter.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Attributes.Programming.DisplayAttribute.DisplayName">
            <summary>
            Returns the display name of a parameter.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.DisplayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.DisplayAttribute"/> class.
            </summary>
            <param name="displayName">The display name of a parameter.</param>
        </member>
        <member name="T:Crestron.RAD.Common.Attributes.Programming.DynamicAvailableValuesAttribute">
            <summary>
            Specifies a method or property which returns an IEnumerable of available values for a parameter.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Attributes.Programming.DynamicAvailableValuesAttribute.TypeName">
            <summary>
            Returns the type name of the class or interface specified.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Attributes.Programming.DynamicAvailableValuesAttribute.MethodOrPropertyName">
            <summary>
            Returns the method or property name specified.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Attributes.Programming.DynamicAvailableValuesAttribute.OperationType">
            <summary>
            Returns the <see cref="P:Crestron.RAD.Common.Attributes.Programming.DynamicAvailableValuesAttribute.OperationType"/> specified.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Attributes.Programming.DynamicAvailableValuesAttribute.Path">
            <summary>
            Returns the path specified.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.DynamicAvailableValuesAttribute.#ctor(System.String,System.String,Crestron.RAD.Common.Attributes.Programming.OperationType)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.DynamicAvailableValuesAttribute"/> class.
            </summary>
            <param name="typeName">The type name of the class or interface in which the method or property returning an IEnumerable of available values belongs to.</param>
            <param name="methodOrPropertyName">The name of the method or property returning an IEnumerable of available values.</param>
            <param name="operationType">The method or property <see cref="P:Crestron.RAD.Common.Attributes.Programming.DynamicAvailableValuesAttribute.OperationType"/></param>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.DynamicAvailableValuesAttribute.#ctor(System.String,System.String,Crestron.RAD.Common.Attributes.Programming.OperationType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.DynamicAvailableValuesAttribute"/> class.
            </summary>
            <param name="typeName">The type name of the class or interface in which the method or property returning an IEnumerable of available values belongs to.</param>
            <param name="methodOrPropertyName">The name of the method or property returning an IEnumerable of available values.</param>
            <param name="operationType">The method or property <see cref="P:Crestron.RAD.Common.Attributes.Programming.DynamicAvailableValuesAttribute.OperationType"/></param>
            <param name="path">A string specifying an object hierarchy to the method or property using dot notation.  Example:  "X.Y.Z"</param>
        </member>
        <member name="T:Crestron.RAD.Common.Attributes.Programming.IsSupportedAttribute">
            <summary>
            Specifies a method or property returning true or false indicating whether or not a method or property is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Attributes.Programming.IsSupportedAttribute.TypeName">
            <summary>
            Returns the type name of the class or interface specified.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Attributes.Programming.IsSupportedAttribute.MethodOrPropertyName">
            <summary>
            Returns the method or property name specified.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Attributes.Programming.IsSupportedAttribute.OperationType">
            <summary>
            Returns the <see cref="P:Crestron.RAD.Common.Attributes.Programming.IsSupportedAttribute.OperationType"/> specified.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Attributes.Programming.IsSupportedAttribute.Path">
            <summary>
            Returns the path specified.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.IsSupportedAttribute.#ctor(System.String,System.String,Crestron.RAD.Common.Attributes.Programming.OperationType)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.IsSupportedAttribute"/> class.
            </summary>
            <param name="typeName">The type name of the class or interface in which the method or property returning true or false belongs to.</param>
            <param name="methodOrPropertyName">The name of the method or property returning true or false.</param>
            <param name="operationType">The method or property <see cref="P:Crestron.RAD.Common.Attributes.Programming.IsSupportedAttribute.OperationType"/></param>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.IsSupportedAttribute.#ctor(System.String,System.String,Crestron.RAD.Common.Attributes.Programming.OperationType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.IsSupportedAttribute"/> class.
            </summary>
            <param name="typeName">The type name of the class or interface in which the method or property returning true or false belongs to.</param>
            <param name="methodOrPropertyName">The name of the method or property returning true or false.</param>
            <param name="operationType">The method or property <see cref="P:Crestron.RAD.Common.Attributes.Programming.IsSupportedAttribute.OperationType"/></param>
            <param name="path">A string specifying an object hierarchy to the method or property using dot notation.  Example:  "X.Y.Z"</param>
        </member>
        <member name="T:Crestron.RAD.Common.Attributes.Programming.MaxAttribute">
            <summary>
            Specifies the maximum value allowed for a parameter or property.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Attributes.Programming.MaxAttribute.Maximum">
            <summary>
            Returns the maximum value allowed.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.MaxAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.MaxAttribute"/> class.
            </summary>
            <param name="maximum">The maximum value allowed.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.MaxAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.MaxAttribute"/> class.
            </summary>
            <param name="maximum">The maximum value allowed.</param>
        </member>
        <member name="T:Crestron.RAD.Common.Attributes.Programming.MinAttribute">
            <summary>
            Specifies the minimum value allowed for a parameter or property.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Attributes.Programming.MinAttribute.Minimum">
            <summary>
            Returns the minimum value allowed.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.MinAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.MinAttribute"/> class.
            </summary>
            <param name="minimum">The minimum value allowed.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.MinAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.MinAttribute"/> class.
            </summary>
            <param name="minimum">The minimum value allowed.</param>
        </member>
        <member name="T:Crestron.RAD.Common.Attributes.Programming.ProgrammableEventAttribute">
            <summary>
            Specifies an event is programmable.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Attributes.Programming.ProgrammableEventAttribute.DisplayName">
            <summary>
            Returns the display name of the event.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.ProgrammableEventAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.ProgrammableEventAttribute"/> class.
            See <see cref="M:Crestron.RAD.Common.Attributes.Programming.ProgrammableEventAttribute.#ctor(System.String)"/> to set the display name of the event.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.ProgrammableEventAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.ProgrammableEventAttribute"/> class.
            </summary>
            <param name="displayName">The display name for the event.</param>
        </member>
        <member name="T:Crestron.RAD.Common.Attributes.Programming.ProgrammableOperationAttribute">
            <summary>
            Specifies a method or property is programmable.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Attributes.Programming.ProgrammableOperationAttribute.DisplayName">
            <summary>
            Returns the display name of the operation.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.ProgrammableOperationAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.ProgrammableOperationAttribute"/> class.
            See <see cref="M:Crestron.RAD.Common.Attributes.Programming.ProgrammableOperationAttribute.#ctor(System.String)"/> to set the display name of the operation.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.ProgrammableOperationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.ProgrammableOperationAttribute"/> class.
            </summary>
            <param name="displayName">The display name for the operation.</param>
        </member>
        <member name="T:Crestron.RAD.Common.Attributes.Programming.TriggeredByAttribute">
            <summary>
            Specifies the list of method/property names that trigger the event to prevent loops.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Attributes.Programming.TriggeredByAttribute.OperationsList">
            <summary>
            Returns the list of method/property names that trigger the event.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.TriggeredByAttribute.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.TriggeredByAttribute"/> class.
            </summary>
            <param name="firstOperation">The method/property name that will trigger the event.</param>
            <param name="additionalOperations">Additional method/property names that will trigger the event.</param>
        </member>
        <member name="T:Crestron.RAD.Common.Attributes.Programming.UnitAttribute">
            <summary>
            Specifies the unit for a parameter or property.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Attributes.Programming.UnitAttribute.Unit">
            <summary>
            Returns the unit specified.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Attributes.Programming.UnitAttribute.#ctor(Crestron.RAD.Common.Attributes.Programming.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.RAD.Common.Attributes.Programming.UnitAttribute"/> class.
            </summary>
            <param name="unit">The <see cref="P:Crestron.RAD.Common.Attributes.Programming.UnitAttribute.Unit"/>.</param>
        </member>
        <member name="T:Crestron.RAD.Common.Attributes.RelatesToTypeAttribute">
            <summary>
            Use this attribute to indicate that a method is related to
            another type. This helps reflection code to detect relationships
            that are not implicitly or otherwise indicated.
            </summary>
            <example>
            [RelatesToType(typeof(IPower))]
            public virtual void Power() ...
            </example>
        </member>
        <member name="T:Crestron.RAD.Common.BasicDriver.ABasicDriver">
            <summary>
            The abstract class that represent all drivers.
            It provides a default implementation of the following component interfaces:
            <para />IBasicInformation, IConnection2, IBasicLogger, IBasicInformation2, IDisposable, ISupportedCommandsHelper, and IModelFileSupport.
            <para />Drivers should not override anything here and should instead override the protocol class unless specified otherwise.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABasicDriver.Logger">
            <summary>
            A logger object that should not be referenced within drivers.
            This was introduced for more logging levels in the framework.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABasicDriver._cloudDeviceReporter">
            <summary>
            Used by this class to report changes to the Crestron Cloud
            and to allow the cloud to control the driver
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABasicDriver._deviceType">
            <summary>
            The device type of this driver from the embedded JSON file
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABasicDriver._debugLoggingLevelParamater">
            <summary>
            Expected parameters when a user uses the console command CCDLoggingLevel
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.DeviceProtocol">
            <summary>
            Used internally for mapping to the driver's protocol class.
            <para />The driver's protocol class which is responsible for handling all transmitted and received messages.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABasicDriver.ConnectionTransport">
             <summary>
             The transport used for communication with the device which is responsible for transmitting and receiving messages.
             <para />This should be set within the driver's constructor to a class that inmplements ATransportDriver.
            
             [[[example]]]
             </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABasicDriver.DriverData">
            <summary>
            <para />The common driver data between all device types.
            This will be set automatically by ConvertJsonFileToDriverData in each device-type library.
            <para />This should not be used or referenced - use the following instead:
            <para />Display - DisplayData
            <para />Cable Box - CableBoxData
            <para />Video Server - VideoServerData
            <para />Bluray Player - BlurayPlayerData
            <para />AV Receiver - AvrData
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABasicDriver.DriverID">
            <summary>
            Used internally for logging.
            Value is auto-assigned at run-time and should not be changed.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.AbstractClassType">
            <summary>
            Used internally by each device-type library.
            <para />This is the CType of the device-type class that implements this class
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.ConvertJsonFileToDriverData(System.String)">
            <summary>
            Used internally by each device-type library to parse the JSON driver data and to set the BaseRootObject.
            <para />Drivers should not override this and applications should not invoke it.
            </summary>
            <param name="jsonString">The serialized JSON object</param>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.Id">
            <summary>
            The ID that a driver will use when forming messages to the device.
            <para />This has to be set before the driver is initialized, otherwise the user attribute must be used to set it after initialization.
            <para />All drivers that support this field must also support the user attribute using the type "DeviceId"
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.Port">
            <summary>
            The default TCP/UDP port that will be used by the driver.
            <para />This should be used when initalizing an Ethernet driver unless a different value is needed.
            <para />This value is specified by the JSON driver data from the following node:
            <para />CrestronSerialDeviceApi.Api.Communication.Port
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.EnableAutoReconnect">
            <summary>
            Specifies if the driver supports auto-reconnect if communication with the device is lost.
            <para />This value is specified by the JSON driver data from the following node:
            <para />CrestronSerialDeviceApi.Api.Communication.EnableAutoReconnect
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.ComSpec">
            <summary>
            Specifies the default COM port specifications needed by the driver to communicate with the device.
            <para />This should be used when initializing a COM port driver unless a different value is needed.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.FakeFeedbackController">
            <summary>
            Used by the framework to fake-feedback for device-types that use one StateChange event
            with an enum that specifies the change.
            This will be instantiated when the driver's embedded JSON is deseriaized if SupportsFeedback is true.
            It only fakes feedback at this level, and not the protocol level. It does this by preventing 
            events via StateChange from executing if that event is being faked. The controller will stop blocking events
            once true feedback matches the faked state.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.Capabilities">
            <summary>
            Lookup for objects which implement capabilities if not this object.
            Capabilities which are implemented by this object directly do not need to be added to this lookup.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.#ctor">
            <summary>
            Constructor
            <para />This will do the following:
            <para />Load the driver JSON file (the first file found that ends with .JSON)
            <para />(S# Pro Only)Add console commands if they have not already been loaded
            <para />Set the driver ID used for logging
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.CreateNewDriverId">
            <summary>
            Function to allocate a new driver Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.SetDriverIdGeneratorFunc(System.Func{System.Int32})">
            <summary>
            For Crestron Internal Use Only!
            Overrides the function which allocates driver IDs, used when IDs need to be
            made unique in some larger context outside of the scope of the static counter
            in this class
            <para>
            If set to null, will use the static counter within <see cref="T:Crestron.RAD.Common.BasicDriver.ABasicDriver"/>.
            Note that this should be set before any IDs are generated and then probably not changed.
            Otherwise, you may end up with duplicate IDs.
            </para>
            </summary>
            <param name="driverIdGeneratorFunc">Function to allocate new driver IDs, or null to use RAD ID generator</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.InitializeCCDCommands">
            <summary>
            Made public static to provide for new framework ability to access this functionality
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.Initialize(Crestron.RAD.Common.BasicDriver.BaseRootObject)">
            <summary>
            Used internally by all device-type libraries when they are initialized.
            </summary>
            <param name="driverData">The BaseRootObject</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.GetControllableVideoInputs">
            <summary>
            Used internally by all device-type libraries.
            <para />Drivers should not override this.
            </summary>
            <returns>A list of controllable video inputs supported by the driver</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.GetControllableArrowKeys">
            <summary>
            Used internally by all device-type libraries.
            <para />Drivers should not override this.
            </summary>
            <returns>A list of controllable video inputs supported by the driver</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.GetControllableLetterButtons">
            <summary>
            Used internally by all device-type libraries.
            <para />Drivers should not override this.
            </summary>
            <returns>A list of controllable video inputs supported by the driver</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.GetControllableColorButtons">
            <summary>
            Used internally by all device-type libraries.
            <para />Drivers should not override this.
            </summary>
            <returns>A list of controllable video inputs supported by the driver</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.CreateSerializerSettings">
            <summary>
            Used internally by all device-type libraries.
            <para />Drivers should not override this.
            </summary>
            <returns>JsonSerializerSettings used for deserializing the JSON driver data.</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.CreateDeviceSupportConverter">
            <summary>
            Used internally by all device-type libraries.
            <para />Drivers should not override this.
            </summary>
            <returns>JsonConverter used by CreateSerializerSettings() to handle the DeviceSupport data in the JSON driver data.</returns>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.Guid">
            <summary>
            The GUID of the driver.
            <para />This is no longer used.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.Description">
            <summary>
            A description of the device the driver controls.
            <para />This value is specified by the JSON driver data from the following node:
            <para />CrestronSerialDeviceApi.GeneralInformation.Description
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.Manufacturer">
            <summary>
            The manufacturer of the device.
            <para />This value is specified by the JSON driver data from the following node:
            <para />CrestronSerialDeviceApi.GeneralInformation.Manufacturer
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.BaseModel">
            <summary>
            The base model of the device this driver was created for.
            <para />The driver can work with other models specified by SupportModels.
            <para />This value is specified by the JSON driver data from the following node:
            <para />CrestronSerialDeviceApi.GeneralInformation.BaseModel
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.DriverVersion">
            <summary>
            The version of the driver.
            <para />The first octet specifies breaking changes by the driver.
            If the driver starts with 2.x.x.x and the framework libraries are 3.x.x.x
            then this driver may not work with those libraries.
            <para />This value is specified by the JSON driver data from the following node:
            <para />CrestronSerialDeviceApi.GeneralInformation.DriverVersion
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.SupportedSeries">
            <summary>
            A list of supported Series of devices that is supported by this driver.
            <para />This value is specified by the JSON driver data from the following node:
            <para />CrestronSerialDeviceApi.GeneralInformation.SupportedSeries
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.SupportedModels">
            <summary>
            A list of all models that the driver supports.
            <para />Although functionality will remain, certain models may have a different set of IO connectors than specified by the base model.
            <para />This value is specified by the JSON driver data from the following node:
            <para />CrestronSerialDeviceApi.GeneralInformation.SupportedModels
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.VersionDate">
            <summary>
            A date and time of when the driver was last modified.
            <para />This value is specified by the JSON driver data from the following node:
            <para />CrestronSerialDeviceApi.GeneralInformation.VersionDate
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.SendCustomCommand(System.String)">
            <summary>
            Method to send a custom command to the device.
            <para />This will call ConectionTransport.Send(command, null)
            </summary>
            <param name="command">The string that should be sent immediatly to the device.</param>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.EnableRxOut">
            <summary>
            Enables the RxOut event.
            <para />If set to true then all data receieved will be provided by the RxOut event.
            <para />This is disabled by default.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABasicDriver._rxLock">
            <summary>
            Sends strings sent from the device.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.BasicDriver.ABasicDriver.RxOut">
            <summary>
            An event that provides data received by the driver.
            <para />This event is only active while EnableRxOut is true.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.SendRxOut(System.String)">
            <summary>
            Used internally to call the RxOut event with the specified message.
            </summary>
            <param name="message">Data received from the device</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.AddCustomCommand(System.String,System.String,System.Collections.Generic.List{Crestron.RAD.Common.Parameters})">
            <summary>
            Adds a custom command to the driver that can be used by calling SendCustomCommandByName(string commandName).
            <para />Commands added do not persist after reboots or program resets.
            <para />Commands must be added after initialization.
            </summary>
            <param name="commandName">The friendly name of the command</param>
            <param name="commandValue">The value that should be sent to the device</param>
            <param name="parameters">Any parameters specified by the commandValue</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.CheckIfCustomCommandExists(System.String)">
            <summary>
            Checks if a custom command exists in the internal collection.
            <para />This will search all added custom commands and custom commands defined in the JSON driver data in the node:
            <para />DriverData.CrestronSerialDeviceApi.Api.CustomCommands
            </summary>
            <param name="commandName">The friendly name of the command</param>
            <returns>True if it exists</returns>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.CustomCommandNames">
            <summary>
            Returns a list of all added custom command names and custom commands defined in the JSON driver data in the node:
            <para />DriverData.CrestronSerialDeviceApi.Api.CustomCommands
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.RemoveCustomCommandByName(System.String)">
            <summary>
            Removes a custom command from the driver.
            <para />Commands must be removed after initialization.
            </summary>
            <param name="commandName">The friendly name of the command to remove</param>
            <returns>True if the command was removed</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.SendCustomCommandByName(System.String)">
            <summary>
            Sends the specified custom command.
            </summary>
            <param name="commandName">The friendly name of the command to remove</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.SendCustomCommandValue(System.String)">
            <summary>
            Sends the value specified immediatly to the transport.
            <para />This will call ConectionTransport.Send(command, null)
            </summary>
            <param name="commandValue"></param>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.EnableStackTrace">
            <summary>
            Enables stack traces (where applicable) in logged exceptions.
            <para />This will not print if EnableLogging is not true.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABasicDriver.InternalEnableTxDebug">
            <summary>
            Used internally to for enabling/disabling stack trace logging.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.EnableTxDebug">
            <summary>
            Enables logging of all transmitted data to the device.
            <para />This will not print if EnableLogging is not true.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABasicDriver.InternalEnableRxDebug">
            <summary>
            Used internally to for enabling/disabling TX logging.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.EnableRxDebug">
            <summary>
            Enables logging of all received data from the device.
            <para />This will not print if EnableLogging is not true.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABasicDriver.InternalEnableLogging">
            <summary>
            Used internally to for enabling/disabling RX logging.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.EnableLogging">
            <summary>
            Enables logging on the driver.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABasicDriver.InternalCustomLogger">
            <summary>
            Used internally to for determining how messages are logged.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.CustomLogger">
            <summary>
            Determines how messages are logged.
            <para />CrestronConsole.PrintLine is the default logger.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.Log(System.String)">
            <summary>
            Called by drivers to log a message.
            <para />Logged messages will contain the current tick count, driver ID, abstract class type, and the specified message.
            </summary>
            <param name="message">The message that should be logged</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.LogCommandNotSupported(System.String)">
            <summary>
            Helper method to log a command not being supported by the driver.
            </summary>
            <param name="commandName">The command that is not supported</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.LogProtocolNotInitialized(System.String)">
            <summary>
            Helper method to log the protocol not being initialized.
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.Dispose">
            <summary>
            Disposes the driver.
            <para />This will also stop the transport connection and dispose DeviceProtocol.
            <para />This should be called last when destroying a driver.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.IsSecure">
            <summary>
            Specifies if the driver supportes secure communications with the device.
            <para />Refer to IAuthentication2.Required to see if authentication is required to communicate with the device.
            <para />This value is specified by the JSON driver data - the following type must not be AuthenticationTypes.NONE
            <para />CrestronSerialDeviceApi.Api.Communication.Authentication.Type
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.Connected">
            <summary>
            Specifies the driver is currently connected to the device.
            <para /> Ethernet driver will set this to true when the socket state is OK.
            <para /> HTTP drivers will set this to true when communication is possible with the device.
            <para /> COM and CEC drivers will set this value if they receive any data from the device.
            <para /> IR drivers will not set this to true.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.SupportsDisconnect">
            <summary>
            Specifies if the driver supports disconnecting from the device.
            <para />This value is specified by the JSON driver data -
            the DeviceSupport dictionary must contain CommonFeatureSupport.SupportsDisconnect as a key with a value of true.
            <para />CrestronSerialDeviceApi.DeviceSupport
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.Disconnect">
            <summary>
            This will disconnect the driver from the device, if supported.
            <para />Driver developers - this will call ConnectionTransport.Stop()
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.SupportsReconnect">
            <summary>
            Specifies if the driver supports reconnecting to the device.
            <para />This value is specified by the JSON driver data -
            the DeviceSupport dictionary must contain CommonFeatureSupport.SupportsReconnect as a key with a value of true.
            <para />CrestronSerialDeviceApi.DeviceSupport
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.Reconnect">
            <summary>
            This will disconnect the driver from the device and then connect to it, if supported.
            <para />Driver developers - this will call ConnectionTransport.Stop() then ConnectionTransport.Start()
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.Connect">
            <summary>
            This will connect the driver to the device, if supported.
            <para />Driver developers - this will call ConnectionTransport.Start()
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.SupportsUsername">
            <summary>
            Specifies if the driver supports using a username for authentication with the device.
            <para />This value is specified by the JSON driver data -
            the DeviceSupport dictionary must contain CommonFeatureSupport.SupportsUsername as a key with a value of true.
            <para />CrestronSerialDeviceApi.DeviceSupport
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.UsernameMask">
            <summary>
            Deprecated.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.UsernameKey">
            <summary>
            When applications store a username value in CrestronDataStore with a specific key, this key can be supplied to the driver to use
            when authenticating with the device or when StoreUsername(string username) is called to store the username.
            <para />Driver developers - this must be implemented if the driver supports authentication with the device.
            base.UsernameKey must be called within the driver overridden method.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.SupportsPassword">
            <summary>
            Specifies if the driver supports using a password for authentication with the device.
            <para />This value is specified by the JSON driver data -
            the DeviceSupport dictionary must contain CommonFeatureSupport.SupportsPassword as a key with a value of true.
            <para />CrestronSerialDeviceApi.DeviceSupport
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.PasswordMask">
            <summary>
            Deprecated.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.PasswordKey">
            <summary>
            When applications store a password value in CrestronDataStore with a specific key, this key can be supplied to the driver to use
            when authenticating with the device or when StorePassword(string password) is called to store the password.
            <para />Driver developers - this must be implemented in the driver if the driver supports authentication with the device.
            base.PasswordKey must be called within the driver overridden method.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.StoreUsername(System.String)">
            <summary>
            Stores the specified username in CrestronDataStore using the key supplied by UsernameKey.
            </summary>
            <param name="username">The username value to be stored in CrestronDataStore.</param>
            <returns>True if the value was stored</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.StorePassword(System.String)">
            <summary>
            Stores the specified password in CrestronDataStore using the key supplied by PasswordKey.
            </summary>
            <param name="username">The username value to be stored in CrestronDataStore.</param>
            <returns>True if the value was stored</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.OverrideUsername(System.String)">
            <summary>
            Allows applications to set the username the driver should use when authenticating with the device.
            This can be set before or after initializing and connecting the driver.
            If a UsernameKey is supplied, then this value will not be used unless there is no username in CrestronDataStore.
            <para />Driver developers - this must be implemented in the driver if the driver supports authentication with the device.
            </summary>
            <param name="username">The username to use for authentication with the device.</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.OverridePassword(System.String)">
            <summary>
            Allows applications to set the password the driver should use when authenticating with the device.
            This can be set before or after initializing and connecting the driver.
            If a PasswordKey is supplied, then this value will not be used unless there is no password in CrestronDataStore.
            <para />Driver developers - this must be implemented in the driver if the driver supports authentication with the device.
            </summary>
            <param name="username">The username to use for authentication with the device.</param>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.DefaultUsername">
            <summary>
            The default username the driver will use when authenticating with the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.DefaultPassword">
            <summary>
            The default password the driver will use when authenticating with the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.Required">
            <summary>
            Specifies if authentication is required for communication with the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.IsAuthenticated">
            <summary>
            Specifies if the driver is authenticated with the device.
            <para />Driver developers - this must be set within the driver and the Authentication event must be invoked.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.SetUserAttribute(System.String,System.String)">
            <summary>
            Sets a user attribute to the supplied value.
            This can be called before or after intialization.
            </summary>
            <param name="attributeId">The attribute ID</param>
            <param name="attributeValue">The attribute user-defined value</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.SetUserAttribute(System.String,System.Boolean)">
            <summary>
            Sets a user attribute to the supplied value.
            This can be called before or after intialization.
            </summary>
            <param name="attributeId">The attribute ID</param>
            <param name="attributeValue">The attribute user-defined value</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.SetUserAttribute(System.String,System.UInt16)">
            <summary>
            Sets a user attribute to the supplied value.
            This can be called before or after intialization.
            </summary>
            <param name="attributeId">The attribute ID</param>
            <param name="attributeValue">The attribute user-defined value</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.RetrieveUserAttributes">
            <summary>
            Provides a list of available user attributes.
            <para>
            This collection is defined by the following JSON driver data class: DriverData.CrestronSerialDeviceApi.UserAttributes,
            plus any user attributes that have been added dynamically by the driver using <see cref="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.AddUserAttribute(Crestron.RAD.Common.Enums.UserAttributeType,System.String,System.String,System.String,System.Boolean,Crestron.RAD.Common.Enums.UserAttributeRequiredForConnectionType)"/>.
            </para>
            </summary>
            <returns>List of user attributes</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.RaiseUserAttributesChangedEvent(System.Collections.Generic.List{Crestron.RAD.Common.UserAttribute})">
            <summary>
            Method to raise a <see cref="E:Crestron.RAD.Common.BasicDriver.ABasicDriver.UserAttributesChanged"/> event.
            </summary>
            <param name="userAttributes">Contains a list of all user attributes in the driver.</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.AddUserAttribute(Crestron.RAD.Common.Enums.UserAttributeType,System.String,System.String,System.String,System.Boolean,Crestron.RAD.Common.Enums.UserAttributeRequiredForConnectionType)">
            <summary>
            Add a user attribute to this driver.
            </summary>
            <param name="type">The type of the user attribute.</param>
            <param name="id">
            The id of the attribute used when SetUserAttribute is called.
            Must be unique across all attributes, including attributes defined in the driver's json file.
            </param>
            <param name="label">A friendly name for the attribute.</param>
            <param name="description">A description of the attribute.</param>
            <param name="persistent">Specifies if the attribute needs to be saved.</param>
            <param name="connectionType">Specifies when the attribute needs to be shown to the user.</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.AddUserAttribute(Crestron.RAD.Common.Enums.UserAttributeType,System.String,System.String,System.String,System.Boolean,Crestron.RAD.Common.Enums.UserAttributeRequiredForConnectionType,Crestron.RAD.Common.Enums.UserAttributeDataType,System.String)">
            <summary>
            Add a user attribute to this driver that has a data input.
            </summary>
            <param name="type">The type of the user attribute.</param>
            <param name="id">
            The id of the attribute used when SetUserAttribute is called.
            Must be unique across all attributes, including attributes defined in the driver's json file.
            </param>
            <param name="label">A friendly name for the attribute.</param>
            <param name="description">A description of the attribute.</param>
            <param name="persistent">Specifies if the attribute needs to be saved.</param>
            <param name="connectionType">Specifies when the attribute needs to be shown to the user.</param>
            <param name="dataType">Specifies the type of data used in this attribute.</param>
            <param name="defaultValue">Specifies the default value of the attribute, if any.</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.AddUserAttribute(Crestron.RAD.Common.Enums.UserAttributeType,System.String,System.String,System.String,System.Boolean,Crestron.RAD.Common.Enums.UserAttributeRequiredForConnectionType,Crestron.RAD.Common.Enums.UserAttributeDataType,System.String,System.String)">
            <summary>
            Add a user attribute to this driver that has a data input.
            </summary>
            <param name="type">The type of the user attribute.</param>
            <param name="id">
            The id of the attribute used when SetUserAttribute is called.
            Must be unique across all attributes, including attributes defined in the driver's json file.
            </param>
            <param name="label">A friendly name for the attribute.</param>
            <param name="description">A description of the attribute.</param>
            <param name="persistent">Specifies if the attribute needs to be saved.</param>
            <param name="connectionType">Specifies when the attribute needs to be shown to the user.</param>
            <param name="dataType">Specifies the type of data used in this attribute.</param>
            <param name="defaultValue">Specifies the default value of the attribute, if any.</param>
            <param name="defaultValueLabel">Specifies the default value label of the attribute, if any.</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.RemoveUserAttribute(System.String)">
            <summary>
            Only attributes that have been added using <see cref="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.AddUserAttribute(Crestron.RAD.Common.Enums.UserAttributeType,System.String,System.String,System.String,System.Boolean,Crestron.RAD.Common.Enums.UserAttributeRequiredForConnectionType)"/> can be removed.
            User Attributes defined in the driver's json file cannot be removed.
            </summary>
            <param name="id">The id of the user attribute.</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.ModifyUserAttribute(System.String,System.String)">
            <summary>
            Modify the label or description of an existing user attribute.
            </summary>
            <param name="id">The id of an existing user attribute.</param>
            <param name="description">A description of the attribute.</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.ModifyUserAttribute(System.String,System.String,System.String)">
            <summary>
            Modify the label, description and default value of an existing user attribute.
            </summary>
            <param name="id">The id of an existing user attribute.</param>
            <param name="description">A description of the attribute.</param>
            <param name="defaultValue">Default value of the attribute if any.</param>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.SupportedCommands">
            <summary>
            Provides a list of supported commands that the driver supports.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.ProcessModelPowerSettings(Crestron.RAD.Common.PowerWaitPeriod)">
            <summary>
            Used internally to process settings located in the model file.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.ProcessModelConnections(Crestron.RAD.Common.ConnectionsNode)">
            <summary>
            Used internally to process settings located in the model file.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.ProcessModelArrowKeys(System.Collections.Generic.List{Crestron.RAD.Common.Enums.ArrowDirections})">
            <summary>
            Used internally to process settings located in the model file.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.ProcessModelLetterKeys(System.Collections.Generic.List{Crestron.RAD.Common.Enums.LetterButtons})">
            <summary>
            Used internally to process settings located in the model file.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.ProcessModelColorButtons(System.Collections.Generic.List{Crestron.RAD.Common.Enums.ColorButtons})">
            <summary>
            Used internally to process settings located in the model file.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.GetLocalizedStrings(System.String)">
            <summary>
            Retrieves all the localized strings (and their IDs) used by this device.
            </summary>
            <param name="culture">
            Specifies the language code and country region code to be retrieved.
            The string must formatted as the "languagecode2" as defined by the ISO 639-1 standard,
            followed by a hyphen and then the "country/regioncode2" as defined by the ISO 3166.
            <para>
            For example, "en-US" for English in the United States.
            </para>
            <para>
            If the specified culture is not supported, this will return null.
            </para>
            </param>
            <para>
            Keys of 0 are not supported.
            Any property that returns 0 as a localized string ID indicates an empty string.
            </para>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.GetSupportedCultures">
            <summary>
            Retrieves all cultures supported by this device.
            See the <see cref="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.GetLocalizedStrings(System.String)"/> method for more information
            about the format of each culture string.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABasicDriver._defaultTimeUntilDeviceReportsNewValueMs">
            <summary>
            The amount of time a device would take to report a new value.
            While we can poll for feedback at some interval, some devices may take some time
            until they report the new value. This value is in seconds.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.SupportsFeedback">
            <summary>
            Specifies if the driver supports feedback from the device.
            <para />If this is false, then the driver will not provide any events for device feedback.
            <para />This value is specified by the JSON driver data - the following node must contain CommonFeatureSupport.SupportsFeedback and it must be set to true:
            <para />CrestronSerialDeviceApi.DeviceSupport
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.MinimumResponseTime">
            <summary>
            Approximate minimum number of milliseconds the device or driver will report state/feedback changes.
            <para>
            The formula for this value is typically:
            [Polling Interval (if any)] + [Device Response Time] + [Response Processing Time].
            </para>
            <para>
            This may be 0 or a very small value if the device responds quickly
            and driver processing time is negligible.
            </para>
            <para>
            Amongst other reasons, this property can be used to write smarter code that waits at least this amount of time
            before processing changes to provide optimize updates to higher level components.
            </para>
            <para>
            If no capabilities of the device support feedback, this can be ignored.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.MaximumResponseTime">
            <summary>
            Approximate maximum number of milliseconds the device or driver will take
            before reporting state/feedback changes after the device receives a command.
            <para>
            The formula for this value is typically:
            ([Device Response Time] + [Response Processing Time]) * 2 + [Polling Interval (if any)].
            </para>
            <para>
            The first part of the equation is multiplied by 2 because a command may be sent to the device
            just as the driver is beginning a poll.
            </para>
            <para>
            Amongst other reasons, this property can be used to write smarter code that waits at least this amount of time
            before timing out or declaring a device unresponsive.
            </para>
            <para>
            If no capabilities of the device support feedback, this can be ignored.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.DriverPath">
            <summary>
            The full path to the folder containing everything provided in this driver's pkg.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.SaveSetting(System.String,System.Object)">
            <summary>
            Save a setting for this device by key which will be persisted through reboots and power loss.
            <para>
            This can be useful for devices that don't remember their own settings or can be used to return a device
            to its previous state after a power failure/reboot/etc.
            </para>
            <para>
            To retreive the value of the setting use <see cref="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.GetSetting(System.String)"/>.
            </para>
            </summary>
            <param name="key">The key of the setting.</param>
            <param name="value">The value of the setting.</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.DeleteSetting(System.String)">
            <summary>
            Erase the value of a saved setting from memory.
            </summary>
            <param name="key">The key of the setting.</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.GetSetting(System.String)">
            <summary>
            Get the value of a setting that has been saved.
            </summary>
            <param name="key">The key of the setting.</param>
            <returns>The value of the setting. Null if the key is not found.</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.OnFakeFeedbackChanged(Crestron.RAD.Common.Enums.StandardCommandsEnum,Crestron.RAD.Common.Enums.CommonCommandGroupType)">
            <summary>
            Invoked whenever a command is sent to the device.
            </summary>
            <param name="command">CommandSet.StandardCommand</param>
            <param name="commandGroup">CommandSet.CommandGroup</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.FakeFeedbackForStandardCommand(Crestron.RAD.Common.Enums.StandardCommandsEnum,Crestron.RAD.Common.Enums.CommonCommandGroupType)">
            <summary>
            Used by the framework to let device-types fake feedback based on the standard command and command group just sent to the transport.
            </summary>
            <param name="command">CommandSet.StandardCommand</param>
            <param name="commandGroup">CommandSet.CommandGroup</param>
            <returns>The device-type specific state object. Return null if this feautre should be circumvented</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.RegisterWithCloud(System.String)">
            <summary>
            This must be invoked if the application desires the driver to report to the cloud.
            The driver will report any applicable feedback changes to the cloud, and it will allow
            the cloud to control the driver.
            </summary>
            <param name="uniqueId">This must be a unique ID that is user-friendly. This must be between 1 and 256 characters</param>
            <returns>True if registration was successful.</returns>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.IsRegisteredWithCloud">
            <summary>
            The current registration state of the driver with the cloud.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.OnIsRegisteredChanged(System.Object,Crestron.RAD.Common.Events.CloudRegistrationEventArgs)">
            <summary>
            Invoked when there is a change to the IsRegisteredWithCloud property
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.SetupCloudReporting">
            <summary>
            This must be called after JSON has been deserialized since it requires the device type of the driver
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.ParseDeviceTypeFromJsonFile">
            <summary>
            Maps the device type string in the JSON data to Crestron.RAD.Common.Enums.DeviceTypes
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.TryGetCapability``1">
            <summary>
            Queries for a capability of the device.
            If the capability exists in the <see cref="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.Capabilities"/> lookup,
            that capabiltiy will be returned. Otherwise, this will fall back to
            returning this object if it supports the capability.
            </summary>
            <typeparam name="T">The capability to retrieve</typeparam>
            <returns>An object implementing the capability, or null if the capability is not supported.</returns>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.RuntimeLogger">
            <summary>
            Diagnostic logger property to report driver related issues at a higher level
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.Logger">
            <summary>
            A logger object that should not be referenced within drivers.
            This was introduced for more logging levels in the framework.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.DefaultPollingIntervalInMs">
            <summary>
            If a driver doesn't set the polling interval, then this value will be used.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.EnableLogging">
            <summary>
            Returns true if logging has been enabled by the user
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.PowerIsOn">
            <summary>
            The device's current power state
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.WarmingUp">
            <summary>
            Returns true if the device is warming up.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.CoolingDown">
            <summary>
            Returns true if the device is cooling down.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.WarmUpTime">
            <summary>
            The minimum amount of time it takes the device to warm up after a power on command.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.CoolDownTime">
            <summary>
            The minimum amount of time it takes the device to cool down after a power off command.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.WarmUpCoolDownTimer">
            <summary>
            No longer used but kept for previously released drivers that reference this.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.UseWarmUpCoolDownTimer">
            <summary>
            True if the driver should use the default implementation of warmup/cooldown.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.WarmupStartTick">
            <summary>
            This is set internally when a warmup period begins.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.CooldownStartTick">
            <summary>
            This is set internally when a cooldown period begins.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol._originalClockInterval">
            <summary>
            The original clock interval before it was changed to <see cref="F:Crestron.RAD.Common.BasicDriver.DriverClock.Clock25ms"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol._oneSecondInClockTicks">
            <summary>
            Clock is 25ms.
            To get 1 second: 1000ms/25ms = 40 ticks
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol._connectionPollCommandReceivedResponse" -->
        <member name="P:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.PollingInterval">
            <summary>
            Time in ms between polls.  Must be less than or equal to 1000 and a multiple of TickRate (1000).
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.CustomCommandRamper">
            <summary>
            CTimer based on defined class DirectionalRampingTimer used for ramping.
            The parameter is supposed to be used for direction but here it is defined
            as a string as it can be of any type
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.#ctor(Crestron.RAD.Common.Transports.ISerialTransport,System.Byte)">
            <summary>
            The constructor for the base driver protocol. 
            </summary>
            <param name="transport">The transport being used for communcation.</param>
            <param name="id">The device ID used in communication if the API requires an ID embedded in commands.</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.Initialize(System.Object)">
            <summary>
            Called by every device-type thorugh their own Initialize method. 
            <para>This may not be called by drivers.</para>
            </summary>
            <param name="driverData">Object of type <see cref="T:Crestron.RAD.Common.BasicDriver.BaseRootObject"/></param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.Dispose">
            <summary>
            Implementation of IDisposable.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.InternalDriver25msClock">
            <summary>
            This is responsible for all sending logic
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.ProcessWarmUpCoolDown">
            <summary>
            Replaces the CTimer instances the framework use to use for warmup/cooldown
            by using the driver clock. This will invoke the callbacks <see cref="E:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.WarmUpFinished"/> and
            <see cref="E:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.CoolDownFinished"/> when the driver finishes warmup/cooldown. 
            <para>Each device-type library has to assign their own respective Warmup/Cooldown callbacks from
            their timers to these methods.</para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.WarmUpCoolDownProcessed">
            <summary>
            This should be overridden if the device type protocol wants perform any extra actions
            when the framework processes the warmup / cooldown period to see if they are finished.
            <para>This is invoked after <see cref="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.ProcessWarmUpCoolDown"/> is done.</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.PollForConnectionState" -->
        <!-- Badly formed XML comment ignored for member "M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.ConnectionStatePollCommandSentCallback" -->
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.ProcessUnknownResponses">
            <summary>
            This will check if enough responses came back without being validated by the driver.
            The response buffer will clear when enough unrecognized responses come in.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.DataHandler(System.String)">
            <summary>
            Invoked by the transport class when it receives data from the controlled device.
            The default implementation of this is it adds the response to an instance of CrestronQueue
            that another thread monitors and eventually calls ValidateResponse with.
            </summary>
            <param name="rx">The data received from the device.</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.Log(System.String)">
            <summary>
            Logs a message to console or CustomLogger with a prepended header.
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.LogCommandNotSupported(System.String)">
            <summary>
            Log helper to log a command that is not supported by the driver.
            </summary>
            <param name="commandName">That command name that is not supported</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.ConnectionChanged(System.Boolean)">
            <summary>
            This is invoked whenever the connection state changes, either via the transport class
            or there being too many time-outs in this class.
            <para>The base method must be called if this is overridden unless the driver sees a need for hiding connected/disconnected feedback,
            such as in cases where it can be predicted. Example: Device shuts off LAN port for a few seconds when it is powered on initially.</para>
            <para>For drivers that set SupportsUnsolicitedFeedback to true, this will restart the polling sequence if the connection state when from false to true</para>
            </summary>
            <param name="connection">The new connected state</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.MessageTimedOut(System.String)">
            <summary>
            Invoked when a poll command that was recently sent has not received a response
            in at least ResponeTimeOut ms. If there are five or more timeouts, this will 
            invoked ConnectionChangedEvent with a disconnected state if the transport.IsEthernetTransport
            is set to false.
            </summary>
            <param name="timeoutMessage">The message to log that explains what timed out</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.PressCustomCommand(System.String)">
            <summary>
            Base version based on implementation where CTimer is allocated during initialization
            Drivers should override to implement their own version 
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.ReleaseCustomCommand(System.String)">
            <summary>
            Base version based on implementation where CTimer is allocated during initialization
            Drivers should override to implement their own version 
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.SetUserAttribute(System.String,System.String)">
            <summary>
            Drivers should override this to capture any attribute values they may need. 
            The driver is responsible for validating the ID and using the value.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.SetUserAttribute(System.String,System.Boolean)">
            <summary>
            Drivers should override this to capture any attribute values they may need. 
            The driver is responsible for validating the ID and using the value.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.SetUserAttribute(System.String,System.UInt16)">
            <summary>
            Drivers should override this to capture any attribute values they may need. 
            The driver is responsible for validating the ID and using the value.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.ConnectionChangedEvent(System.Boolean)">
            <summary>
            This is invoked by <see cref="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.ConnectionChanged(System.Boolean)"/> and every device type needs
            to implement this to throw their appropriate connection event.
            <para>Drivers may not override this and should use <see cref="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.ConnectionChanged(System.Boolean)"/> if they need the new connection state.</para>
            </summary>
            <param name="connection">The new connected state</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.ChooseDeconstructMethod(Crestron.RAD.Common.BasicDriver.ValidatedRxData)">
            <summary>
            Invoked after a driver returns an instance of ValidatedRxData that has Ready set to true.
            The default implementation will switch based on the command group of the object and 
            </summary>
            <param name="validatedData">The response from a device that is ready to be parsed</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.Poll">
            <summary>
            This method will be called every PollingInterval ms.  
            Any non-standard polling should be handled here. The base method has no logic.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.UpdatePollingSequence">
            <summary>
            This will update the persistent polling commands in the queue if the driver has changed the polling sequence at run-time.
            Only updating PowerOnPollingSequence since no commands except Power group commands are sent while the driver believes the device to be off.
            <para>This will not be called internally if the driver supports unsolicited feedaback. It will only be called when the connection state changes from false to true</para>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.WarmupStartTickWasZero">
            <summary>
            Used to indicate whether initially the WarmupStartTick was 
            initially 0 most likely because the driver overrides the WarmUp()
            methods and never initialized this value
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.CooldownStartTickWasZero">
            <summary>
            Used to indicate whether initially the CoolDownStartTick was 
            initially 0 most likely because the driver overrides the CoolDown()
            methods and never initialized this value
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol._commandId">
            <summary>
            The command ID that will be incremented everytime it is assigned to a command.
            Anytime this value is referenced to create a <see cref="T:Crestron.RAD.Common.BasicDriver.Command"/> it must be incremented. If it
            is higher that ulong.MaxValue, it must be assigned ulong.MinValue.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol._transmissionTickCountForPendingRequest">
            <summary>
            Keeps track of when the last command that was considered a pending request was sent. 
            This is used when WaitForResponse is true and the driver needs to not send anyting until a time out
            or until the response to the last sent command is received.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol._lastSentCommandTick">
            <summary>
            This needs to be updated to CrestronEnvironment.TickCount whenever any command is sent.
            This means polling and non-polling commands are responsible for updating to this.
            This is used to enforce command pacing based on TimeBetweenCommands
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol._lastSentCommandThatSkippedQueueTick">
            <summary>
            This keeps track of when the last non-polling command was
            sent to the transport without ever going into the queue.
            This is tracked since we want to hold off polling for a little bit after
            a command skipped the queue incase of ramping.
            We don't want polling commands to go out during a ramp, so this is how we keep track of it 
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol._ticksToWaitToResumePolling">
            <summary>
            If we sent a command to the device without going to the queue first,
            then we need to wait until we start polling again incase there are more commands
            that will be sent that way. This is done to avoid polling during ramps
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol._lastPollCycleTick">
            <summary>
            This keeps tracks of when the last poll cycle happened. 
            This means that when the first poll command is sent from the sequence, this value is set.
            It will not be set for all subsequent poll commands in that same poll cycle.
            This will make sure that we only poll in bursts at the polling interval.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol._pollCommandMarkedForRemoval">
            <summary>
            Keeps track of when a poll command was marked for removal
            to prevent iterating through that collection every clock cycle
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol._finishedPollSequence">
            <summary>
            Keeps track of when the last command of the poll sequence was sent
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol._nonPollingCommandLock">
            <summary>
            Lock used for the non-polling queue for modifications
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol._nonPollingCommandQueue">
            <summary>
            Non-polling queue that uses a modified MinHeap
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol._pollingCommandLock">
            <summary>
            Lock used for the polling queue for modifications
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol._pollingCommandQueue">
            <summary>
            Polling queue
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol._sentCommandGroupQueueLock">
            <summary>
            Lock used for the sent command group queue for modifications
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol._sentCommandGroupQueue">
            <summary>
            Queue used to solve the race conditions that are inherent in trying to
            use LastCommandGroup which is not reliable.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.Send(Crestron.RAD.Common.BasicDriver.CommandSet)">
            <summary>
            Sends the specified CommandSet object to the internal command processor.
            
            If this is a standard polling command, it will be sent to the polling queue as non-persistent.
            Otherwise it will be sent to the non-polling queue or will be sent to the device immediatly if conditions allow that.
            </summary>
            <returns>False</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.PrepareStringThenSend(Crestron.RAD.Common.BasicDriver.CommandSet)">
            <summary>
            Marks a command as ready to send (no further processing is neeed). 
            This will then invoke Send with the commandSet.
            
            This should be overridden by drivers to modify the CommandSet
            before it is ready to be sent to the device. 
            
            If a driver sends the data directly to the device in this method, that driver
            needs to return true in their overridden method.
            </summary>
            <param name="commandSet">The command to get ready to set</param>
            <returns>True if this method sent the command to the device by the driver.</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.PrepareString(Crestron.RAD.Common.BasicDriver.Command)">
            <summary>
            Work-around for backwards compatability. Allows for preparing a CommandSet
            without having it invoke Send.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.SetPollingSequence(Crestron.RAD.Common.Enums.StandardCommandsEnum[])">
            <summary>
            Sets the polling sequence the driver should use while the device is powered on.
            Polling commands will be prepared when they are about to be sent and unprepared afterwards.
            Only standard polling commands are allowed in the sequence.
            </summary>
            <param name="sequence">The standard polling commands that should be added to the polling queue</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.AddPollingCommand(Crestron.RAD.Common.BasicDriver.CommandSet)">
            <summary>
            Do not call this in a driver.
            Only called by the device-type classes.
            Given a CommandSet, this will convert it to <see cref="T:Crestron.RAD.Common.BasicDriver.Command"/> and make it
            a non-standard polling command even if the CommandSet is already a polling command.
            
            This allows the framework to still add non-standard polling commands to the polling queue while preventing
            drivers from doing the same thing. Drivers need to override Poll() to perform non-standard polling.
            
            <para>This will not add the command if <see cref="P:Crestron.RAD.Common.BasicDriver.CommandSet.Command"/> is null/empty.</para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.SendToTransport(Crestron.RAD.Common.BasicDriver.CommandSet,System.Boolean)">
            <summary>
            Used to send a command to the device. 
            
            This will set to PendingRequest to the command if the command was not already sent
            This will always invoke the callback of the CommandSet.
            This will always set LastCommandGroup to the commandgroup of the command
            </summary>
            <param name="commandSet">The command to send</param>
            <param name="commandAlreadySent">Specifies if the command should be sent to the transport. 
            Drivers may send the command on their own within PrepareStringThenSend</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.ProcessCommandQueue">
            <summary>
            Method that is invoked by the static clock every 25ms.
            This method is in a non-shared CCriticalSection that it will try to enter, and if it is unable to enter, then it will exit. 
            This will remove any commands that have been marked for removal in the queue
            or that cannot be in the queue under current conditions. 
            Finally it will attempt to send a command to the device. Non-polling commands have the highest priority, but if the 
            first one cannot be sent, then a polling command will be sent instead if conditions allow for that.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.ProcessNonPollingCommandQueue(System.Collections.Generic.List{Crestron.RAD.Common.BasicDriver.Command})">
            <summary>
            This will only look at the first possible command and if it is able to send it,
            it will return true and send it. If it is unable to do so, it will return false.
            
            If the command supports fake-feedback, it will perform that opeartion before sending it,
            but after confirming it can send it.
            </summary>
            <param name="commands">List of non-polling commands</param>
            <returns>True if the command was sent to the transport</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.ProcessPollingCommandQueue(System.Collections.Generic.List{Crestron.RAD.Common.BasicDriver.Command})">
            <summary>
            This will iterate through all the polling commands until it finds one it can send.
            This will also check to see if any polling commands have timed out.
            The polling cycle begins at PollingInterval, but only after the last poll command in a sequence is sent.
            </summary>
            <param name="commands">List of polling commands</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.RemoveCommandFromNonPollingQueue(Crestron.RAD.Common.BasicDriver.Command)">
            <summary>
            Thread-safe method to remove a non-polling comand from the queue
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.RemoveCommandFromPollingQueue(Crestron.RAD.Common.BasicDriver.Command)">
            <summary>
            Thread-safe method that will remove a polling command from the queue
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.CanRemoveNonPollingCommand(Crestron.RAD.Common.BasicDriver.Command,System.Collections.Generic.List{Crestron.RAD.Common.BasicDriver.Command})">
            <summary>
            Defines the rules for determining if a non-polling command can be removed from the device.
            </summary>
            <param name="command">The command that is being questioned</param>
            <param name="nonPollingCommands">Some rules require knowing what else is in the queue</param>
            <returns>True if the command can be removed</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.CanRemoveNonPollingCommandOverride(Crestron.RAD.Common.BasicDriver.CommandSet,System.Boolean)">
            <summary>
            Defines the rules for determining if a non-polling command can be removed from the queue.
            </summary>
            <param name="commandSet">The command that is being questioned</param>
            <param name="powerOnCommandExistsInQueue">True if there is a PowerOn command in the queue</param>
            <returns>True if the command can be removed</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.AddCommandToPollingQueue(Crestron.RAD.Common.BasicDriver.Command)">
            <summary>
            This attemps to add a command to the polling queue. 
            If the standard command already exists in the queue, it will not replace it.
            </summary>
            <param name="command">The command to the add to the polling queue</param>
            <returns>True if the comand was added. False if the standard command already exists in the queue</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.AddCommandToNonPollingQueue(Crestron.RAD.Common.BasicDriver.Command)">
            <summary>
            Thread-safe method that will add a command to the non-polling queue.
            This will perform no checks before adding it.
            </summary>
            <returns>True if the command was addd to the non-polling queue</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.ModifyNonPollingQueueWithUpdatedStandardCommand(Crestron.RAD.Common.BasicDriver.Command)">
            <summary>
            Finds the first occourence of the the command's StandardCommandEnum value and CommandGroup in the
            non-polling queue and replaces it with the given instance.
            </summary>
            <returns>True if something was modified</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.ModifyNonPollingQueueWithUpdatedCommandGroup(Crestron.RAD.Common.BasicDriver.Command)">
            <summary>
            Finds the first occourence of the the command's CommandGroup value in the
            non-polling queue and replaces it with the given instance.
            </summary>
            <param name="command">CommandGroup of this object is used to find a match in the queue and replace it</param>
            <returns>True if something was modified</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.ModifyNonPollingQueueWithUpdatedSubCommandGroup(Crestron.RAD.Common.BasicDriver.Command)">
            <summary>
            Finds the first occourence of the the command's SubCommandGroup value in the
            non-polling queue and replaces it with the given instance. 
            This allows for sharing commands between command groups with priority.
            </summary>
            <param name="command">CommandGroup of this object is used to find a match in the queue and replace it</param>
            <returns>True if something was modified</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.ModifyNonPollingQueueWithUpdatedCommandGroup(Crestron.RAD.Common.BasicDriver.Command,Crestron.RAD.Common.Enums.CommonCommandGroupType)">
            <summary>
            Finds the first occourence of the the command's CommandGroup value in the
            non-polling queue and replaces it with the given instance. If it can't find that command group,
            it will attempt the alternate command group. 
            This allows for sharing commands between command groups with priority.
            </summary>
            <param name="command">CommandGroup of this object is used to find a match in the queue and replace it</param>
            <param name="alternateTargetGroup">If the CommandGroup of the object cannot be found, this group is used instead</param>
            <returns>True if something was modified</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.SendOrAddNonPollingCommand(Crestron.RAD.Common.BasicDriver.Command)">
            <summary>
            This will send the non-polling command to directly to the transport if the queue is empty,
            TimeBetweenCommands is being honored, and the command is sendable based on business rules.
            
            If it cannot be sent, then this will attempt to queue the command if it is allowed by business rules.
            </summary>
            <param name="command">The command to send/queue</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.FindCommandGroupFromStandardCommand(Crestron.RAD.Common.Enums.StandardCommandsEnum)">
            <summary>
            Resolves the CommonCommandGroupType from a standard command that is a polling command.
            </summary>
            <param name="standardCommand">Polling command</param>
            <returns>Matching command group for that polling command</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.AcknowledgeValidatedFeedback(Crestron.RAD.Common.Enums.CommonCommandGroupType,System.String)">
            <summary>
            This will mark the appropriate command in the queue as having received feedback.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.CanSendCommand(Crestron.RAD.Common.BasicDriver.CommandSet)">
            <summary>
            Method to determine if a command can be sent, bypassing the command queue
            This method should be overridden in the SDK for devices for more specific rules to be applied
            </summary>
            <param name="commandSet">commandSet to evaluate if command can be sent</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.CanQueueCommand(Crestron.RAD.Common.BasicDriver.CommandSet,System.Boolean)">
            <summary>
            Method to determine if a command can be queued
            This method should be overridden in the SDK for devices for more specific rules to be applied
            </summary>
            <param name="commandSet">commandSet to evaluate if command can be queued</param>
            <returns>True if successful</returns>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABasicIrDriver._multiplePowerOffCommands">
            <summary>
            The commands to send when PowerOff() is invoked. 
            If this is empty or null, then the driver will send the POWER_OFF command once
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABasicIrDriver._timeBetweenMultiplePowerOffComamands">
            <summary>
            The time (in ms) to wait in between sending commands during the power off sequence
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.ABasicIrDriver._useMultiplePowerOffSequence">
            <summary>
            Determines if multiple power off commands, as defined by MultiplePowerOffCommands, shoud be sent 
            instead of the POWER_OFF command.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ABasicIrDriver.DriverHandle">
            <summary>
            Provides the driver handle used by the IR file that was loaded.  This allows
            multiple IR drivers to be loaded to the same port object.  The value should
            be passed to methods on the IrTransport that require it.  This is not part of
            the IIrPort so that you can use the same instance of that object for multiple
            instances of ABasicIrDriver derivatives.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicIrDriver.Initialize(Crestron.RAD.Common.Transports.IIrPort)">
            <summary>
            Initialize with port.
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicIrDriver.Initialize(System.String)">
            <summary>
            Initialize with file location.
            </summary>
            <param name="fileLocation"></param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicIrDriver.Initialize(Crestron.RAD.Common.Transports.IIrPort,System.String)">
            <summary>
            Initialize with IR port and file location.
            </summary>
            <param name="port"></param>
            <param name="fileLocation"></param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicIrDriver.SetExtractionDirectory(System.String)">
            <summary>
            Determine the extraction path based on the directory root of path and file name.
            </summary>
            <param name="fullPath"></param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicIrDriver.EndofDelay(System.Object)">
            <summary>
            End of Delay of timer for queueing and allowing commands to send again.
            </summary>
            <param name="userspecific"></param>
        </member>
        <member name="T:Crestron.RAD.Common.BasicDriver.ABasicIrDriver.IrCommand">
            <summary>
            Represent an IR command that should be sent
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicIrDriver.PowerOn">
            <summary>
            Power On Command
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicIrDriver.PowerOff">
            <summary>
            Power Off Command
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicIrDriver.PowerToggle">
            <summary>
            Power Toggle Command
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicIrDriver.IsACommand(System.String)">
            <summary>
            Determine if a particular IR command is available in IR transport
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicIrDriver.TriggerCommand(System.String,Crestron.RAD.Common.Enums.IrActions,System.UInt16)">
            <summary>
            Triggers an IR command. If the action specified is Pulse, then pulse length will be used
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicIrDriver.ValidateIrFile(System.String)">
            <summary>
            This will check if the first four bytes of the specified file adhere to the specifications of a valid IR file
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicIrDriver.RemoveExtractPkgContents">
            <summary>
            Remove the folder where pkg was extracted.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicIrDriver.LogMessage(System.String)">
            <summary>
            Logs formatted messages to the internal custom log.  Checks if RuntimeLogger
            is null and if the RuntimeLogger is enabled for the debug level.  
            If true, will log with the RuntimeLogger at a higher level.
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ABasicIrDriver.LogFeatureNotSupported(System.String)">
            <summary>
            Log messages for no feature support
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Crestron.RAD.Common.BasicDriver.Command">
            <summary>
            Represents a command that can be sent to the device or to the queue. 
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.Command.Id">
            <summary>
            Unique identifier of the object. 
            This Id could be used when a command response is received 
            and the command object needs to be removed from the queue.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.Command.CommandSet">
            <summary>
            CommandSet object to use when sending to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.Command.SupportsFeedback">
            <summary>
            Command supports feedback from the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.Command.Persistent">
            <summary>
            Command is persistent and should not be removed from the queue. 
            This is commonly used for "keep-alive" commands.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.Command.TransmissionTickCount">
            <summary>
            Timestamp when the command was sent to the device. 
            This will be used to determine if the command timeout value has been reached.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.Command.WaitingForFeedback">
            <summary>
            Command is waiting for feedback response. 
            This will be set by the Process Command Queue logic after the command is sent and "SupportsFeedback" is True.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.Command.MarkedForRemoval">
            <summary>
            Indicates this command needs to be removed from the queue.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.Command.IsReplaceableByCommandGroup">
            <summary>
            Finds the first occourence of the the command's StandardCommandEnum value and CommandGroup in the
            non-polling queue and replaces it with the given instance.
            </summary>
            <returns>True if something was modified</returns>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.Command.IsFakeFeedbackCommand">
            <summary>
            Specifies if this command is something that can have associated feedback faked 
            using <see cref="T:Crestron.RAD.Common.BasicDriver.FakeFeedback.FeedbackController"/>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.BasicDriver.CommandSet">
            <summary>
            Represent a command that can be sent to the device. 
            These can be instantiated by the driver and they can call SendCommand 
            to send them to the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.CommandSet.CommandPrepared">
            <summary>
            Specifies if the command is already prepared. 
            If overriding <see cref="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.PrepareStringThenSend(Crestron.RAD.Common.BasicDriver.CommandSet)"/> then this must be checked
            prior to preparing the command. This overriden method can set this to true before calling 
            the base method which will set it to true if it isn't already.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.CommandSet.Command">
            <summary>
            The command string that should be sent to the device.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.CommandSet.CommandSetterError">
            <summary>
            An error message that is set when the setter for <see cref="P:Crestron.RAD.Common.BasicDriver.CommandSet.Command"/> had an exception.
            This will be logged by the command sending logic if it is not null.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.CommandSet.CallBack">
            <summary>
            The Action that will be invoked after the command used to 
            invoke <see cref="P:Crestron.RAD.Common.Transports.ISerialTransport.Send"/> on
            <see cref="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.Transport"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.CommandSet.CommandGroup">
            <summary>
            The command group of this command. 
            This must be set to appropriate group for internal sending and receiving logic
            to function correctly. 
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.CommandSet.SubCommandGroup">
            <summary>
            Primarly used for <see cref="T:Crestron.RAD.Common.Interfaces.IAvrZone"/> 
            and <see cref="T:Crestron.RAD.Common.Interfaces.IAudioVideoExtender"/>, 
            but can be used for cases where the <see cref="P:Crestron.RAD.Common.BasicDriver.CommandSet.CommandGroup"/> doesn't
            provide enough details about the group of commands this command belongs to.
            <para>The queue/sending logic will use this instead of <see cref="P:Crestron.RAD.Common.BasicDriver.CommandSet.CommandGroup"/> when this has a value
            other than <see cref="F:Crestron.RAD.Common.Enums.CommonCommandGroupType.Unknown"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.CommandSet.CommandPriority">
            <summary>
            The priority of the command. The higher the priority, the higher this command
            will be added in the sending queue. 
            <para>Poll commands in most cases set this to Low.</para>
            <para>Power commands in most cases set this to High.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.CommandSet.CommandName">
            <summary>
            A name for the command that is used in logging.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.CommandSet.StandardCommand">
            <summary>
            The standard command this command represents. This is used in the queue/sending logic.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.CommandSet.Parameters">
            <summary>
            Parameters that were set on the command that will be sent to the transport.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.CommandSet.SubCommandGroupIdentifier">
            <summary>
            Used for sending/queueing logic when <see cref="P:Crestron.RAD.Common.BasicDriver.CommandSet.CommandGroup"/> is set to one of the values
            that represent seperate devices such as AVR zones or AudioVideoSwitcher extenders.
            Internal logic assumes that if this is set, then <see cref="P:Crestron.RAD.Common.BasicDriver.CommandSet.SubCommandGroup"/> is set to any value
            other than Unknown.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.CommandSet.AllowIsSendableOverride">
            <summary>
            Avr Zone Field to allow for Sending of zone related commands
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.CommandSet.AllowIsQueueableOverride">
            <summary>
            Avr Zone Field to allow for queuing of zone related commands
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.CommandSet.AllowRemoveCommandOverride">
            <summary>
            Avr Zone Field to allow for removing zone-related commands from the queue
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.BasicDriver.CommandPriority">
            <summary>
            Priority values for the internal sending queue.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.CommandPriority.Special">
            <summary>
            The special priority. This is the highest priority.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.CommandPriority.Highest">
            <summary>
            The highest priority.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.CommandPriority.High">
            <summary>
            The high priority. Typically used for power-related commands.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.CommandPriority.Normal">
            <summary>
            The normal priority. Typically used for most control commands.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.CommandPriority.Low">
            <summary>
            The low priority. 
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.CommandPriority.Lowest">
            <summary>
            The lowest priority. Typically used for poll commands.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.BasicDriver.DriverClock">
            <summary>
            Used for TX and general driver maintenance 
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.DriverClock.Clock25ms">
            <summary>
            Clock rate used when drivers are depending on this class.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.DriverClock.IdleClock5000ms">
            <summary>
            Clock rate to use when there are no drivers loaded.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.DriverClock.Driver25msClock">
            <summary>
            Single CTimer instance to start a new thread.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.DriverClock.Driver25msClockEventHandler">
            <summary>
            Used by listeners to be notified of a clock event so that they can process their clock-based logic.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.DriverClock._programStopping">
            <summary>
            Specifies if the program is stopping. 
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.DriverClock.#cctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.DriverClock.ProgramStatusEventHandler(Crestron.SimplSharp.eProgramStatusEventType)">
            <summary>
            Handles program events. 
            This only monitors the program stopping.
            </summary>
            <param name="programEventType">The new program state.</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.DriverClock.Driver25msClockCallback(System.Object)">
            <summary>
            Callback for the static CTimer instance that will only invoke this once.
            This will sit in a perpetual loop depending on the system state and will exit when the program is stopping.
            <para>No drivers loaded: Waits <see cref="F:Crestron.RAD.Common.BasicDriver.DriverClock.IdleClock5000ms"/> between loops.</para>
            <para>One or more drivers loaded: Waits <see cref="F:Crestron.RAD.Common.BasicDriver.DriverClock.Clock25ms"/> between loops.</para>
            <para>Program is stopping: Exits callback and no more loops execute.</para>
            </summary>
            <param name="notUsed">Not used.</param>
        </member>
        <member name="T:Crestron.RAD.Common.BasicDriver.FakeFeedback.FeedbackController">
            <summary>
            Used by the framework to generate fake-feedback for discrete commands that support feedback.
            This is used by device-types that use the StateChanged event to describe all possible changes with an enum.
            This will use the driver's static clock when feedback is being faked. 
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.FakeFeedback.FeedbackController.DurationOfFakeFeedback">
            <summary>
            The duration that feedback will be faked in milliseconds
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.FakeFeedback.FeedbackController._currentFakedStates">
            <summary>
            Dictionary keyed by the device-type state object, where display would be DisplayStateObjects
            with a value indicating the tick that it started to be faked.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.FakeFeedback.FeedbackController._globalLock">
            <summary>
            This can be called on multiple threads, so process one request at a time
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.FakeFeedback.FeedbackController._lastExpiredStateRemoval">
            <summary>
            The last tick this iterated through the state collection
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.FakeFeedback.FeedbackController._removeExpiredStatesInterval">
            <summary>
            The minimum amount of ticks before iterating through the state collection to look for expired states
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.FakeFeedback.FeedbackController._clockTicks">
            <summary>
            Counter that is increased whenever the clock ticks
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.FakeFeedback.FeedbackController._oneSecondInClockTicks">
            <summary>
            Clock is 25ms.
            To get 1 second: 1000ms/25ms = 40 ticks
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.FakeFeedback.FeedbackController._logger">
            <summary>
            Used for logging
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.FakeFeedback.FeedbackController.#ctor(System.UInt16,Crestron.RAD.Common.Logging.Logger)">
            <summary>
            There may only be one feedback generater per driver. 
            This must be disposed before creating a new one for the same driver.
            </summary>
            <param name="durationOfFakeFeedback">How long to fake feedback for all commands</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Crestron.RAD.Common.BasicDriver.FakeFeedback.FeedbackController.#ctor(Crestron.RAD.Common.Logging.Logger)" -->
        <member name="M:Crestron.RAD.Common.BasicDriver.FakeFeedback.FeedbackController.RemoveExpiredStateChanges">
            <summary>
            Cycles through the collection of currently faked states and removes any that have expired.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.FakeFeedback.FeedbackController.On25msPassed">
            <summary>
            This will remove any expired state changes if they havn't already occoured recently.
            This should be called once per clock cycle
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.FakeFeedback.FeedbackController.SetFeedback(System.Object)">
            <summary>
            Invoked when feedback should start being faked.
            </summary>
            <param name="stateObject">Device-type specific object representing the changed state</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.FakeFeedback.FeedbackController.CanSendStateChange(System.Object)">
            <summary>
            Determines if the given state object can invoke a state change event to applications.
            </summary>
            <param name="stateObject">The change that should be reported to an application</param>
            <returns>True if there is no fake feedback being shown currently</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.FakeFeedback.FeedbackController.FeedbackMatchedWithExpectedState(System.Object)">
            <summary>
            Invoked when the event from the protocol class resulted in the feedback matching the faked state.
            </summary>
            <param name="stateObject">Device-type specific object representing the changed state</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.FakeFeedback.FeedbackController.StartListeningToDriverClock">
            <summary>
            Starts listening to the driver's static clock. 
            This object should only listen to events when there is fake feedback being shown.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.FakeFeedback.FeedbackController.StopListeningToDriverClock">
            <summary>
            Stops listening to the driver's static clock.
            This object should stop listening when there is no feedback being faked.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.FakeFeedback.FeedbackController.Dispose">
            <summary>
            Unsuscribes from driver clock
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.BasicDriver.InterfaceLookup`1">
            <summary>
            Dictionary-based implementation of IInterfaceLookup
            Recursively adds base implementations to the dictionary, optimizing for lookup
            speed instead of dictionary size.
            </summary>
            <typeparam name="TBaseInterface">The base interface types which entries must derive from. Use object if you want to use all interfaces.</typeparam>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.InterfaceLookup`1._implementations">
            <summary>
            Dictionary that holds the interface implementations
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.InterfaceLookup`1.#ctor">
            <summary>
            Initializes the underlying dictionary for the lookup
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.InterfaceLookup`1.RegisterInterface(System.Type,System.Object)">
            <summary>
            Recursively registers an implementation of an interface to be looked up later via
            <see cref="M:Crestron.RAD.Common.BasicDriver.InterfaceLookup`1.TryGetInterface(System.Type)"/>. If the type passed is not an interface, the type
            itself is not added but the interfaces it implements are.
            Overwrites any previously registered interfaces of this type or base interfaces.
            </summary>
            <param name="t">The interface type to register for</param>
            <param name="implementation">The object which provides the interface</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.InterfaceLookup`1.TryGetInterface(System.Type)">
            <summary>
            Get a previously registered object which implements T, or null if none is found.
            </summary>
            <param name="t">The interface type to retrieve an implementation of</param>
            <returns>An object implementing T, or null if none was found</returns>
        </member>
        <member name="T:Crestron.RAD.Common.BasicDriver.Ramping.ARampingTimer">
            <summary>
            Used internally for specific-use ramping methods
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.Ramping.ARampingTimer._rampingDueTime">
            <summary>
            Used to keep track of how many times the timer has rolled over since
            this will ramp at a variable speed, increasing the speed the longer the timer is active.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.Ramping.ARampingTimer._finalRampingRate">
            <summary>
            The final ramping rate to be used after stepping through slower rates.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.Ramping.ARampingTimer.RampingRate">
            <summary>
            This will initially be set to either 250ms if TimeBetweenCommandsOverride is null
            or it will be set to TimeBetweenCommandsOverride but will be clamped to 100ms.
            This value will change the longer the ramp lasts.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.Ramping.ARampingTimer.IsRamping">
            <summary>
            Specifies the current ramping state.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.Ramping.ARampingTimer.Logger">
            <summary>
            Used for logging
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.Ramping.ARampingTimer.Ramping">
            <summary>
            Used to let the main framework know if the timer is ramping, but doesn't let them set the state
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.Ramping.ARampingTimer.#ctor(System.Int32,Crestron.RAD.Common.Logging.Logger)">
            <summary>
            Constructor
            </summary>
            <param name="rampingRate">Final ramping rate to use. This value will be used
            after <see cref="M:Crestron.RAD.Common.BasicDriver.Ramping.ARampingTimer.PerformActionOnDevice"/> has been invoked at least two times.</param>
            <param name="logger">Used for logging</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.Ramping.ARampingTimer.Start">
            <summary>
            Invokes PerformActionOnDevice then starts the ramping process 
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.Ramping.ARampingTimer.Stop">
            <summary>
            Stops the timer without invoking the callback
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.Ramping.ARampingTimer.Dispose">
            <summary>
            Implementation of IDisposeable
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.Ramping.ARampingTimer.RampTick(System.Object)">
            <summary>
            The callback invoke by the CTimer instance
            </summary>
            <param name="notUsed">Not used</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.Ramping.ARampingTimer.PerformActionOnDevice">
            <summary>
            The action that needs to be performed on the device when the ramping timer has invoked the callback
            or when the timer is initially started, the action will be performed immediatly and then the timer will start
            with a due time of RampingRate.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.BasicDriver.Ramping.ARampingTimer.RampingDueTime">
            <summary>
            The ramping timers due times based on how many times the timer rolled over.
            Any tick after the fourth will be set to the initial ramping rate.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.Ramping.ARampingTimer.RampingDueTime.FirstTick">
            <summary>
            Represents the first time the timer callback was invoked
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.Ramping.ARampingTimer.RampingDueTime.SecondTick">
            <summary>
            Represents the second time the timer callback was invoked
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.Ramping.ARampingTimer.RampingDueTime.NTick">
            <summary>
            Represents all other times the callback is invoked
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.BasicDriver.Ramping.DirectionalRampingTimer`1">
            <summary>
            Used for ramping when we have one method to invoke with a paramter for the direction
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.BasicDriver.Ramping.SingleMethodRampingTimer">
            <summary>
            Used for ramping when we have one method that needs to be invoke at the ramping interval
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.CrestronSerialDeviceApi.Dependencies">
            <summary>
            A list of dll file names that this class depends on. These dlls must be included in the pkg.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.Api.SupportsConfigurationUpdate">
            <summary>
            Indicates if the driver is able to detect configuration changes on the device.
            <para>
            This will be null if the feature is not applicable to a device.
            This will be true if the driver is able to detect configuration changes and will report the changes
            This will be false if the driver not able to detect configuration changes, and <see cref="!:Reconnect"/>
            must be called to get the new configuration.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.Api.Feedback">
            <summary>
            See <see cref="P:Crestron.RAD.Common.BasicDriver.Api.Feedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.Api.MediaServiceProviders">
            <summary>
            Do not reference this in driver.
            This is for device-type libraries only.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.BasicDriver.Feedback">
            <summary>
            Represents basic feedback information applicable to all drivers.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.Feedback.CommandAckNak">
            <summary>
            See <see cref="P:Crestron.RAD.Common.BasicDriver.Feedback.CommandAckNak"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.Feedback.Header">
            <summary>
            The header that is common to all responses received from the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.Feedback.MinimumResponseTime">
            <summary>
            The minimum amount of time in ms an application would need to wait before expecting
            the driver to report true feedback after an operation.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.Feedback.MaximumResponseTime">
            <summary>
            The maximum amount of time in ms an application would need to wait before expecting
            the driver to report true feedback after an operation.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.Feedback.SupportsUnsolicitedFeedback">
            <summary>
            Lets a driver define if the API supports providing updates without polling.
            If this is enabled, then the driver's polling sequence will only be sent until each 
            individual poll command receives a response. The driver will poll again like this
            if the connection state goes from false to true.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.Feedback.ConnectedStatePollCommand">
            <summary>
            The command a driver should send using the polling interval to illicit a response
            from the device. This can be any command that causes no operation to be performed on the device
            such as a power poll. This must be used if the driver does not use an ethernet transport to keep
            track of disconnects. 
            <para>This is only used when <see cref="P:Crestron.RAD.Common.BasicDriver.Feedback.SupportsUnsolicitedFeedback"/> is set to true.</para>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.BasicDriver.ScalingInformation">
            <summary>
            Represents scaling information for features such as volume or bass levels.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ScalingInformation.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ScalingInformation.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="minLevel"><see cref="P:Crestron.RAD.Common.BasicDriver.ScalingInformation.MinimumDeviceLevel"/></param>
            <param name="maxLevel"><see cref="P:Crestron.RAD.Common.BasicDriver.ScalingInformation.MaximumDeviceLevel"/></param>
            <param name="stepSize"><see cref="P:Crestron.RAD.Common.BasicDriver.ScalingInformation.DeviceStepSize"/></param>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ScalingInformation.MaximumDeviceLevel">
            <summary>
            Specifies the maximum level the device will report.
            This is used for internal scaling logic.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ScalingInformation.MinimumDeviceLevel">
            <summary>
            Specifies the minimum level the device will report.
            This is used for internal scaling logic.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ScalingInformation.DeviceStepSize">
            <summary>
            Specifies the step size of one volume step in either direction.
            This is used for internal scaling logic.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.BasicDriver.SimplDriver`1._maxUserAttributesSupported">
            <summary>
            This value should match the number of attributes that are supported by the SIMPL module
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.BasicDriver.SimplDriver`1.TransportType">
            <summary>
            Transport types (interface names) that are supported in SIMPL Windows.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.SimplDriver`1.GenerateIRCloudConfiguration(Crestron.RAD.Common.CloudReporting.DeviceTopLevel,System.String)">
            <summary>
            Used by device-type wrappers to populate the DeviceTopLevel object with information about the loaded IR file.
            </summary>
            <param name="configuration">Configuration object.</param>
            <returns>True if the configuration object was altered.</returns>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.SimplDriver`1.DeviceReportingCallback(System.Object,Crestron.RAD.Common.CloudReporting.DeviceTopLevel)">
            <summary>
            Callback from the cloud informaing the driver to perform a change to the system, such as powering on the device
            or changing the warmup time.
            </summary>
            <param name="userObject">Not used.</param>
            <param name="deviceUpdateObject">The requested update from the cloud.</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.SimplDriver`1.ProgramStatusEventHandler(Crestron.SimplSharp.eProgramStatusEventType)">
            <summary>
            Handles program events. 
            This only monitors the program stopping.
            </summary>
            <param name="programEventType">The new program state.</param>
        </member>
        <member name="T:Crestron.RAD.Common.BasicDriver.TimedEventHelper">
            <summary>
            Helper to avoid using CTimers
            This should not be referenced by any drivers
            Timing resolution is 100ms
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.TimedEventHelper.ExecuteEventHandler">
            <summary>
            The event handler that will be used to notify listenerws the timed event has happened
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.BasicDriver.ValidatedRxData">
            <summary>
            Represents data from the device that has been/is being resolved.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.ValidatedRxData.#ctor(System.Boolean,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ready">Allows setting of <see cref="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.Ready"/>.</param>
            <param name="data">Allows setting of <see cref="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.Data"/>.</param>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.Ready">
            <summary>
            Returns true if this can be parsed and a DeConstruct method 
            can be called with <see cref="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.Data"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.Ignore">
            <summary>
            Returns true if this data should be ignored and the RX buffer should be cleared.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.Data">
            <summary>
            The response from the device that will be parsed internally and/or in the driver.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.CustomCommandGroup">
            <summary>
            A custom command group driver developers can assign to and use for custom features.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.CommandGroup">
            <summary>
            The command group this response belongs to. This is used to determine which DeConstruct
            method is called as well as updating polling commands with their last successful response time.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.SubCommandGroup">
            <summary>
            If <see cref="T:Crestron.RAD.Common.BasicDriver.CommandSet"/> is setting <see cref="P:Crestron.RAD.Common.BasicDriver.CommandSet.SubCommandGroupIdentifier"/> to anything
            other than null/empty, then this will be used in all queue/sending logic instead of <see cref="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.CommandGroup"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.SubCommandGroupIdentifier">
            <summary>
            An identifier for <see cref="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.SubCommandGroup"/> for queue/sending logic. 
            Whenever the command group is used in the queue/send logic, it will attempt to match
            <see cref="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.CommandGroup"/> to a polling <see cref="P:Crestron.RAD.Common.BasicDriver.CommandSet.CommandGroup"/>,
            <see cref="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.SubCommandGroup"/> to <see cref="P:Crestron.RAD.Common.BasicDriver.CommandSet.SubCommandGroup"/>, and
            <see cref="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.SubCommandGroupIdentifier"/> to <see cref="P:Crestron.RAD.Common.BasicDriver.CommandSet.SubCommandGroupIdentifier"/>.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.BasicDriver.Tcp2Capability">
            <summary>
            Implementation of ITcp2 that can be used by drivers to add support for both hostnames and IP addresses
            if the driver is implementing ITcp.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.BasicDriver.Tcp2Capability.InitializeDriver">
            <summary>
            Represents a method that the driver defines that will setup a transport connection with the specified
            address and port.
            </summary>
            <param name="deviceAddress">The IP address or hostname of the device.</param>
            <param name="port">The port used to connect to the device.</param>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.Tcp2Capability.#ctor(Crestron.RAD.Common.BasicDriver.Tcp2Capability.InitializeDriver)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.BasicDriver.Tcp2Capability.Initialize(System.String,System.Int32)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.ITcp2.Initialize(System.String,System.Int32)"/>.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.DeviceSupportConverter">
            <summary>
            Handles the DeviceSupport node of the driver's embeddeded JSON-formatted file.
            This will attempt to parse the key as <see cref="T:Crestron.RAD.Common.Enums.CommonFeatureSupport"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Crestron.RAD.Common.DeviceSupportConverter.CanConvert(System.Type)" -->
        <member name="M:Crestron.RAD.Common.DeviceSupportConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Handles parsing the dictionary key within a try/catch to allow a driver to function
            when invalid <see cref="T:Crestron.RAD.Common.Enums.CommonFeatureSupport"/> values are specified.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.DeviceSupportConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Not implemented, drivers do not generate JSON.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.ContractResolvers.IgnoreTypeContractResolver">
            <summary>
            Contract resolver that will filter the output of <see cref="M:Crestron.RAD.Common.ContractResolvers.IgnoreTypeContractResolver.GetSerializableMembers(System.Type)"/> based on a list
            of Types to ignore.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.ContractResolvers.IgnoreTypeContractResolver.IgnoreType(System.String,System.Type)">
            <summary>
            Adds a Type to ignore when getting serializable members.
            Each type is associated with one unique name.
            </summary>
            <param name="type">Declaring type to ignore that has the specified name.</param>
            <param name="name">Name to ignore.</param>
        </member>
        <member name="M:Crestron.RAD.Common.ContractResolvers.IgnoreTypeContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Removes all instances of MemberInfo where the declaring type was added using <see cref="M:Crestron.RAD.Common.ContractResolvers.IgnoreTypeContractResolver.IgnoreType(System.String,System.Type)"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.CloudReporting.CloudReporter.Driver">
            <summary>
            The main driver class that can be cast to component interfaces
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.CloudReporting.CloudReporter.Logger">
            <summary>
            Used for logging
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.CloudReporting.CloudReporter._deviceType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.CloudReporting.CloudReporter._data">
            <summary>
            The data we will be sending to the cloud
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.CloudReporting.CloudReporter._cloudInterface">
            <summary>
            Our interface with the cloud
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.CloudReporting.CloudReporter.MinimumUniqueIdCharacters">
            <summary>
            Unique ID constraint - the minimum number of characters the unique ID can be
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.CloudReporting.CloudReporter.MaximumUniqueIdCharacters">
            <summary>
            Unique ID constraint - the maximum number of characters the unique ID can be
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.CloudReporting.CloudReporter._category">
            <summary>
            Specific setting for the category a device is reported as.
            This will always be CCD for drivers
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.CloudReporting.CloudReporter._startTime">
            <summary>
            Specifies the time this driver was instantiated.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.CloudReporting.CloudReporter.OnIsRegisteredWithCloudChanged(System.Boolean,System.String)">
            <summary>
            Invoked by this class when there is a change in the registration status.
            ABasicDriver listens to this event and forwards it to applications.
            The registration error must be user friendly if there is one. It should be null if registration was successfull.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.CloudReporting.CloudReporter.DeviceReportingCallback(System.Object,Crestron.RAD.Common.CloudReporting.DeviceTopLevel)">
            <summary>
            Invoked by the shim layer when the cloud wants us to do something.
            CloudReportingData has nullable types, so which ever one is not null is what needs to change on the device
            userObject is an instance of this class
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.CloudReporting.CloudReporter.ProgramStatusEventHandler(Crestron.SimplSharp.eProgramStatusEventType)">
            <summary>
            Handles program events. 
            This only monitors the program stopping.
            </summary>
            <param name="programEventType">The new program state.</param>
        </member>
        <member name="M:Crestron.RAD.Common.CloudReporting.CloudReporter.SendAllStates">
            <summary>
            Populates all information about the driver in the cloud objects 
            and sends them as an update to the SimplSharpDeviceReporting
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.CloudReporting.CloudReporter.RegisterForStateChangeEvents">
            <summary>
            Depending on the driver's device type, this will register for the state change event
            so that this object can report any feedback changes to SimplSharpDeviceReporting
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.CloudReporting.CloudReporter.Start(System.String)">
            <summary>
            Validates the unique ID, instantiates an instance of SimplSharpDeviceReporting,
            and sends all the current states.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.CloudReporting.CloudReporter.Stop">
            <summary>
            Unregisteres from the driver's state change event and attempts to dispose SimplSharpDeviceReporting
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.CloudReporting.CloudReporter.Dispose">
            <summary>
            Implementation of IDisposable.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.CloudReporting.CloudDictionaryHelper`2._makeCloudObject">
            <summary>
            Method implementing by consumer to make the object that will be reported to the cloud.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.CloudReporting.CloudDictionaryHelper`2._clearCloudObject">
            <summary>
            Method implementing by consumer to clear an object to signal a deletion to the cloud.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.CloudReporting.CloudDictionaryHelper`2._entryLock">
            <summary>
            Lock used for all operations
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.CloudReporting.CloudDictionaryHelper`2._driverEntries">
            <summary>
            The entries provided by the driver using the driver specified key.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.CloudReporting.CloudDictionaryHelper`2._cloudEntries">
            <summary>
            The entries that will be reported to the cloud.
            The key will be changed to <see cref="P:Crestron.RAD.Common.CloudReporting.CloudDictionaryHelper`2.CloudKey.ReportingKey"/>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.CloudReporting.CloudDictionaryHelper`2._driverToCloudMapping">
            <summary>
            The mapping between the driver's key and the cloud key.
            This dictionary is Driver Key to Cloud Key
            Example: Driver uses key "serverLicense" and the cloud is expecting "LicenseNNN" where NNN
            is a number that is padded to the left with zeros, such as 005.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.CloudReporting.CloudDictionaryHelper`2._cloudKeyPrefix">
            <summary>
            A prefix added to the cloud key. This is determined by the consumer depending on the cresnext object.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.CloudReporting.CloudDictionaryHelper`2.GetNextAvailableCloudKey">
            <summary>
            Generates the next available <see cref="T:Crestron.RAD.Common.CloudReporting.CloudDictionaryHelper`2.CloudKey"/>.
            Not thread-safe.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.CloudReporting.CloudDictionaryHelper`2.CloudKey">
            <summary>
            Used internally to represent the key used in the dictionary reported to the cloud.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.CloudReporting.LampInformation">
            <summary>
            Lamp Object
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.LampInformation.Hours">
            <summary>
            Indicates the number of hours the Lamp has been on
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.LampInformation.IsLampErrorDetected">
            <summary>
            Indicates of there is an Error reported for the Lamp
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.LampInformation.IsLampMaxHoursExceeded">
            <summary>
            Indicates if the lamp usage has exceeded the maximum hours  for the lamp
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.LampInformation.IsLampWarningActive">
            <summary>
            Indicates if the lamp usage is approaching the maximum hours  for the lamp
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.CloudReporting.Consumables">
            <summary>
            Object containing Power information about Consumable items in a device such as the Lamp.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.Consumables.Lamp">
            <summary>
            Object containing the properties for the Lamp(s)
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.Consumables.Version">
            <summary>
            Object Version
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.CloudReporting.Lamp">
            <summary>
            Object containing the properties for the Lamp(s)
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.Lamp.IsLampHourStatusSupported">
            <summary>
            Indicates if Lamp status is supported
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.Lamp.Lamps">
            <summary>
            Dictionary of all the Lamps on the Device.  The Key is defined as LampX where X is the Lamp number
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.CloudReporting.BasicDriverInformation">
            <summary>
            Object containing Basic information about the driver.  
            Most of this object is based off of the IBasicInformation 
            Interface found here: https://sdkcon78221.crestron.com/sdk/Crestron_Certified_Drivers_SDK/Content/SIMPL-SHARP-PRO/API-Ref-Libraries/Comp-Interfaces.htm
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.BasicDriverInformation.Description">
            <summary>
            This property is the description of the device and is called  Description  in IBasicInformation
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.BasicDriverInformation.DriverVersionDate">
            <summary>
            This property is the version DateTime of the driver and is called VersionDate   in IBasicInformation
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.BasicDriverInformation.DriverModel">
            <summary>
            This property is the model of the driver and is called BaseModel  in IBasicInformation
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.BasicDriverInformation.LastStartedTime">
            <summary>
            Indicates the last time that this Driver's constructor was called.  Format is RFC 3339
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.BasicDriverInformation.Version">
            <summary>
            Object Version
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.CloudReporting.Communication">
            <summary>
            Object containing Communication information about the driver.  
            The properties can be found in the interfaces defined here: https://sdkcon78221.crestron.com/sdk/Crestron_Certified_Drivers_SDK/Content/SIMPL-SHARP-PRO/API-Ref-Libraries/Comp-Interfaces.htm
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.Communication.IsConnected">
            <summary>
            This property indicates if the Driver is Connected to Device.  (This is currently in the IConnection interface)
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.Communication.IsFeedbackSupported">
            <summary>
            This property is indicates if the Device supports feedback.  (This is currently in the IBasicInformation interface)
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.Communication.CommunicationType">
            <summary>
            Indicates the communication protocol to the Device.  Options include: "Ethernet", "Serial", Ir", "Cec" 
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.Communication.Version">
            <summary>
            Object Version
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.CloudReporting.DeviceInfo">
            <summary>
            DeviceInfo Top level object
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.CloudReporting.DeviceInfo.MaxNameCharacters">
            <summary>
            The maximum number of characters allowed in <see cref="P:Crestron.RAD.Common.CloudReporting.DeviceInfo.Name"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.DeviceInfo.Category">
            <summary>
            Indicates the category of the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.DeviceInfo.Manufacturer">
            <summary>
            Indicates the manufacturer of the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.DeviceInfo.Model">
            <summary>
            Indicates the model of the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.DeviceInfo.Name">
            <summary>
            User settable custom name for the device.  The default value will be the HostName of the device.
            For CCD, this will be set to the unique ID trimmed to <see cref="F:Crestron.RAD.Common.CloudReporting.DeviceInfo.MaxNameCharacters"/>.
            For CCD sub devices, this will the name from device using <see cref="P:Crestron.DeviceDrivers.API.Capabilities.IDeviceName.Name"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.DeviceInfo.SerialNumber">
            <summary>
            Indicates the SerialNumber of the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.DeviceInfo.Version">
            <summary>
            Object Version
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.CloudReporting.DeviceInfo.ModelType">
            <summary>
            Valid model types which represent the device types.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.CloudReporting.ParentInfo">
            <summary>
            Object containing information about the parent device this driver resides in.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.ParentInfo.ProgramLocation">
            <summary>
            Indicates what program/Room the Crestron Certified Driver (CCD) is running in
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.ParentInfo.Version">
            <summary>
            Object Version
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Crestron.RAD.Common.CloudReporting.Volume" -->
        <member name="P:Crestron.RAD.Common.CloudReporting.Volume.VolumeLevelPercent">
            <summary>
            Indicates the current Volume as a percentage.  For devices that support Volume Control (IsVolumeControlSupported = true), this property can also be used to set the volume level
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.Volume.IsVolumeFeedbackSupported">
            <summary>
            This property indicates if the device supports Volume Feedback
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.Volume.IsVolumeControlSupported">
            <summary>
            This property Indicates if the Volume can be controlled
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.Volume.IsMuted">
            <summary>
            Indicates the current Mute status.  
            For devices that support Mute Control (IsDiscreteMuteSupported = true), this property can also be used to set the Mute state
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.Volume.IsMuteFeedbackSupported">
            <summary>
            This property indicates if the device supports Mute Feedback
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.Volume.IsDiscreteMuteSupported">
            <summary>
            This property indicates if Discrete Mute is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.Volume.Version">
            <summary>
            Object Version
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.CloudReporting.VideoDisplayInputSelection">
            <summary>
            Object containing Input Selection properties for the driver.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.VideoDisplayInputSelection.SelectedInput">
            <summary>
            Specifies the currently selected Input on the device.  For devices that support Input Selection  (IsInputSelectionSupported = true), this property can also be used to select an Input.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.VideoDisplayInputSelection.SupportedInputs">
            <summary>
            Dictionary containing all the supported Inputs on the device.  Keys are specified using the Input number: X
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.VideoDisplayInputSelection.IsFeedbackSupported">
            <summary>
            This property indicates if the device supports Input Feedback
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.VideoDisplayInputSelection.IsInputSelectionSupported">
            <summary>
            This property indicates if the Input can be selected
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.VideoDisplayInputSelection.IsInputNameEditingSupported">
            <summary>
            This property indicates if the Name field in the Input Object can be set
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.VideoDisplayInputSelection.Version">
            <summary>
            Object Version
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.CloudReporting.VideoDisplayInput">
            <summary>
            Input Object where X is the numeric Input number
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.VideoDisplayInput.Name">
            <summary>
            Name of the Input.  For devices that support editing (IsInputNameEditingSupported = true), this property can also be used to set the Name of the input.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.VideoDisplayInput.Type">
            <summary>
            Type of Input.  Options include "Hdmi", "Vga", "Dvi", "DisplayPort", "Network", "Unknown"
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.CloudReporting.Power">
            <summary>
            Object containing Power information about the driver.
            Most of this object is based off of the Ipower Interface found here: https://sdkcon78221.crestron.com/sdk/Crestron_Certified_Drivers_SDK/Content/SIMPL-SHARP-PRO/API-Ref-Libraries/Comp-Interfaces.htm
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.Power.IsPowerFeedbackSupported">
            <summary>
            This property indicates if Power Feedback is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.Power.IsDiscretePowerSupported">
            <summary>
            This property indicates if Discrete Power is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.Power.IsPowerToggleSupported">
            <summary>
            This property indicates if Power Toggle is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.Power.IsOn">
            <summary>
            Represents the Power State of the device.
            This is only supported for devices that support PowerFeedback (IsPowerFeedbackSupported = true).
            For devices that also  support DiscretePower (IsDiscretePowerSupported = true), this property can also  be used to  control the Power State of the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.Power.Version">
            <summary>
            Object Version
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.CloudReporting.WarmUp">
            <summary>
            Object containing the WarmingUp properties
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.CloudReporting.WarmUp.MaxTimeInSeconds">
            <summary>
            Maximum time in seconds that <see cref="P:Crestron.RAD.Common.CloudReporting.WarmUp.TimeInSeconds"/> could be set to.
            This is only used when ignoring the cloud telling the driver to change the time.
            Drivers may still report a value higher than this value if it was not set by the cloud.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.WarmUp.IsStatusSupported">
            <summary>
            This property indicates if WarmingUp Feedback is supported 
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.WarmUp.IsTimeAdjustable">
            <summary>
            This property indicates if  the WarmUp Time is Adjustable
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.WarmUp.IsWarmingUp">
            <summary>
            This property indicates if  the device is currently WarmingUp
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.WarmUp.TimeInSeconds">
            <summary>
            Indicates the WarmUp Time of the device.  If "IsTimeAdjustable" = true, this value can also be set externally
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.WarmUp.TimeInSecondsMinimum">
            <summary>
            Indicates the Minimum required WarmUp Time
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.CloudReporting.CoolDown">
            <summary>
            Object containing the CoolingDown properties
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.CloudReporting.CoolDown.MaxTimeInSeconds">
            <summary>
            Maximum time in seconds that <see cref="P:Crestron.RAD.Common.CloudReporting.CoolDown.TimeInSeconds"/> could be set to.
            This is only used when ignoring the cloud telling the driver to change the time.
            Drivers may still report a value higher than this value if it was not set by the cloud.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.CoolDown.IsStatusSupported">
            <summary>
            This property indicates if CoolingDown Feedback is supported
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.CoolDown.IsTimeAdjustable">
            <summary>
            This property indicates if  the WarmUp Time is Adjustable
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.CoolDown.IsCoolingDown">
            <summary>
            This property indicates if  the device is currently CoolingDown
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.CoolDown.TimeInSeconds">
            <summary>
            Indicates the CoolDown Time of the device.  If "IsTimeAdjustable" = true, this value can also be set externally
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.CoolDown.TimeInSecondsMinimum">
            <summary>
            Indicates the Minimum required CoolDown Time
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.CloudReporting.PowerWarmUpCoolDown">
            <summary>
            Object containing Warm up / Cool Down  information about the driver. 
            Most of this object is based off of the IPower Interface found here: https://sdkcon78221.crestron.com/sdk/Crestron_Certified_Drivers_SDK/Content/SIMPL-SHARP-PRO/API-Ref-Libraries/Comp-Interfaces.htm
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.PowerWarmUpCoolDown.WarmUp">
            <summary>
            Object containing the WarmingUp properties
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.PowerWarmUpCoolDown.CoolDown">
            <summary>
            Object containing the CoolingDown properties
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.PowerWarmUpCoolDown.Version">
            <summary>
            Object Version
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.CloudReporting.SystemVersions">
            <summary>
            This Object is used to represent the version information for all components on the device.  
            The number of Components and SubComponents will vary based on the particular device.  This review does not contain any new properties.  It is being sent out as a baseline review as part of the initiative to get all the CresNext Objects represented within the CreNext Objects Spec. 
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.SystemVersions.Components">
            <summary>
            Collection of system components on the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.CloudReporting.SystemVersions.Version">
            <summary>
            Object Version
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.CloudReporting.ReportingData">
            <summary>
            All information a driver would report to the cloud
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.CloudReporting.DeviceTopLevel">
            <summary>
            Top-most level of the reporting data.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Events.CloudRegistrationEventArgs">
            <summary>
            Argument for cloud registration events
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Events.CloudRegistrationEventArgs.#ctor(System.Boolean,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="isRegisteredWithCloud">True if registered with the cloud.</param>
            <param name="registrationError">User friendly string defining the error.</param>
        </member>
        <member name="P:Crestron.RAD.Common.Events.CloudRegistrationEventArgs.IsRegisteredWithCloud">
            <summary>
            Specifies if the driver was able to be registered with the cloud
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Events.CloudRegistrationEventArgs.RegistrationError">
            <summary>
            Specifies any user-friendly error that occoured while communicating/registering with the cloud.
            This will be null if registration was successful
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Events.PropertyValuesEventArgs">
            <summary>
            Event args containing all of the property values that have changed since the last event.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Events.PropertyValuesEventArgs.#ctor(System.Collections.Generic.IEnumerable{Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue})">
            <summary>
            Create a new property values changed event args.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Events.PropertyValuesEventArgs.PropertyValues">
            <summary>
            Contains all of the property values that have changed.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Events.AuthenticationEventArgs">
            <summary>
            Argument for authentication events
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Events.AuthenticationEventArgs.IsAuthenticated">
            <summary>
            The new authenticated state of the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Events.AuthenticationEventArgs.AuthenticationError">
            <summary>
            The error reported by the device explaining why authentication failed
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Events.DevicePresetStateEventArgs">
            <summary>
            Argument for events that refer to device preset's state,
            such as <see cref="!:IDevicePreset.IsActive"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Events.DevicePresetStateEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs the event arguments with all the required parameters.
            Pass null for each each state that did not change.
            </summary>
            <param name="id">See <see cref="P:Crestron.RAD.Common.Events.DevicePresetStateEventArgs.Id"/></param>
            <param name="supportsIsActive">See <see cref="!:SupportsIsActive"/> </param>
            <param name="isActive">See <see cref="P:Crestron.RAD.Common.Events.DevicePresetStateEventArgs.IsActive"/></param>
        </member>
        <member name="P:Crestron.RAD.Common.Events.DevicePresetStateEventArgs.Id">
            <summary>
            ID of the preset whose state changed; See <see cref="!:IDevicePreset.Id"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Events.DevicePresetStateEventArgs.IsActive">
            <summary>
            New value of <see cref="!:IDevicePreset.IsActive"/>;
            Null if it did not change.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Events.DevicePropertyValueEventArgs.Key">
            <summary>
            Key of property; See <see cref="!:IDeviceProperty.Key"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Events.DevicePropertyValueEventArgs.GetValue``1">
            <summary>
            Retrieves the new value of the property referred to by <see cref="P:Crestron.RAD.Common.Events.DevicePropertyValueEventArgs.Key"/>.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Events.DevicePropertyStateEventArgs">
            <summary>
            Argument for events that refer to device property and its (non-value) states,
            such as <see cref="!:IDeviceProperty.IsEnabled"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Events.DevicePropertyStateEventArgs.#ctor(System.String,Crestron.RAD.Common.Enums.DevicePropertyStates)">
            <summary>
            Constructs these arguments with all the required values.
            </summary>
            <param name="key">Key of the <see cref="!:IDeviceProperty"/> whose state changed.</param>
            <param name="isEnabled">New value of the <see cref="!:IDeviceProperty.State"/> flag.</param>
        </member>
        <member name="P:Crestron.RAD.Common.Events.DevicePropertyStateEventArgs.Key">
            <summary>
            Key of property; See <see cref="!:IDeviceProperty.Key"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Events.DevicePropertyStateEventArgs.State">
            <summary>
            New value of <see cref="!:IDeviceProperty.IsEnabled"/> state;
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Events.DeviceSceneStateEventArgs">
            <summary>
            Argument for events that refer to device scene's state,
            such as <see cref="!:IDeviceScene.IsActive"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Events.DeviceSceneStateEventArgs.#ctor(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Constructs the event arguments with all the required parameters.
            Pass null for each each state that did not change.
            </summary>
            <param name="id">See <see cref="P:Crestron.RAD.Common.Events.DeviceSceneStateEventArgs.Id"/></param>
            <param name="supportsIsActive">See <see cref="P:Crestron.RAD.Common.Events.DeviceSceneStateEventArgs.SupportsIsActive"/> </param>
            <param name="isActive">See <see cref="P:Crestron.RAD.Common.Events.DeviceSceneStateEventArgs.IsActive"/></param>
        </member>
        <member name="P:Crestron.RAD.Common.Events.DeviceSceneStateEventArgs.Id">
            <summary>
            ID of the scene whose state changed; See <see cref="!:IDeviceScene.Id"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Events.DeviceSceneStateEventArgs.SupportsIsActive">
            <summary>
            New value of <see cref="!:IDeviceScene.SupportsIsActive"/>;
            Null if it did not change.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Events.DeviceSceneStateEventArgs.IsActive">
            <summary>
            New value of <see cref="!:IDeviceScene.IsActive"/>;
            Null if it did not change.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Events.ListChangedEventArgs`1">
            <summary>
            Arguments for events that refer to a list changing.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Events.ListChangedEventArgs`1.ChangedAction">
            <summary>
            The action that caused this event.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Events.ListChangedEventArgs`1.OldItem">
            <summary>
            Item that was removed or replaced.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Events.ListChangedEventArgs`1.NewItem">
            <summary>
            Item that was added.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Events.ListChangedEventArgs`1.Index">
            <summary>
            Index of the <see cref="P:Crestron.RAD.Common.Events.ListChangedEventArgs`1.OldItem"/> or <see cref="P:Crestron.RAD.Common.Events.ListChangedEventArgs`1.NewItem"/>.
            <para>
            For added item events, this is then current index of the item.
            For removed item events, this is the index from which the item was removed.
            For replace events, this is the index of the item being replaced (and therefore the incoming item, too).
            For reset events, this will be -1.     
            </para>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Events.ListChangedAction">
            <summary>
            Describes the action that caused an applicable list changed event.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Events.ListChangedAction.Added">
            <summary>
            An item was added to a list.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Events.ListChangedAction.Removed">
            <summary>
            An item was removed from a list.
            <para>
            NOTE: During this "Removed" changed action, the item being removed may not be fully functional.
            However, it will be identifiable.
            For example, if it has an ID or a Name property, they will still be valid,
            but a method such as SetValue() or a property such as CurrentValue
            will not be valid and may even cause an error if called/accessed during
            this "Removed" action.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Events.ListChangedAction.Replaced">
            <summary>
            An item in a list was replaced with another item.
            <para>
            If the old and new items are the same reference,
            it means one or more parts of the object changed and
            all data based on that object should be refreshed.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Events.ListChangedAction.Reset">
            <summary>
            The content of the list has been cleared or has changed significantly.
            Subscribers to event being raised should request a new copy of the list
            from the object that raised the event.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Events.ValueEventArgs`1">
            <summary>
            Argument for events that refer to a value.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Events.ValueEventArgs`1.Value">
            <summary>
            New value being referred to by the event that was raised
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ICloudReporting">
            <summary>
            Implemented by a driver to expose the ability to register with Crestron Cloud
            for device monitoring purposes, and to allow Crestron Cloud to control the driver.
            <para>A unique ID is required for this to operate.</para>
            <para>The class ABasicDriver will handle all logic when using the class SimplSharpDeviceReporting.</para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICloudReporting.RegisterWithCloud(System.String)">
            <summary>
            This must be invoked if the application desires the driver to report to the cloud.
            The driver will report any applicable feedback changes to the cloud, and it will allow
            the cloud to control the driver.
            </summary>
            <param name="uniqueId">This must be a unique ID that is user-friendly. This must be between 1 and 256 characters</param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ICloudReporting.IsRegisteredWithCloud">
            <summary>
            The current registration state of the driver with the cloud.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.ICloudReporting.IsRegisteredWithCloudChanged">
            <summary>
            Event for applications to use to find out when the registration status <see cref="P:Crestron.RAD.Common.Interfaces.ICloudReporting.IsRegisteredWithCloud"/> has changed,
            and if there was an error, what that error was. 
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IArtwork.ArtworkOn">
            <summary>
            Turns artwork mode on
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IArtwork.ArtworkOff">
            <summary>
            Turns artwork mode off
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IArtwork.SupportsArtworkMode">
            <summary>
            Specifies if artwork on/off is supported by the driver
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IArtwork.EnableArtworkOnPowerOff">
            <summary>
            Enables putting the device into artwork mode when powering it off
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IArtwork.DisableArtworkOnPowerOff">
            <summary>
            Disable putting the device into artwork mode when powering it off
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IArtwork.SupportsArtworkModeOnPowerOff">
            <summary>
            Specifies if the device supports putting the device into artwork mode when powering it off
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAudio2.ResetBassToDefaultValue">
            <summary>
            Method used to reset the bass level default
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAudio2.ResetTrebleToDefaultValue">
            <summary>
            Method used to reset the treble level default
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsToneControlFeedback">
            <summary>
            Property indicating that Tone Control Feedback is supported
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudio.ToneControlState">
            <summary>
            Property indicating the current Tone Control state
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsDiscreteToneControl">
            <summary>
            Property indicating that Discrete Tone Control is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAudio.ToneControlOn">
            <summary>
            Method used to send the Tone Control On command to the device
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAudio.ToneControlOff">
            <summary>
            Method used to send the Tone Control Off command to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsToneControlToggle">
            <summary>
            Property indicating that Toggle Tone Control is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAudio.ToneControlToggle">
            <summary>
            Method used to send the Tone Control Toggle command to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsBassFeedback">
            <summary>
            Property indicating that Bass Feedback is supported
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudio.BassPercent">
            <summary>
            Gets the device Bass level as a percent
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsBassDbFeedback">
            <summary>
            Property indicating that Bass Db Feedback is supported
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudio.BassDb">
            <summary>
            Gets the Bass DB value in Db
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsTrebleFeedback">
            <summary>
            Property indicating that Treble Feedback is supported
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudio.TreblePrecent">
            <summary>
            Gets the device Treble level as a percent
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsTrebleDbFeedback">
            <summary>
            Property indicating that Treble Db Feedback is supported
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudio.TrebleDb">
            <summary>
            Gets the Treble DB value in Db
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsSetBass">
            <summary>
            Property indicating that Set Bass Command is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAudio.SetBass(System.Int32)">
            <summary>
            Method used to send the Set Bass command to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsChangeBass">
            <summary>
            Property indicating that Bass Up Down commands are supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAudio.BassUp(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Method used to send the Bass Up command to the device
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAudio.BassDown(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Method used to send the Bass Down command to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsSetTreble">
            <summary>
            Property indicating that Set Treble command is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAudio.SetTreble(System.Int32)">
            <summary>
            Method used to send the Set Treble command to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsChangeTreble">
            <summary>
            Property indicating that Treble Up Down commands are supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAudio.TrebleUp(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Method used to send the Treble Up command to the device
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAudio.TrebleDown(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Method used to send the Treble Down command to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsLoudnessFeedback">
            <summary>
            Property indicating that Loudness Feedback is supported
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudio.LoudnessState">
            <summary>
            Gets the current Loudness property state from the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsDiscreteLoudness">
            <summary>
            Property indicating that Loudness On Off commands are supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAudio.LoudnessOn">
            <summary>
            Method used to send the Loudness On command to the device
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAudio.LoudnessOff">
            <summary>
            Method used to send the Loudness Off command to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsLoudnessToggle">
            <summary>
            Property indicating that Toggle Loudness command is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAudio.ToggleLoudness">
            <summary>
            Method used to send the Toggle Loudness command to the device
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IAudio3">
            <summary>
            Extension of <see cref="T:Crestron.RAD.Common.Interfaces.IAudio"/> to provide events for properties changing.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IAudio3.ToneControlStateChanged">
            <summary>
            Indicates a change in state for <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.ToneControlState"/>.
            <para>This will only be invoked if <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsToneControlFeedback"/> is true.</para>
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IAudio3.BassPercentChanged">
            <summary>
            Indicates a change in state for <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.BassPercent"/>.
            <para>This will only be invoked if <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsBassFeedback"/> is true.</para>
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IAudio3.BassDbChanged">
            <summary>
            Indicates a change in state for <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.BassDb"/>.
            <para>This will only be invoked if <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsBassDbFeedback"/> is true.</para>
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IAudio3.TreblePercentChanged">
            <summary>
            Indicates a change in state for <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.TreblePrecent"/>.
            <para>This will only be invoked if <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsTrebleFeedback"/> is true.</para>
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IAudio3.TrebleDbChanged">
            <summary>
            Indicates a change in state for <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.TrebleDb"/>.
            <para>This will only be invoked if <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsTrebleDbFeedback"/> is true.</para>
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IAudio3.LoudnessStateChanged">
            <summary>
            Indicates a change in state for <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.LoudnessState"/>.
            <para>This will only be invoked if <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsLoudnessFeedback"/> is true.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAuthentication.SupportsUsername">
            <summary>
            Indicates that a username is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAuthentication.UsernameMask">
            <summary>
            Deprecated.
            RegEx defining any mask to be applied to the username input.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAuthentication.UsernameKey">
            <summary>
            String to be used as the username key in the SIMPL# DataStore.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAuthentication.SupportsPassword">
            <summary>
            Indcates that a password is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAuthentication.PasswordMask">
            <summary>
            Deprecated.
            RegEx defining any mask to be applied to the password input.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAuthentication.PasswordKey">
            <summary>
            String to be used as the password key in the SIMPL# DataStore.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAuthentication.StoreUsername(System.String)">
            <summary>
            Method to store username.
            </summary>
            <param name="username">Username to store.  Empty values supported.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAuthentication.StorePassword(System.String)">
            <summary>
            Method to store password.
            </summary>
            <param name="password">Password to store.  Empty values supported.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IAuthentication2">
            <summary>
            Extension of <see cref="T:Crestron.RAD.Common.Interfaces.IAuthentication"/> to allow applications to not use DataStore for password/username
            storage. Consumers can call <see cref="M:Crestron.RAD.Common.Interfaces.IAuthentication2.OverrideUsername(System.String)"/> / <see cref="M:Crestron.RAD.Common.Interfaces.IAuthentication2.OverridePassword(System.String)"/> to set the 
            username/password the driver will use in its authentication sequence.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAuthentication2.OverrideUsername(System.String)">
            <summary>
            Method used to override the stored value. 
            This is useful when the application wants to manage the authentication 
            outside of the RAD framework and simply supply the value directly.
            
            Note: Value is not stored in DataStore.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAuthentication2.OverridePassword(System.String)">
            <summary>
            Method used to override the stored value. 
            This is useful when the application wants to manage the authentication 
            outside of the RAD framework and simply supply the value directly.
            
            Note: Value is not stored in DataStore.
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAuthentication2.DefaultUsername">
            <summary>
            Method used to retrieve the default username value.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAuthentication2.DefaultPassword">
            <summary>
            Method used to retrieve the default password value.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAuthentication2.Required">
            <summary>
            Method used to retrieve the required value. 
            
            Note: This is set true when authentication is not an 
            optional setting for a device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAuthentication2.IsAuthenticated">
            <summary>
            Specifies the current authenticated status.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IAuthentication3">
            <summary>
            Adds event handling for <see cref="T:Crestron.RAD.Common.Interfaces.IAuthentication2"/>.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IAuthentication3.IsAuthenticatedChanged">
            <summary>
            Notifies listeners of changes to <see cref="P:Crestron.RAD.Common.Interfaces.IAuthentication2.IsAuthenticated"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAuxiliaryButtons.AuxiliaryButton(System.UInt32)">
            <summary>
            Sends the function button command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.ZonesExist">
            <summary>
            property indicating that the driver contains at least 1 zone
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.Uid">
            <summary>
            string unique identifier for the zone
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.FriendlyName">
            <summary>
            string zone friendly name for the zone
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.AudioInOut">
            <summary>
            Gets array of the audio inputs/outputs supported by the zone as defined in the driver json
            </summary>
            <returns>A list of AudioInputDetails</returns>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.VideoInOut">
            <summary>
            Gets array of the video inputs/outputs supported by the zone as defined in the driver json
            </summary>
            <returns>A list of VideoInputDetails</returns>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.SupportsPowerFeedback">
            <summary>
            Property indicating that Power Feedback is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.PowerIsOn">
            <summary>
            Gets the current Power state.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.SupportsDiscretePower">
            <summary>
            Property indicating that Discrete Power is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAvrZone.PowerOn">
            <summary>
            Method to turn the Device on.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAvrZone.PowerOff">
            <summary>
            Method to turn the Device off.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.SupportsTogglePower">
            <summary>
            Property indicating that Toggle Power is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAvrZone.PowerToggle">
            <summary>
            Method to Toggle the Power State of the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.SupportsVideoInputFeedback">
            <summary>
            Property indicating that the Video input Source feedback is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.VideoInputSource">
            <summary>
            Returns the current video input source
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.VideoInputIs">
            <summary>
            Returns the current input video connection
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.SupportsSetVideoInputSource">
            <summary>
            Property indicating that the video input source command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAvrZone.SetVideoInputSource(Crestron.RAD.Common.Enums.VideoConnections)">
            <summary>
            Method to select an video input source. VideoConnections is a superset of all
            possible inputs. For finding available inputs per device use
            GetUsableInput.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAvrZone.GetUsableVideoInputs">
            <summary>
            Gets array of the usable video inputs on this Device.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.SupportsAudioInputFeedback">
            <summary>
            Property indicating that the audio input Source feedback is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.AudioInputSource">
            <summary>
            Returns the current audio input source
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.AudioInputIs">
            <summary>
            Returns the current zone audio input source
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.SupportsSetAudioInputSource">
            <summary>
            Property indicating that the audio input source command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAvrZone.SetAudioInputSource(Crestron.RAD.Common.Enums.AudioConnections)">
            <summary>
            Method to select an audio input source. AudioConnections is a superset of all
            possible inputs. For finding available inputs per device use
            GetUsableInput.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAvrZone.GetUsableAudioInputs">
            <summary>
            Gets array of the usable audio inputs on this Device.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.SupportsVolumePercentFeedback">
            <summary>
            Property indicating that the device supports Volume Feedback in the percentage format.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.VolumePercent">
            <summary>
            Gets the Device volume.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.SupportsMuteFeedback">
            <summary>
            Property indicating that the device supports Mute Feedback.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.IsMuted">
            <summary>s
            Gets the current Mute state.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.SupportsDiscreteMute">
            <summary>
            Property indicating that the device supports Mute On and Mute Off.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAvrZone.MuteOn">
            <summary>
            Method to mute the Device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAvrZone.MuteOff">
            <summary>
            Method to unmute the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.SupportsMute">
            <summary>
            Property indicating that the device supports Mute.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAvrZone.Mute">
            <summary>
            Method to send the Mute command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.SupportsSetVolume">
            <summary>
            Property indicating that the device supports Set Volume.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAvrZone.SetVolume(System.UInt32)">
            <summary>
            Method to turn the Device volume to a given percentage.
            </summary>
            <param name="volume">The pecentage to set the volume to.</param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.SupportsChangeVolume">
            <summary>
            Property indicating that the device supports Set Volume Up and Volume Down.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAvrZone.VolumeUp(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Method to turn the Device volume up one step.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAvrZone.VolumeDown(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Method to turn the Device volume down one step.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAvrZone.SetZoneSupportProperties">
            <summary>
            Method to get the supported features from the zone
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.WarmingUp">
            <summary>
            Property used to indicate that the zone is warming up
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZone.CoolingDown">
            <summary>
            Property used to indicate that the zone is cooling down
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IAvrZone.WarmingUpChanged">
            <summary>
            Indicates a change in state for Warming Up
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IAvrZone.CoolingDownChanged">
            <summary>
            Indicates a state change for Cool Down
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IAvrZone.PowerIsOnChanged">
            <summary>
            Indicates a change in state for <see cref="P:Crestron.RAD.Common.Interfaces.IAvrZone.PowerIsOn"/>.
            <para>This will only be invoked if <see cref="P:Crestron.RAD.Common.Interfaces.IAvrZone.SupportsPowerFeedback"/> is true.</para>
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IAvrZone.VolumePercentChanged">
            <summary>
            Indicates a change in state for <see cref="P:Crestron.RAD.Common.Interfaces.IAvrZone.VolumePercent"/>.
            <para>This will only be invoked if <see cref="P:Crestron.RAD.Common.Interfaces.IAvrZone.SupportsVolumePercentFeedback"/> is changed.</para>
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IAvrZone.IsMutedChanged">
            <summary>
            Indicates a change in state for <see cref="P:Crestron.RAD.Common.Interfaces.IAvrZone.IsMuted"/>.
            <para>This will only be invoked if <see cref="P:Crestron.RAD.Common.Interfaces.IAvrZone.SupportsMuteFeedback"/> is true.</para>
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IAvrZone.AudioInputIsChanged">
            <summary>
            Indicates a change in state for <see cref="P:Crestron.RAD.Common.Interfaces.IAvrZone.AudioInputSource"/>.
            <para>This will only be invoked if <see cref="P:Crestron.RAD.Common.Interfaces.IAvrZone.SupportsAudioInputFeedback"/> is changed.</para>
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IAvrZone.VideoInputIsChanged">
            <summary>
            Indicates a change in state for <see cref="P:Crestron.RAD.Common.Interfaces.IAvrZone.VideoInputSource"/>.
            <para>This will only be invoked if <see cref="P:Crestron.RAD.Common.Interfaces.IAvrZone.SupportsVideoInputFeedback"/> is changed.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZoneSupportedFeature.ComponentInterface">
            <summary>
            Speicifes the component interface that is supported
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAvrZoneSupportedFeature.SupportStatements">
            <summary>
            A collection of all support statments that are true for this component interface
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicInformation.Id">
            <summary>
            Id of the Device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicInformation.SupportsFeedback">
            <summary>
            Indicates if the Device supports feedback
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicInformation2.SetUserAttribute(System.String,System.String)">
            <summary>
            Sets a user attribute to the specified value.
            </summary>
            <param name="attributeId">The attribute ID specified by UserAttribute.ParameterId</param>
            <param name="attributeValue">The value this attribute should be set to</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicInformation2.SetUserAttribute(System.String,System.UInt16)">
            <summary>
            Sets a user attribute to the specified value.
            </summary>
            <param name="attributeId">The attribute ID specified by UserAttribute.ParameterId</param>
            <param name="attributeValue">The value this attribute should be set to</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicInformation2.SetUserAttribute(System.String,System.Boolean)">
            <summary>
            Sets a user attribute to the specified value.
            </summary>
            <param name="attributeId">The attribute ID specified by UserAttribute.ParameterId</param>
            <param name="attributeValue">The value this attribute should be set to</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicInformation2.RetrieveUserAttributes">
            <summary>
            Retrieves a list of all User Attributes the current driver supports
            </summary>
            <returns></returns>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IBasicInformation3">
            <summary>
            Extends IBasicInformation2 and adds an event indicating that the user attributes changed.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IBasicInformation3.UserAttributesChanged">
            <summary>
            Event to notify user attributes changes.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicLogger.EnableTxDebug">
            <summary>
            Property to enable TX Debug statements.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicLogger.EnableRxDebug">
            <summary>
            Property to enable RX Debug statements.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicLogger.EnableLogging">
            <summary>
            Property to enable Logging statements.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicLogger.CustomLogger">
            <summary>
            Property set a Custom Logger.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ICameraControl">
            <summary>
            Interface to define Camera Control.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ICameraControl.SupportsPanAndTilt">
            <summary>
            Flag to indicate that this camera supports Pan and Tilt.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICameraControl.Left">
            <summary>
            Method to move the camera Left.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICameraControl.Right">
            <summary>
            Method to move the camera Right.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICameraControl.Up">
            <summary>
            Method to move the camera Up.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICameraControl.Down">
            <summary>
            Method to move the camera Down.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ICameraControl.SupportsZoom">
            <summary>
            Flag to indicate that this camera supports Zoom.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICameraControl.ZoomIn">
            <summary>
            Method to have the camera Zoom In.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICameraControl.ZoomOut">
            <summary>
            Method to have the camera Zoom Out.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICameraControl.Stop">
            <summary>
            Method to have the camera stop its current action.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ICameraControl.SupportsManualFocus">
            <summary>
            Flag to indicate that this camera supports manual focus control.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ICameraControl.SupportsAutoFocus">
            <summary>
            Flag to indicate that this camera supports auto focus.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ICameraControl.InAutoFocusFeedback">
            <summary>
            Flag to indicate that this camera is in Auto Focus Mode.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICameraControl.FocusIn">
            <summary>
            Method to have the camera focus in.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICameraControl.FocusOut">
            <summary>
            Method to have the camera focus out.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICameraControl.EnableAutoFocus">
            <summary>
            Method to enable auto focus for a device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICameraControl.ResetPosition">
            <summary>
            Method to reset the camera to its default values for pan and tilt.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IChannel.SupportsChannelFeedback">
            <summary>
            Property indicating that the Channel Feedback is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IChannel.Channel">
            <summary>
            Gets the Device's channel.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IChannel.SupportsChangeChannel">
            <summary>
            Property indicating that the change channel command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IChannel.ChannelDown(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Method to send the Channel Down command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IChannel.ChannelUp(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Method to send the Channel Up command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released</param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IChannel.SupportsSetChannel">
            <summary>
            Property indicating that the set channel command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IChannel.SetChannel(System.String)">
            <summary>
            Method to turn the Device volume to a given channel number.
            </summary>
            <param name="value">The channel number to set.</param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IChannel.SupportsGuide">
            <summary>
            Property indicating that the Guide command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IChannel.Guide">
            <summary>
            Method to send the Guide command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IChannel.SupportsPageChange">
            <summary>
            Property indicating that the Device supports page changes.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IChannel.PageDown(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Method to send the Page Down command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IChannel.PageUp(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Method to send the Page Up command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released</param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ICodecCamera.SupportsManualFocus">
            <summary>
            Flag to indicate that this camera supports manual focus control.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ICodecCamera.SupportsAutoFocus">
            <summary>
            Flag to indicate that this camera supports auto focus.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICodecCamera.Left(System.UInt32,System.String,System.String)">
            <summary>
            Method to move the camera Left.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICodecCamera.Right(System.UInt32,System.String,System.String)">
            <summary>
            Method to move the camera Right.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICodecCamera.Up(System.UInt32,System.String,System.String)">
            <summary>
            Method to move the camera Up.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICodecCamera.Down(System.UInt32,System.String,System.String)">
            <summary>
            Method to move the camera Down.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICodecCamera.ZoomIn(System.UInt32,System.String,System.String)">
            <summary>
            Method to have the camera Zoom In.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICodecCamera.ZoomOut(System.UInt32,System.String,System.String)">
            <summary>
            Method to have the camera Zoom Out.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICodecCamera.Stop(System.UInt32,System.String,System.String)">
            <summary>
            Method to have the camera stop its current action.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICodecCamera.FocusIn(System.UInt32,System.String,System.String)">
            <summary>
            Method to have the camera focus in.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICodecCamera.FocusOut(System.UInt32,System.String,System.String)">
            <summary>
            Method to have the camera focus out.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICodecCamera.EnableAutoFocus(System.UInt32)">
            <summary>
            Method to enable auto focus for a device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICodecCamera.ResetPosition(System.UInt32)">
            <summary>
            Method to reset the camera to its default values for pan and tilt.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ICodecPreset">
            <summary>
            Interface to define Abstract repsentation of a preset from codec.
            The Preset class implements this.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICodecPreset.Recall">
            <summary>
            Method to recall the preset.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ICodecPreset.Number">
            <summary>
            NumberKeypad of the Preset
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ICodecPreset.Name">
            <summary>
            Name of preset
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ISupportedCommandsHelper.SupportedCommands">
            <summary>
            Returns a list of SupportedCommand for all custom and non-custom/standard commands supported by the driver
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IConnection.Connected">
            <summary>
            Indicates if the Driver is Connected to Device.
            </summary>
            <returns>True if connected.</returns>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IConnection.SupportsDisconnect">
            <summary>
            Property indicating that Driver supports Disconnecting.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IConnection.Disconnect">
            <summary>
            Disconnects from the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IConnection.SupportsReconnect">
            <summary>
            Property indicating that Driver supports Reconnecting.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IConnection.Reconnect">
            <summary>
            Reconnects to the device.  
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IConnection.Connect">
            <summary>
            Connects to the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IConnection2.IsSecure">
            <summary>
            Used to indicate if connection to device is secure.
            
            Note: This is set true when the connection to the device 
            uses a secure socket (I.E. HTTPS).
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ICRPCMediaPlayer">
            <summary>
            This interface is a wrapper to include all of the IMediaPlayer interface from the media player sdk
            This will also allow additional methods and properties to be added if needed here.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICustomCommand.SendCustomCommand(System.String)">
            <summary>
            Method to send a custom command.
            </summary>
            <param name="command">Custom command.</param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ICustomCommand.EnableRxOut">
            <summary>
            Enables RxOut event.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.ICustomCommand.RxOut">
            <summary>
            Sends strings sent from the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ICustomCommandCollection.CustomCommandNames">
            <summary>
            Gets list of custom command names.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICustomCommandCollection.CheckIfCustomCommandExists(System.String)">
            <summary>
            Check if custom command exists by name of command.
            </summary>
            <param name="commandName">Command name to search by</param>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICustomCommandCollection.AddCustomCommand(System.String,System.String,System.Collections.Generic.List{Crestron.RAD.Common.Parameters})">
            <summary>
            Add custom command by providing name, value, and list of parameters.
            </summary>
            <param name="commandName">Name of command</param>
            <param name="commandValue">Value of command</param>
            <param name="parameters">Collection of parameters</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICustomCommandCollection.RemoveCustomCommandByName(System.String)">
            <summary>
            Remove custom command by command name if it exists.
            </summary>
            <param name="commandName">Name of command</param>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICustomCommandCollection.SendCustomCommandByName(System.String)">
            <summary>
            Send custom command by command name if it exists.
            </summary>
            <param name="commandName">Name of command</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICustomCommandCollection.SendCustomCommandValue(System.String)">
            <summary>
            Send custom command value.
            </summary>
            <param name="commandValue">Value of command to send</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICustomCommandCollection2.SendCustomCommandByName(System.String,Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Send custom command by command name if it exists. 
            Allows for specifying if this is a Tap/Hold/Release.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IDriverInitialization">
            <summary>
            Interface for drivers to implement if they require being initialized with persisted settings or additional files
            that were provided in the driver's pkg.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IDriverInitialization.Initialize(System.String,System.String)">
            <summary>       
            Allows the driver to initialize any local and external resources along
            with any custom settings.
            </summary>
            <param name="driverPath">Path to the folder containing all of the files from the pkg.</param>
            <param name="driverSettings">
            A serialized custom object containing settings specific to the driver.
            This object is created by the driver and stored by the consuming application on <see cref="E:Crestron.RAD.Common.Interfaces.IDriverInitialization.DriverSettingsChanged"/> event.
            </param>
            <returns>True if initialization succeeded, otherwise false.</returns>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDriverInitialization.DriverSettings">
            <summary>
            Serialized custom object containing settings that are specific to this driver.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IDriverInitialization.DriverSettingsChanged">
            <summary>
            Event indicating that the DriverSettings property has changed.
            The consuming application should store these settings and pass it back
            to the driver when calling the Initialize method.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.DriverSettingsEventArgs">
            <summary>
            Event argument that contains the driver's settings.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.DriverSettingsEventArgs.#ctor(System.String)">
            <summary>
            Contructor for <see cref="T:Crestron.RAD.Common.Interfaces.DriverSettingsEventArgs"/>.
            </summary>
            <param name="driverSettings"></param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.DriverSettingsEventArgs.DriverSettings">
            <summary>
            The object containing all of the driver's settings that it needs saved.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDvr.SupportsDvrCommand">
            <summary>
            Property indicating that the DVR command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IDvr.DvrCommand">
            <summary>
            Method to send the DVR command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDvr.SupportsLive">
            <summary>
            Property indicating that the Live command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IDvr.Live">
            <summary>
            Method to send the Live command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDvr.SupportsRecord">
            <summary>
            Property indicating that the Record command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IDvr.Record">
            <summary>
            Method to send the Record command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDvr.SupportsSpeedSlow">
            <summary>
            Property indicating that the Speed Slow command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IDvr.SpeedSlow">
            <summary>
            Method to send the Speed Slow command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDvr2.SupportsThumbsUp">
            <summary>
            Property used to indicate that ThumbsUp command is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IDvr2.ThumbsUp">
            <summary>
            Method used to send the ThumbsUp command to the connected device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDvr2.SupportsThumbsDown">
            <summary>
            Property used to indicate that ThumbsDown command is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IDvr2.ThumbsDown">
            <summary>
            Method used to send the ThumbsDown command to the connected device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IEnergyStar.SupportsEnergyStarFeedback">
            <summary>
            Property indicating that EnergyStar Feedback is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IEnergyStar.EnergyStarIsOn">
            <summary>
            Gets the current EnergyStar state.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IEnergyStar.SupportsDiscreteEnergyStar">
            <summary>
            Property indicating that Discrete EnergyStar is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IEnergyStar.EnergyStarOn">
            <summary>
            Method to turn EnergyStar on.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IEnergyStar.EnergyStarOff">
            <summary>
            Method to turn EnergyStar off.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IEnergyStar.SupportsToggleEnergyStar">
            <summary>
            Property indicating that Toggle EnergyStar is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IEnergyStar.EnergyStarToggle">
            <summary>
            Method to Toggle the EnergyStar State of the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IFeedbackInformation.SupportsFeedback">
            <summary>
            Indicates if the device supports feedback
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IFeedbackInformation.MinimumResponseTime">
            <summary>
            Approximate minimum number of milliseconds the device or driver will report state/feedback changes.
            <para>
            The formula for this value is typically:
            [Polling Interval (if any)] + [Device Response Time] + [Response Processing Time].
            </para>
            <para>
            This may be 0 or a very small value if the device responds quickly
            and driver processing time is negligible.
            </para>
            <para>
            Amongst other reasons, this property can be used to write smarter code that waits at least this amount of time
            before processing changes to provide optimize updates to higher level components.
            </para>
            <para>
            If no capabilities of the device support feedback, this can be ignored.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IFeedbackInformation.MaximumResponseTime">
            <summary>
            Approximate maximum number of milliseconds the device or driver will take
            before reporting state/feedback changes after the device receives a command.
            <para>
            The formula for this value is typically:
            ([Device Response Time] + [Response Processing Time]) * 2 + [Polling Interval (if any)].
            </para>
            <para>
            The first part of the equation is multiplied by 2 because a command may be sent to the device
            just as the driver is beginning a poll.
            </para>
            <para>
            Amongst other reasons, this property can be used to write smarter code that waits at least this amount of time
            before timing out or declaring a device unresponsive.
            </para>
            <para>
            If no capabilities of the device support feedback, this can be ignored.
            </para>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IHardwareDiagnostics">
            <summary>
            General diagnostic information about a piece of hardware.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IHardwareDiagnostics.CurrentTemperature">
            <summary>
            Current internal temperature of the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IHardwareDiagnostics.CurrentTemperatureUnits">
            <summary>
            Units of measurement for <see cref="P:Crestron.RAD.Common.Interfaces.IHardwareDiagnostics.CurrentTemperature"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IHardwareDiagnostics.SupportsTemperatureFeedback">
            <summary>
            Indicates if <see cref="P:Crestron.RAD.Common.Interfaces.IHardwareDiagnostics.CurrentTemperature"/> is supported by this driver and will show feedback.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IHardwareDiagnostics.CurrentTemperatureChanged">
            <summary>
            Indicates a change in state for <see cref="P:Crestron.RAD.Common.Interfaces.IHardwareDiagnostics.CurrentTemperature"/>.
            <para>This will only be invoked if <see cref="P:Crestron.RAD.Common.Interfaces.IHardwareDiagnostics.SupportsTemperatureFeedback"/> is true.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IInputs.InputSource">
            <summary>
            Returns the current input source
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IInputs.SetInputSource(Crestron.RAD.Common.Enums.VideoConnections)">
            <summary>
            Method to select an input source.  VideoConnections is a superset of all possible inputs.  For finding available inputs per device use GetUsableInput.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IInputs.GetUsableInputs">
            <summary>
            Gets array of the usable inputs on this Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IInputs2.SupportsVideoInputFeedback">
            <summary>
            Property indicating that the Video input Source feedback is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IInputs2.VideoInputSource">
            <summary>
            Returns the current video input source
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IInputs2.SupportsSetVideoInputSource">
            <summary>
            Property indicating that the video input source command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IInputs2.SetVideoInputSource(Crestron.RAD.Common.Enums.VideoConnections)">
            <summary>
            Method to select an video input source. VideoConnections is a superset of all
            possible inputs. For finding available inputs per device use
            GetUsableInput.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IInputs2.GetUsableVideoInputs">
            <summary>
            Gets array of the usable video inputs on this Device.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IInputs2.SupportsAudioInputFeedback">
            <summary>
            Property indicating that the audio input Source feedback is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IInputs2.AudioInputSource">
            <summary>
            Returns the current audio input source
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IInputs2.SupportsSetAudioInputSource">
            <summary>
            Property indicating that the audio input source command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IInputs2.SetAudioInputSource(Crestron.RAD.Common.Enums.AudioConnections)">
            <summary>
            Method to select an audio input source. AudioConnections is a superset of all
            possible inputs. For finding available inputs per device use
            GetUsableInput.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IInputs2.GetUsableAudioInputs">
            <summary>
            Gets array of the usable audio inputs on this Device.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrAudio.ToneControlOn(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the Tone Control On command to the device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrAudio.ToneControlOff(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the Tone Control Off command to the device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrAudio.ToneControlToggle(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the Tone Control Toggle command to the device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrAudio.BassUp(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the Bass Up command to the device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrAudio.BassDown(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the Bass Down command to the device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrAudio.TrebleUp(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the Treble Up command to the device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrAudio.TrebleDown(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the Treble Down command to the device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrAudio.LoudnessOn(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the Loudness On command to the device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrAudio.LoudnessOff(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the Loudness Off command to the device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrAudio.ToggleLoudness(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the Toggle Loudness command to the device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrChannel.ChannelDown(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the Channel Down command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrChannel.ChannelUp(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the Channel Up command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrChannel.Guide(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the Guide command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrChannel.PageDown(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the Page Down command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrChannel.PageUp(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the Page Up command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrChannel2.SetChannelSequenceConfiguration(Crestron.RAD.Common.ChannelSequenceConfig)">
            <summary>
            Method to set the Channel Sequence Properties
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrColorKeys.ColorButton(Crestron.RAD.Common.Enums.ColorButtons,Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send a color to the device.
            </summary>
            <param name="color">The color to send to the device.</param>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrDvr.DvrCommand(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the DVR command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrDvr.Live(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the Live command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrDvr.Record(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the Record command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrDvr.SpeedSlow(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the Speed Slow command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrDvr.ThumbsUp(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the Thumbs Up command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrDvr.ThumbsDown(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the Thumbs Down command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrInputs.SetInputSource(Crestron.RAD.Common.Enums.VideoConnections,Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to select an input source.  VideoConnections is a superset of all possible inputs.  For finding available inputs per device use GetUsableInput.
            </summary>
            <param name="input"></param>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrKeypad.KeypadNumber(System.UInt32,Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Sends a keypard number to the device.
            </summary>
            <param name="number">Number to be sent to the device.</param>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrKeypad.Enter(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the enter command to the Device.
            Typically, Enter is used to force a channel number change
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrKeypad.Pound(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send a "#" to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrKeypad.Asterisk(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send a "*" to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrKeypad.Period(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send a "." to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrKeypad.Dash(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send a "-" to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrLetterKeys.LetterKeys(Crestron.RAD.Common.Enums.LetterButtons,Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send a letter key to the device.
            </summary>
            <param name="letterKeys">Letter to be sent.</param>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.Sirius(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            method used to send the change to sirius to the device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.Xm(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            method used to send the change to xm to the device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.SiriusXm(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            method used to send the change to suriusxm to the device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.HdRadio(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            method used to send the change to hd radio to the device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.InternetRadio(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            method used to send the change to internet radio command to the device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.LastFm(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            method used to send the change to lastfm command to the device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.PandoraRadio(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            methos used to send the change to pandora radio command to the device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.Rhapsody(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            method used to send the change to rhapsody radio command to the device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.Spotify(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the Spotify command to the connected device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.YouTube(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Methods used to send the YouTube command to the connected device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.YouTubeTv(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the YouyTubeTv command to the connected device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.Netflix(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the Netflix command to the connected device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.Hulu(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the Hulu command to the connected device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.DirecTvNow(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the DirectvNow command to the connected device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.AmazonVideo(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the AmazonVideo command to the connected device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.PlaystationVue(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the PlaystationViue command to the connected device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.SlingTv(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the SlingTv command to the connected device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.Airplay(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the Airplay command to the connected device
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.GoogleCast(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the GoogleCast command to the connected device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.Dlna(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the DLNA command to the connected device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.Tidal(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the Tidal command to the connected device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.Deezer(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the Deezer command to the connected device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.Crackle(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the Crackle command to the connected device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.OnDemand(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the OnDemand command to the connected device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.GooglePlay(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the GooglePlay command to the connected device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaSource.Bluetooth(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the Bluetooth command to the connected device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaTransport.ForwardScan(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the forward scan command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaTransport.ReverseScan(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the reverse scan command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaTransport.Play(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the play command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaTransport.Pause(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the pause command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaTransport.Stop(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the stop command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaTransport.ForwardSkip(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the forward skip command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaTransport.ReverseSkip(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the reverse skip command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaTransport.Repeat(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the repeat command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaTransport.Return(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the return command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaTransport.Back(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the back command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrMediaTransport.PlayPause(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the Play/Pause command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrNavigation.ArrowKey(Crestron.RAD.Common.Enums.ArrowDirections,Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send an arrow key to the Device.
            </summary>
            <param name="direction">Direction of arrow to be send to the device.</param>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrNavigation.Select(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the Select command to the Device.
            Typically, Select is used when calling the center button of a directional pad
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrNavigation.Clear(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the clear command to the device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrNavigation.Exit(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the exit command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrNavigation.Home(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the home command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrNavigation.Menu(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the menu command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrNavigation.Search(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method used to send the search command to the device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrPower.PowerOn(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to turn the Device on.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrPower.PowerOff(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to turn the Device off.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrPower.PowerToggle(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to Toggle the Power State of the device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrSurround.SurroundModeCycle(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the surround mode cycle command to the device
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrTuner.FrequencyDown(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the frequency down command to the device
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrTuner.FrequencyUp(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the frequency up command to the device
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrTuner.AutoFrequencyDown(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the auto frequency down command to the device
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrTuner.AutoFrequencyUp(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the auto frequency up command to the device
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrTuner.FrequencyBand(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the frequency band command to the device
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrTuner.FrequencyBandAm(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the discrete frequency band AM command to the device
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrTuner.FrequencyBandFm(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the discrete frequency band FM command to the device
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrVideoMute.VideoMuteOn(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to turn the Device Video Mute on.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrVideoMute.VideoMuteOff(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to turn the Device Video Mute off.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrVideoMute.VideoMuteToggle(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the Device Video Mute Toggle on.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrVolume.MuteOn(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to mute the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrVolume.MuteOff(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to unmute the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrVolume.Mute(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to send the Mute command to the Device.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrVolume.VolumeUp(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to turn the Device volume up one step.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IIrVolume.VolumeDown(Crestron.RAD.Common.Enums.IrActions)">
            <summary>
            Method to turn the Device volume down one step.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released</param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IKeypad.SupportsKeypadNumber">
            <summary>
            Property indicating that the KeypadNumber command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IKeypad.KeypadNumber(System.UInt32)">
            <summary>
            Sends a keypard number to the device.
            </summary>
            <param name="number">Number to be sent to the device.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IKeypad.SendKeypadString(System.String)">
            <summary>
            Method to send a series of keypad characters to the device.
            </summary>
            <param name="keys"></param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IKeypad.SupportsEnter">
            <summary>
            Property indicating that the Enter command is supported.
            API should define what this functionality is for.  Typically to enter a channel number.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IKeypad.Enter">
            <summary>
            Method to send the enter command to the Device.
            Typically, Enter is used to force a channel number change
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IKeypad.SupportsPound">
            <summary>
            Property indicating that the Pound command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IKeypad.Pound">
            <summary>
            Method to send a "#" to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IKeypad.SupportsAsterisk">
            <summary>
            Property indicating that the Asterisk command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IKeypad.Asterisk">
            <summary>
            Method to send a "*" to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IKeypad.SupportsPeriod">
            <summary>
            Property indicating that the Period command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IKeypad.Period">
            <summary>
            Method to send a "." to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IKeypad.SupportsDash">
            <summary>
            Property indicating that the Dash command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IKeypad.Dash">
            <summary>
            Method to send a "-" to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IKeypad.SupportsKeypadBackSpace">
            <summary>
            Property indicating that the Keypad Back Space command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IKeypad.KeypadBackSpace">
            <summary>
            Method to send a Back Space to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IKeypad.NumericKeypadLabels">
            <summary>
            Property to get the primary and secondary lables for the numeric keypyad buttons 0-9.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IKeypad.DashLabels">
            <summary>
            Property to get the primary and secondary lables for the dash keypyad button.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IKeypad.PeriodLabels">
            <summary>
            Property to get the primary and secondary lables for the period keypyad button.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IKeypad.AsteriskLabels">
            <summary>
            Property to get the primary and secondary lables for the asterisk keypyad button.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IKeypad.PoundLabels">
            <summary>
            Property to get the primary and secondary lables for the pound keypyad button.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaServiceProvider.SupportsMediaServices">
            <summary>
            Specifies if this component interface is supported by this device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaServiceProvider.HasDirectAccessToServices">
            <summary>
            Specifies if the driver is able to select services or if
            they must be selected by navigating on the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaServiceProvider.AvailableMediaServices">
            <summary>
            A collection that represents all media services that are supported by this device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaServiceProvider.SupportsActiveMediaServiceFeedback">
            <summary>
            Specifies if the device supports feedback for the current active media service
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaServiceProvider.ActiveMediaService">
            <summary>
            Specifies the current active media service on the device.
            This will return null when there is no active media service.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaServiceProvider.SupportsActiveMediaServiceStateFeedback">
            <summary>
            Specifies if the media services support feedback for their current
            state such as "Playing"
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaServiceProvider.SupportsMediaServiceSubscriptionStateFeedback">
            <summary>
            Specifies if the device supports feedback that states if a given media service can
            report if it is installed on the TV
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaServiceProvider.SelectMediaService(System.String)">
            <summary>
            Selects a media service by its ID to be active
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaService.Id">
            <summary>
            The id of this media service
            Example: "netflix"
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaService.FriendlyName">
            <summary>
            The name of this media service that applications would display
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaService.SupportedFeatures">
            <summary>
            Specifies all features that are supported by this media service
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaService.State">
            <summary>
            Specifies the current active media service's state.
            This will only be set if SupportsActiveMediaServiceStateFeedback
            is true.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaService.SubscriptionStatus">
            <summary>
            Specifies if the media service is currently installed and usable on the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaService.IsSelectable">
            <summary>
            Specifies if the media service is selectable using the API.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaService.IsBranded">
            <summary>
            Specifies if the application is branded or if a different label can be used for the application.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaServiceSupportedFeature.ComponentInterface">
            <summary>
            Speicifes the component interface that is supported
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaServiceSupportedFeature.SupportStatements">
            <summary>
            A collection of all support statments that are true for this component interface
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource.SupportsSiriusRadio">
            <summary>
            Property indicating that the sirius radio is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource.Sirius">
            <summary>
            method used to send the change to sirius to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource.SupportsXmRadio">
            <summary>
            Property indicating that the xm radio is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource.Xm">
            <summary>
            method used to send the change to xm to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource.SupportsSiriusXm">
            <summary>
            property used to indicate that the connected device supports siriusxm radio
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource.SiriusXm">
            <summary>
            method used to send the change to suriusxm to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource.SupportsHdRadio">
            <summary>
            property used to indicate that the connected device supports HD Radio
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource.HdRadio">
            <summary>
            method used to send the change to hd radio to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource.SupportsInternetRadio">
            <summary>
            property used to indicate that the connected device supports internet radio
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource.InternetRadio">
            <summary>
            method used to send the change to internet radio command to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource.SupportsLastFm">
            <summary>
            property used to indicate that the connected device supports LastFm 
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource.LastFm">
            <summary>
            method used to send the change to lastfm command to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource.SupportsPandoraRadio">
            <summary>
            property used to indicate that the connected device supports pandora radio
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource.PandoraRadio">
            <summary>
            methos used to send the change to pandora radio command to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource.SupportsRhapsody">
            <summary>
            property used to indicate that the connected device supports rhapsody radio
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource.Rhapsody">
            <summary>
            method used to send the change to rhapsody radio command to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource2.SupportsSpotify">
            <summary>
            Property indicating that Spotify is supported 
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource2.Spotify">
            <summary>
            Method used to send the Spotify command to the connected device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource2.SupportsYouTube">
            <summary>
            Property used to indicate that YouTube is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource2.YouTube">
            <summary>
            Methods used to send the YouTube command to the connected device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource2.SupportsYouTubeTv">
            <summary>
            Property used to indicate that YouTubeTv is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource2.YouTubeTv">
            <summary>
            Method used to send the YouyTubeTv command to the connected device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource2.SupportsNetflix">
            <summary>
            Property used to indicate that the Netflix command is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource2.Netflix">
            <summary>
            Method used to send the Netflix command to the connected device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource2.SupportsHulu">
            <summary>
            Property used too indicate that the Hulu command is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource2.Hulu">
            <summary>
            Method used to send the Hulu command to the connected device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource2.SupportsDirecTvNow">
            <summary>
            Property used to indicate that the DirectvNow command is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource2.DirecTvNow">
            <summary>
            Method used to send the DirectvNow command to the connected device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource2.SupportsAmazonVideo">
            <summary>
            Property used to indicate that the Amaxon Video command is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource2.AmazonVideo">
            <summary>
            Method used to send the AmazonVideo command to the connected device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource2.SupportsPlaystationVue">
            <summary>
            Property used to indicate that the Playstation Vue command is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource2.PlaystationVue">
            <summary>
            Method used to send the PlaystationViue command to the connected device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource2.SupportsSlingTv">
            <summary>
            Property used to indicate that the Sling Tv command is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource2.SlingTv">
            <summary>
            Method used to send the SlingTv command to the connected device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource2.SupportsAirplay">
            <summary>
            Property used to indicate that the device supports Airplay
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource2.Airplay">
            <summary>
            Method used to send the Airplay command to the connected device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource2.SupportsGoogleCast">
            <summary>
            Property used to indicate that the device supports GoogleCast
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource2.GoogleCast">
            <summary>
            Method used to send the GoogleCast command to the connected device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource2.SupportsDlna">
            <summary>
            Property used to indicate that the device supports DLNA
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource2.Dlna">
            <summary>
            Method used to send the DLNA command to the connected device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource2.SupportsTidal">
            <summary>
            Property used to indicate that the device supports Tidal
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource2.Tidal">
            <summary>
            Method used to send the Tidal command to the connected device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource2.SupportsDeezer">
            <summary>
            Property used to indicate that the device supports Deezer
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource2.Deezer">
            <summary>
            Method used to send the Deezer command to the connected device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource2.SupportsCrackle">
            <summary>
            Property used to indicate that the device supports Crackle
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource2.Crackle">
            <summary>
            Method used to send the Crackle command to the connected device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource2.SupportsOnDemand">
            <summary>
            Property used to indicate that the device supports On Demand
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource2.OnDemand">
            <summary>
            Method used to send the OnDemand command to the connected device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource2.SupportsGooglePlay">
            <summary>
            Property used to indicate that the device supports Google Play
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource2.GooglePlay">
            <summary>
            Method used to send the GooglePlay command to the connected device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaSource2.SupportsBluetooth">
            <summary>
            Property used to indicate that the device supports Bluetooth
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaSource2.Bluetooth">
            <summary>
            Method used to send the Bluetooth command to the connected device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaTransport.SupportsForwardScan">
            <summary>
            Property indicating that the Forward Scan command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaTransport.ForwardScan">
            <summary>
            Method to send the forward scan command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaTransport.SupportsReverseScan">
            <summary>
            Property indicating that the Reverse Scan command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaTransport.ReverseScan">
            <summary>
            Method to send the reverse scan command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaTransport.SupportsPlay">
            <summary>
            Property indicating that the Play command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaTransport.Play">
            <summary>
            Method to send the play command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaTransport.SupportsPause">
            <summary>
            Property indicating that the Pause command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaTransport.Pause">
            <summary>
            Method to send the pause command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaTransport.SupportsStop">
            <summary>
            Property indicating that the Stop command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaTransport.Stop">
            <summary>
            Method to send the stop command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaTransport.SupportsForwardSkip">
            <summary>
            Property indicating that the Forward Skip command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaTransport.ForwardSkip">
            <summary>
            Method to send the forward skip command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaTransport.SupportsReverseSkip">
            <summary>
            Property indicating that the Reverse Skip command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaTransport.ReverseSkip">
            <summary>
            Method to send the reverse skip command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaTransport.SupportsRepeat">
            <summary>
            Property indicating that the Repeat command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaTransport.Repeat">
            <summary>
            Method to send the repeat command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaTransport.SupportsReturn">
            <summary>
            Property indicating that the Return command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaTransport.Return">
            <summary>
            Method to send the return command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaTransport.SupportsBack">
            <summary>
            Property indicating that the Back command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaTransport.Back">
            <summary>
            Method to send the back command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaTransport2.SupportsPlayPause">
            <summary>
            Property indicating that the Play/Pause command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaTransport2.PlayPause">
            <summary>
            Method to send the Play/Pause command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaTransportInfo.SupportsInfo">
            <summary>
            Property indicating that the Info command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaTransportInfo.Info">
            <summary>
            Method to send the Info command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMediaTransportOptions.SupportsOptions">
            <summary>
            Property indicating that the Options command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMediaTransportOptions.Options">
            <summary>
            Method to send the options command to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMicrophoneControl.MicMuteOn">
            <summary>
            Method to mute the microphone
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMicrophoneControl.MicMuteOff">
            <summary>
            Method to unmute the microphone
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IMicrophoneControl.MicMute">
            <summary>
            Method to toggle mute state of the microphone
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IMicrophoneControl.MicMuted">
            <summary>
            Returns true if the microphone is muted
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IModelFileSupport.ModelFileLoadedHandler">
            <summary>
            Event thrown when a model file has been loaded. 
            The string parameter is the model file that has been loaded. If it is empty, the load failed.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IModelFileSupport.LoadModelFile(System.String)">
            <summary>
            Loads the model file at the specified path.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.INavigation.SupportsArrowKeys">
            <summary>
            Property indicating that the ArrowKey command is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.INavigation.ArrowKeysSupported">
            <summary>
            Property indicating which Arrow Keys are supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.INavigation.ArrowKey(Crestron.RAD.Common.Enums.ArrowDirections,Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Method to send an arrow key to the Device.
            </summary>
            <param name="direction">Direction of arrow to be send to the device.</param>
            <param name="action">Indicates if command should be pressed, held, or released.</param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.INavigation.SupportsSelect">
            <summary>
            Property indicating that the Select command is supported.
            API may call for either an "OK" or "Selection" functionality
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.INavigation.Select">
            <summary>
            Method to send the Select command to the Device.
            Typically, Select is used when calling the center button of a directional pad
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.INavigation.SupportsClear">
            <summary>
            Property indicating that the Clear command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.INavigation.Clear">
            <summary>
            Method to send the clear command to the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.INavigation.SupportsExit">
            <summary>
            Property indicating that the Exit command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.INavigation.Exit">
            <summary>
            Method to send the exit command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.INavigation.SupportsHome">
            <summary>
            Property indicating that the Home command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.INavigation.Home">
            <summary>
            Method to send the home command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.INavigation.SupportsMenu">
            <summary>
            Property indicating that the Menu command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.INavigation.Menu">
            <summary>
            Method to send the menu command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.INavigation2.SupportsSearch">
            <summary>
            Property indicating that the search command is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.INavigation2.Search">
            <summary>
            Method used to send the search command to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.INavigation3.Select(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Method overload to send the Select command to the Device 
            Typically, Select is used when calling the center button of a directional pad
            <param name="action">Indicates if command should be pressed, held, or released.</param>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IOutputs.SupportsVideoOutputFeedback">
            <summary>
            Property indicating that the Video output Source feedback is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IOutputs.VideoOutputSource">
            <summary>
            Returns the current video output source
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IOutputs.SupportsSetVideoOutputSource">
            <summary>
            Property indicating that the video output source command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IOutputs.SetVideoOutputSource(Crestron.RAD.Common.Enums.VideoConnections)">
            <summary>
            Method to select an video output source. VideoConnections is a superset of all
            possible outputs. For finding available inputs per device use
            GetUsableVideoOutputs.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IOutputs.GetUsableVideoOutputs">
            <summary>
            Gets array of the usable video outputs on this Device.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IOutputs.SupportsAudioOutputFeedback">
            <summary>
            Property indicating that the audio output Source feedback is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IOutputs.AudioOutputSource">
            <summary>
            Returns the current audio output source
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IOutputs.SupportsSetAudioOutputSource">
            <summary>
            Property indicating that the audio output source command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IOutputs.SetAudioOutputSource(Crestron.RAD.Common.Enums.AudioConnections)">
            <summary>
            Method to select an audio output source. AudioConnections is a superset of all
            possible outputs. For finding available outputs per device use
            GetUsableAudioInputs.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IOutputs.GetUsableAudioOutputs">
            <summary>
            Gets array of the usable audio outputs on this Device.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPower.SupportsPowerFeedback">
            <summary>
            Property indicating that Power Feedback is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPower.PowerIsOn">
            <summary>
            Gets the current Power state.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPower.SupportsDiscretePower">
            <summary>
            Property indicating that Discrete Power is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IPower.PowerOn">
            <summary>
            Method to turn the Device on.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IPower.PowerOff">
            <summary>
            Method to turn the Device off.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPower.SupportsTogglePower">
            <summary>
            Property indicating that Toggle Power is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IPower.PowerToggle">
            <summary>
            Method to Toggle the Power State of the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPower.SupportsWarmUpTime">
            <summary>
            Property indicating that setting Warm Up Time is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPower.WarmUpTime">
            <summary>
            Property to get/set the Warm Up Time.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPower.SupportsCoolDownTime">
            <summary>
            Property indicating that setting Cool Down Time is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPower.CoolDownTime">
            <summary>
            Property to get/set the Cool Down Time.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPower.WarmingUp">
            <summary>
            Property indicating that the device is Warming Up.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPower.CoolingDown">
            <summary>
            Property indicating that the device is Cooling Down.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IPower2">
            <summary>
            Extension of <see cref="T:Crestron.RAD.Common.Interfaces.IPower"/> to provide events for properties changing.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IPower2.PowerIsOnChanged">
            <summary>
            Indicates a change in state for <see cref="P:Crestron.RAD.Common.Interfaces.IPower.PowerIsOn"/>.
            <para>This will only be invoked if <see cref="P:Crestron.RAD.Common.Interfaces.IPower.SupportsPowerFeedback"/> is true.</para>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IPower3">
            <summary>
            Provides press and hold functionality for power operations on the device.
            By default IR drivers will use the defined action when instructing the IR port to send data and
            non-IR drivers will invoke <see cref="M:Crestron.RAD.Common.Interfaces.IPower.PowerOn"/> once for <see cref="F:Crestron.RAD.Common.Enums.CommandAction.None"/> 
            and <see cref="F:Crestron.RAD.Common.Enums.CommandAction.Hold"/>. No action will be performed by default 
            for <see cref="F:Crestron.RAD.Common.Enums.CommandAction.Release"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IPower3.PowerOn(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Adds press and hold functionality to <see cref="M:Crestron.RAD.Common.Interfaces.IPower.PowerOn"/>.
            </summary>
            <param name="action">Allows choice of None (press + release), Hold (press), and Release (release).</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IPower3.PowerOff(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Adds press and hold functionality to <see cref="M:Crestron.RAD.Common.Interfaces.IPower.PowerOff"/>.
            </summary>
            <param name="action">Allows choice of None (press + release), Hold (press), and Release (release).</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IPower3.Power(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Adds press and hold functionality to <see cref="M:Crestron.RAD.Common.Interfaces.IPower.PowerToggle"/>.
            </summary>
            <param name="action">Allows choice of None (press + release), Hold (press), and Release (release).</param>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ISpeakerProtect">
            <summary>
            Allows for controlling the speaker protect setting on a device and getting feedback about its current state.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SupportsSpeakerProtectFeedback">
            <summary>
            Indicates if <see cref="P:Crestron.RAD.Common.Interfaces.ISpeakerProtect.IsSpeakerProtectOn"/> is supported by this driver and will show feedback.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ISpeakerProtect.IsSpeakerProtectOn">
            <summary>
            Indicates the current speaker protect state of the device.
            <para>This is supported when <see cref="P:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SupportsSpeakerProtectFeedback"/> is true.</para>
            </summary>  
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SupportsDiscreteSpeakerProtect">
            <summary>
            Indicates support for <see cref="M:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SpeakerProtectOn"/> and <see cref="M:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SpeakerProtectOff"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SupportsSpeakerProtectToggle">
            <summary>
            Indicates support for <see cref="M:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SpeakerProtectToggle"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SpeakerProtectOn">
            <summary>
            Turns speaker protect on on the device.
            <para>This is only supported if <see cref="P:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SupportsDiscreteSpeakerProtect"/> is true.</para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SpeakerProtectOff">
            <summary>
            Turns speaker protect off on the device.
            <para>This is only supported if <see cref="P:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SupportsDiscreteSpeakerProtect"/> is true.</para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SpeakerProtectToggle">
            <summary>
            Toggles speaker protect on the device.
            <para>This is only supported if <see cref="P:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SupportsSpeakerProtectToggle"/> is true.</para>
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.ISpeakerProtect.IsSpeakerProtectOnChanged">
            <summary>
            Indicates a change in state for <see cref="P:Crestron.RAD.Common.Interfaces.ISpeakerProtect.IsSpeakerProtectOn"/>.
            <para>This will only be invoked if <see cref="P:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SupportsSpeakerProtectFeedback"/> is true.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ISurround2.SurroundModeStringIs">
            <summary>
            Gets the Surround Mode String as returned by the connected device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ISurround.SupportsSurroundModeFeedback">
            <summary>
            Property indicating that the surround mode feedback is supported
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ISurround.SurroundMode">
            <summary>
            Gets the current surround mode name
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ISurround.SupportedSurroundModes">
            <summary>
            Gets the list of supported surround modes
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ISurround.ChangeSurroundMode(Crestron.RAD.Common.Enums.SurroundModeType)">
            <summary>
            Method used to set a specific surround mode index from the list
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ISurround.SupportsSurroundModeCycle">
            <summary>
            Property indicating that the surround mode cycle is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ISurround.SurroundModeCycle">
            <summary>
            Method to send the surround mode cycle command to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ITuner.SupportsTunerFeedback">
            <summary>
            Property indicating the Feedback is supported
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ITuner.Tuner">
            <summary>
            Gets the tuner frequency
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ITuner.SupportsChangeFrequency">
            <summary>
            Property indicating that the change frequency command is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ITuner.FrequencyDown(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Method to send the frequency down command to the device
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ITuner.FrequencyUp(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Method to send the frequency up command to the device
            </summary>
            <param name="action"></param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ITuner.SupportsSetFrequency">
            <summary>
            Property indicating that the supports set frequency command is supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ITuner.SetSpecificFrequency(System.String)">
            <summary>
            Method to tune the device to a specific frequency
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ITuner.SupportsAutoFrequency">
            <summary>
            property indicating that the auto tune frequency up down commands are supported
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ITuner.AutoFrequencyDown(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Method to send the auto frequency down command to the device
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ITuner.AutoFrequencyUp(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Method to send the auto frequency up command to the device
            </summary>
            <param name="action"></param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ITuner.SupportsFrequencyBand">
            <summary>
            Property indicating that the frequency band command is supported by the device
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ITuner.FrequencyBand">
            <summary>
            Method to send the frequency band command to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ITuner.SupportsDiscreteFrequencyBand">
            <summary>
            Property indicating that the discrete frequency AM and FM commands are supported by the device
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ITuner.FrequencyBandAm">
            <summary>
            Method to send the discrete frequency band AM command to the device
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ITuner.FrequencyBandFm">
            <summary>
            Method to send the discrete frequency band FM command to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ITuner.MaxNumPresets">
            <summary>
            Property returning the maximum number of presets that the device supports
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ITuner.SupportsChangePreset">
            <summary>
            Property used to indicate that the device supports preset up/down functionality
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ITuner.PresetUp(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Method used to send the Preset Up command to the device
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ITuner.PresetDown(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Method used to send the Preset Down command to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ITuner.SupportsPresetRecall">
            <summary>
            Property indicating that the device supports preset recall
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ITuner.PresetRecall(System.UInt32)">
            <summary>
            Method used to send the recall preset command to the device
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ITuner.SupportsPresetStore">
            <summary>
            Property indicating that the device suppports store preset command
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ITuner.PresetStore(System.UInt32)">
            <summary>
            Method used to send the store preset command to the device
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IVideoConfiguration.DisplayModes">
            <summary>
            Returns a list of display modes supported by the driver
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IVideoConfiguration.SupportsDisplayModes">
            <summary>
            Specifies if this component interface is supported by the driver
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IVideoConfiguration.SelectDisplayMode(System.String)">
            <summary>
            Sets the current display mode of the device
            </summary>
            <param name="displayModeKey">The ID value (Id) from the DisplayMode object</param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IVolume.SupportsVolumePercentFeedback">
            <summary>
            Property indicating that the device supports Volume Feedback in the percentage format.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IVolume.VolumePercent">
            <summary>
            Gets the Device volume.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IVolume.SupportsVolumeDbFeedback">
            <summary>
            Property indicating that the device supports Volume Feedback in the DB format.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IVolume.VolumeDb">
            <summary>
            Gets the Device volume.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IVolume.SupportsMuteFeedback">
            <summary>
            Property indicating that the device supports Mute Feedback.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IVolume.Muted">
            <summary>s
            Gets the current Mute state.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IVolume.SupportsDiscreteMute">
            <summary>
            Property indicating that the device supports Mute On and Mute Off.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IVolume.MuteOn">
            <summary>
            Method to mute the Device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IVolume.MuteOff">
            <summary>
            Method to unmute the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IVolume.SupportsMute">
            <summary>
            Property indicating that the device supports Mute.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IVolume.Mute">
            <summary>
            Method to send the Mute command to the Device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IVolume.SupportsSetVolume">
            <summary>
            Property indicating that the device supports Set Volume.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IVolume.SetVolume(System.UInt32)">
            <summary>
            Method to turn the Device volume to a given percentage.
            </summary>
            <param name="volume">The pecentage to set the volume to.</param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IVolume.SupportsChangeVolume">
            <summary>
            Property indicating that the device supports Set Volume Up and Volume Down.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IVolume.VolumeUp(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Method to turn the Device volume up one step.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IVolume.VolumeDown(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            Method to turn the Device volume down one step.
            </summary>
            <param name="action">Indicates if command should be pressed, held, or released</param>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IVolume2">
            <summary>
            Extension of <see cref="T:Crestron.RAD.Common.Interfaces.IVolume"/> to provide events for properties changing.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IVolume2.VolumePercentChanged">
            <summary>
            Indicates a change in state for <see cref="P:Crestron.RAD.Common.Interfaces.IVolume.VolumePercent"/>.
            <para>This will only be invoked if <see cref="P:Crestron.RAD.Common.Interfaces.IVolume.SupportsVolumePercentFeedback"/> is true.</para>
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IVolume2.VolumeDbChanged">
            <summary>
            Indicates a change in state for <see cref="P:Crestron.RAD.Common.Interfaces.IVolume.VolumeDb"/>.
            <para>This will only be invoked if <see cref="P:Crestron.RAD.Common.Interfaces.IVolume.SupportsVolumeDbFeedback"/> is true.</para>
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IVolume2.MutedChanged">
            <summary>
            Indicates a change in state for <see cref="P:Crestron.RAD.Common.Interfaces.IVolume.Muted"/>.
            <para>This will only be invoked if <see cref="P:Crestron.RAD.Common.Interfaces.IVolume.SupportsMuteFeedback"/> is true.</para>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IAudioVideoExtender">
            <summary>
            An audio/video extender that could be a transmitter, a receiver, a card on the main AV switcher, or a switcher.
            Each extender can have physical connectors for transmitting/receive video/audio, it can have multiple 
            ports for interacting with third-party devices connected to this extender, and it can have 
            its own set of routable inputs/outputs.
            
            <para>Extenders will not allow switching locally unless <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Type"/> returns 
            <see cref="F:Crestron.RAD.Common.Enums.AudioVideoExtenderType.IndirectInputWithSwitching"/> or 
            <see cref="F:Crestron.RAD.Common.Enums.AudioVideoExtenderType.IndirectOutputWithSwitching"/>.</para>
            
            <para>For flexibility, the virtual ports will be a part of the extender and not the nested audio/video
            inputs/outputs since the third-party API will be used to send data to specific locations and they could be
            used for any input/output.</para>
            
            <para>No operations, including, can be done while the main AudioVideoSwitcher is in an off state if power
            feedback is supported.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Id">
            <summary>
            Unique ID of this extender.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Name">
            <summary>
            Friendly name of this extender based on the third-party device's labels on the physical devices.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Manufacturer">
            <summary>
            The extender's manufacturer's name. In most cases this will be the same manufacturer specified by the driver,
            but in some cases a third-party extender could be used.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Model">
            <summary>
            The extender's model name.
            <para>This will return null when <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Type"/> is
            <see cref="F:Crestron.RAD.Common.Enums.AudioVideoExtenderType.DirectInput"/> or <see cref="F:Crestron.RAD.Common.Enums.AudioVideoExtenderType.DirectOutput"/> 
            since it would be on the parent switcher device and not some connected extender.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Type">
            <summary>
            Specifies what kind of extender this is. 
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.VideoSourceExtenderId">
            <summary>
            Specifies the ID <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Id"/> of the input currently routed to this output.
            <para>Return null or an empty string when there is nothing routed to this output.</para>
            <para>This is only set if the <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Type"/> specifies an output.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.AudioSourceExtenderId">
            <summary>
            Specifies the ID <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Id"/> of the input currently routed to this output.
            <para>Return null or an empty string when there is nothing routed to this output.</para>
            <para>This is only set if the <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Type"/> specifies an output.</para>
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.VideoSourceExtenderIdChanged">
            <summary>
            Indicates a change to <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.VideoSourceExtenderId"/>.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.AudioSourceExtenderIdChanged">
            <summary>
            Indicates a change to <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.AudioSourceExtenderId"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.AudioInputDetails">
            <summary>
            Specifies the availble physical connectors on this extender device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.AudioOutputDetails">
            <summary>
            Specifies the availble physical connectors on this extender device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.VideoInputDetails">
            <summary>
            Specifies the availble physical connectors on this extender device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.VideoOutputDetails">
            <summary>
            Specifies the availble physical connectors on this extender device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Ports">
            <summary>
            Specifies the ports this extender device could utilize.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.AudioIsClipping">
            <summary>
            Current output clipping state.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.SupportsAudioIsClippingFeedback">
            <summary>
            Indicates if <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.AudioIsClipping"/> is supported by this driver and will show feedback.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.AudioIsClippingChanged">
            <summary>
            Indicates a change in state for <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.AudioIsClipping"/>.
            <para>This will only be invoked if <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.SupportsAudioIsClippingFeedback"/> is true.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.DcFaultState">
            <summary>
            Current output DC fault state.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.SupportsDcFaultStateFeedback">
            <summary>
            Indicates if <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.DcFaultState"/> is supported by this driver and will show feedback.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.DcFaultStateChanged">
            <summary>
            Indicates a change in state for <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.DcFaultState"/>.
            <para>This will only be invoked if <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.SupportsDcFaultStateFeedback"/> is true.</para>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IAudioVideoSwitcher">
            <summary>
            Represents a third-party audio/video switcher device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitcher.AudioVideoSwitcherId">
            <summary>
            A unique identifier for this switcher.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities">
            <summary>
            Defines the features needed for switching AV inputs and outputs
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.AutoDetectConfiguration">
            <summary>
            Specifies if this driver is able to determine what the available routable inputs and outputs are.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.GetRoutableOutputs">
            <summary>
            Returns the currently detected/set output extenders on the device 
            that inputs returned by <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.GetRoutableInputs"/> can be routed 
            to using <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.RouteVideoInput(System.String,System.String)"/> and/or <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.RouteAudioInput(System.String,System.String)"/>.
            If the device does not support audio-breakaway, then both of those methods will perform
            the same function and throw their respective events.
            <para>Returns null if there is no option to route inputs to outputs</para>
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.RoutableOutputsChanged">
            <summary>
            Raised when the list of routable outputs has changed.
            <para>
            Presumably, subscribers of this event will have called <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.GetRoutableOutputs"/> method once to
            retrieve a copy of the list of members. Based on the arguments of this event, the subscribers
            can then update their copy of the list without asking this device for the full list again
            (unless the event was a <see cref="F:Crestron.RAD.Common.Events.ListChangedAction.Reset"/>; In that case, the full list would
            need to be retrieved again anyway).
            </para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.GetRoutableInputs">
            <summary>
            Returns the current detected/set input extenders on the device that can be routed to the
            outputs returned by <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.GetRoutableInputs"/> using <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.RouteVideoInput(System.String,System.String)"/> 
            and/or <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.RouteAudioInput(System.String,System.String)"/>.
            If the device does not support audio-breakaway, then both of those methods will perform
            the same function and throw their respective events.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.RoutableInputsChanged">
            <summary>
            Raised when the list of routable inputs has changed.
            <para>
            Presumably, subscribers of this event will have called <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.GetRoutableInputs"/> method once to
            retrieve a copy of the list of members. Based on the arguments of this event, the subscribers
            can then update their copy of the list without asking this device for the full list again
            (unless the event was a <see cref="F:Crestron.RAD.Common.Events.ListChangedAction.Reset"/>; In that case, the full list would
            need to be retrieved again anyway).
            </para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.RouteVideoInput(System.String,System.String)">
            <summary>
            Routes video from the specified input to the specified output. This will route both audio and video if 
            audio-breakaway is not support on the device.
            
            <para>To clear the route, specify null for the input.</para>
            </summary>
            <param name="inputId"><see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Id"/></param>
            <param name="outputId"><see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Id"/></param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.RouteAudioInput(System.String,System.String)">
            <summary>
            Routes audio from the specified input to the specified output. This will route both audio and video if 
            audio-breakaway is not support on the device.
            
            <para>To clear the route, specify null for the input.</para>
            </summary>
            <param name="inputId"><see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Id"/></param>
            <param name="outputId"><see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Id"/></param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.SupportsAudioBreakaway">
            <summary>
            Specifies if this switching device supports routing audio and video from different input extenders
            to one extender output.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.SetOutputExtender(System.UInt32,Crestron.RAD.Common.Interfaces.IAudioVideoExtender)">
            <summary>
            This can be used to switch out defined outputs with a compatiable ones. 
            For example, if a 3x1 HDMI switcher was going to be connected via HDMI1 to Output3, then
            the application should call this method updating the driver stating that HDMI1 is now a different
            extender.
            <para>If the driver can't detect HDBaseT extenders, then the application would use this to tell the driver
            which compatible extender is being used on the output.</para>
            </summary>
            <param name="index">Index being modified of the collection returned by <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.GetRoutableOutputs"/>.</param>
            <param name="compatibleExtender">An extender retrieved from <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.CompatibleOutputs"/>.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.SetInputExtender(System.UInt32,Crestron.RAD.Common.Interfaces.IAudioVideoExtender)">
            <summary>
            This can be used to switch out defined inputs with a compatiable ones. 
            </summary>
            <param name="index">Index being modified of the collection returned by <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.GetRoutableInputs"/>.</param>
            <param name="compatibleExtender">An extender retrieved from <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.CompatibleInputs"/>.</param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.CompatibleOutputs">
            <summary>
            Returns a list of output extenders that could be used on this system.
            Every extender will list its input/output connectors as well as any inputs/outputs that 
            are routable on it exclusivly. 
            <para>This is intended to be used in conjuction with <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.SetOutputExtender(System.UInt32,Crestron.RAD.Common.Interfaces.IAudioVideoExtender)"/>.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.CompatibleInputs">
            <summary>
            Returns a list of input extenders that could be used on this system
            <para>This is intended to be used in conjuction with <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.SetInputExtender(System.UInt32,Crestron.RAD.Common.Interfaces.IAudioVideoExtender)"/>.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IClassDefinition">
            <summary>
            Defines a class for an extension device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IClassDefinition.ClassName">
            <summary>
            The name of the class, similar to the name of a class in object-oriented programming.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IClassDefinition.Properties">
            <summary>
            A dictionary of properties that belong to this class.
            <para>
            Key - <see cref="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyDefinition.Key"/>
            </para>
            <para>
            Value - <see cref="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyDefinition"/>
            </para>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice">
            <summary>
            An interface to define a device with a custom UI.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.Properties">
            <summary>
            Contains all of the property definitions for this device by <see cref="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyDefinition.Key"/>.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.PropertyDefinitionChanged">
            <summary>
            Raised if any <see cref="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyDefinition"/> in <see cref="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.Properties"/> is modified, added, or removed.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.PropertyValues">
            <summary>
            Contains all of the property values for this device by <see cref="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue.Id"/>.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.PropertyValuesChanged">
            <summary>
            Raised when any <see cref="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue"/> in <see cref="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.PropertyValues"/> is modified or added.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.PropertyValuesRemoved">
            <summary>
            Raised when any <see cref="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue"/> in <see cref="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.PropertyValues"/> is removed.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.DoCommand(System.String,System.String[])">
            <summary>
            Send a command to the device.
            </summary>
            <param name="command">The name of the command to send.</param>
            <param name="parameters">The parameters that are required for the command.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.SetDriverPropertyValue``1(System.String,``0)">
            <summary>
            Set the value of an <see cref="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue"/> on this device.
            </summary>
            <param name="propertyId">The <see cref="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue.Id"/> of the property value.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.GetUiDefinition">
            <summary>
            Retrieves the UI definition for this device.
            </summary>
            <returns>A string value containing the xml used to define the custom user interface for this device.</returns>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.UiDefinitionChanged">
            <summary>
            Raised when the ui definition is modified. See <see cref="M:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.GetUiDefinition"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.GetSupportedCultures">
            <summary>
            Retrieves all cultures supported by this device.
            <para>
            The format of the returned strings are "languagecode2-country/regioncode2" as defined by
            the ISO 639-1 standard and the ISO 3166 standard.
            </para>
            <para>
            For example, "en-US" for English in the United States.
            </para>
            </summary>
            <returns>A list of cultures.</returns>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.SupportedCulturesChanged">
            <summary>
            Raised when a supported culture is added or removed. See <see cref="M:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.GetSupportedCultures"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.GetLanguageTranslations(System.String)">
            <summary>
            Retrieves all the translated strings used by this device for the provided culture.
            </summary>
            <param name="culture">
            Specifies the language code and country region code to be retrieved.
            The string must formatted as the "languagecode2" as defined by the ISO 639-1 standard,
            followed by a hyphen and then the "country/regioncode2" as defined by the ISO 3166 standard.
            <para>
            For example, "en-US" for English in the United States.
            </para>
            <para>
            If the specified culture is not supported, this will return English, and if English is not supported then
            this will return the first language that is found in the driver. If there are no language translations
            then this will return null.
            </para>
            </param>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.LanguageTranslationsChanged">
            <summary>
            Raised when any language translation is modified, added, or removed. See <see cref="M:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.GetLanguageTranslations(System.String)"/>.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IOperationResult">
            <summary>
            Defines a result for an operation on an <see cref="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IOperationResult.ResultCode">
            <summary>
            Indicates the result of the operation.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IOperationResult.UserMessage">
            <summary>
            Message to be displayed to the user providing more detailed information about the result.
            <para>
            NOTE: This property is only used if the result code is <see cref="F:Crestron.RAD.Common.Interfaces.ExtensionDevice.OperationResultCode.Error"/>.
            </para>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.OperationResultCode">
            <summary>
            The result of the operation.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Interfaces.ExtensionDevice.OperationResultCode.Uninitialized">
            <summary>
            The result has not been initialized.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Interfaces.ExtensionDevice.OperationResultCode.Success">
            <summary>
            The operation has succeeded.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Interfaces.ExtensionDevice.OperationResultCode.Error">
            <summary>
            The operation resulted in an error.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyAvailableValue">
            <summary>
            Represents a value that an <see cref="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue"/> can be set to.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyAvailableValue.Label">
            <summary>
            The user visible label of the availbale value. If a <see cref="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyAvailableValue.LabelLocalizationKey"/> is provided then the translated string will be prioritized
            over the label.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyAvailableValue.LabelLocalizationKey">
            <summary>
            Key to look up the user visible translation for this value in the translation dictionary.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyAvailableValue.Enabled">
            <summary>
            True if this value can be selected in UI, false if this value can not be selected.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyAvailableValue`1">
            <summary>
            Represents a value that an <see cref="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue"/> can be set to.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyAvailableValue`1.Value">
            <summary>
            The internal value that the device will receive, does not appear in the UI 
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyDefinition">
            <summary>
            The definition of a property on an <see cref="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice"/>.
            <para>
            To get the value of this property see <see cref="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue"/>.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyDefinition.Key">
            <summary>
            Identification key for this property.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyDefinition.NameLocalizationKey">
            <summary>
            Key used for looking up the property name in the translation dictionary.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyDefinition.Type">
            <summary>
            Indicates the type of the property.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyDefinition.SubType">
            <summary>
            This is only used for properties of Type <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.Object"/> or <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.ObjectList"/>.
            <para>
            For an <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.Object"/>, this is the type that the object is. See <see cref="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IClassDefinition.ClassName"/>.
            </para>
            <para>
            For an <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.ObjectList"/>, this is the type the the list contains. See <see cref="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IClassDefinition.ClassName"/>.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyDefinition.AssociatedClass">
            <summary>
            Stores the type of the object that this property belongs to. See <see cref="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IClassDefinition.ClassName"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyDefinition.AvailableValues">
            <summary>
            If not null, this is the list of valid values that this property can be set to, otherwise, this property can be set to any value.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyDefinition.MinValue">
            <summary>
            The minimum value that this property can be set to.
            <para>
            For numeric types, this is the minimum numeric value, and for strings, this is the minimum length of the string.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyDefinition.MaxValue">
            <summary>
            The maximum value that this property can be set to.
            <para>
            For numeric types, this is the maximum numeric value, and for strings, this is the maximum length of the string.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyDefinition.StepSize">
            <summary>
            The increment size that this property can be set to starting at <see cref="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyDefinition.MinValue"/> and ending at <see cref="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyDefinition.MaxValue"/>.
            <para>
            This is only valid for numeric types.
            </para>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue">
            <summary>
            The value of an <see cref="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyDefinition"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue.Id">
            <summary>
            A unique identifier to a specific instance of a property value.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue.DefinitionKey">
            <summary>
            Indicates the definition of this property value. See <see cref="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyDefinition.Key"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue.Type">
            <summary>
            Represents the type of this property value. The type is based on the <see cref="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyDefinition.Type"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue.Enabled">
            <summary>
            Indicates if the property is currently enabled. If false, the value should not be selectable or editable by the user.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue.IsValueAvailable">
            <summary>
            Indicates if the property Value is currently available. If false, the current value of <see cref="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue`1.Value"/> should be ignored. 
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue.IsRootProperty">
            <summary>
            True if this property is a root property, meaning that it does not have a parent.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue.MemberIds">
            <summary>
            Contains the Id's of the children to this property.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue`1">
            <summary>
            The value of a basic property on an <see cref="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice"/> (int, string, bool, etc.).
            </summary>
            <typeparam name="T">The type of the property</typeparam>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue`1.Value">
            <summary>
            The current value of the property.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyObjectValue">
            <summary>
            The value of an object property on an <see cref="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyObjectValue.SubType">
            <summary>
            The name of the class used to represent this property. See <see cref="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IClassDefinition.ClassName"/>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyListValue">
            <summary>
            The value of a list property on an <see cref="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyListValue.SubType">
            <summary>
            The name of the class that this list contains. See <see cref="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IClassDefinition.ClassName"/>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IConfigurableDevice">
            <summary>
            Represents a device that has a configuration
            <para>
            Pool controllers would be devices that have a configuration, because they can have multiple parts and pools that can be changed.
            Security system would also have a configuration because the sensors, zones, and alarms can be changed.
            </para>
            <para>
            If a driver has a concept of a configuration, but there are reasons why it can't poll for this data either because 
            there is too much polling, or there is too much parsing to do at the regular polling interval, then it must
            state that <see cref="P:Crestron.RAD.Common.Interfaces.IConfigurableDevice.SupportsConfigurationUpdate"/> is false. Applications are then expected to call <see cref="!:Reconnect"/> 
            to get the latest configuration.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IConfigurableDevice.SupportsConfigurationUpdate">
            <summary>
            Indicates if the driver is able to detect configuration changes on the device.
            <para>
            This will be null if the feature is not applicable to a device.
            This will be true if the driver is able to detect configuration changes and will report the changes
            This will be false if the driver not able to detect configuration changes, and <see cref="!:Reconnect"/>
            must be called to get the new configuration.
            </para>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IDevicePreset">
            <summary>
            Defines a device preset (which sets one or more devices into a preconfigured state).
            A device preset may affect only the owning device or many devices in this device's ecosystem.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDevicePreset.Id">
            <summary>
            ID of the preset (assigned by the device or its ecosystem).
            <para>
            Uniqueness is only guaranteed within the owning device.
            If the owning device is the primary controller of an entire ecosystem,
            this ID would be unique across all the devices provided by that ecosystem.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDevicePreset.Name">
            <summary>
            Name of the preset (as configured using the device or its software).
            <para>
            Changes will be notified via the <see cref="T:Crestron.RAD.Common.Interfaces.IPresetController"/> capability's event
            <see cref="E:Crestron.RAD.Common.Interfaces.IPresetController.PresetsListChanged"/> with the action <see cref="!:ListChangedAction.Replaced"/>.
            </para>
            </summary>
            <remarks>
            NOTE: The changed event appears on the owning device interface <see cref="T:Crestron.RAD.Common.Interfaces.IPresetController"/>.
            This makes device driver implementations easier and allows consumers of these interfaces to
            have context as to which device's preset changed.
            </remarks>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDevicePreset.SupportsIsActive">
            <summary>
            Indicates if the <see cref="P:Crestron.RAD.Common.Interfaces.IDevicePreset.IsActive"/> property is supported for this preset.
            <para>
            Depending on the device capabilities affected by a preset,
            some presets may not be capable of providing feedback.
            This value can change if the device's preset is modified.
            </para>
            <para>
            Changes will be notified via the <see cref="T:Crestron.RAD.Common.Interfaces.IPresetController"/> capability's event
            <see cref="E:Crestron.RAD.Common.Interfaces.IPresetController.PresetsListChanged"/> with the action <see cref="!:ListChangedAction.Replaced"/>.
            </para>
            </summary>
            <remarks>
            NOTE: The changed event appears on the owning device interface <see cref="T:Crestron.RAD.Common.Interfaces.IPresetController"/>.
            This makes device driver implementations easier and allows consumers of these interfaces to
            have context as to which device's preset changed.
            </remarks>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDevicePreset.IsActive">
            <summary>
            Indicates if this preset is currently active.
            <para>
            In other words, this is feedback from the device indicating that either
            all devices and properties affected by this preset are at their target values
            or that this was the last preset selected.
            </para>
            <para>
            Changes will be notified via the <see cref="T:Crestron.RAD.Common.Interfaces.IPresetController"/> capability's event
            <see cref="E:Crestron.RAD.Common.Interfaces.IPresetController.PresetStateChanged"/>.
            </para>
            </summary>
            <remarks>
            NOTE: The changed event appears on the owning device interface <see cref="T:Crestron.RAD.Common.Interfaces.IPresetController"/>.
            This makes device driver implementations easier and allows consumers of these interfaces to
            have context as to which device's preset changed.
            </remarks>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDevicePreset.SupportsToggle">
            <summary>
            Indicates if calling <see cref="M:Crestron.RAD.Common.Interfaces.IPresetController.RecallPreset(System.String)"/>
            while the preset is already active will act as a toggle.
            <para>
            Depending on the device capabilities/properties affected by a preset,
            it may not be capable of toggling or it may not make sense to support toggling.
            This value can change if the device's preset is modified.
            </para>
            <para>
            Changes will be notified via the <see cref="T:Crestron.RAD.Common.Interfaces.IPresetController"/> capability's event
            <see cref="E:Crestron.RAD.Common.Interfaces.IPresetController.PresetsListChanged"/> with the action <see cref="!:ListChangedAction.Replaced"/>.
            </para>
            </summary>
            <remarks>
            NOTE: The changed event appears on the owning device interface <see cref="T:Crestron.RAD.Common.Interfaces.IPresetController"/>.
            This makes device driver implementations easier and allows consumers of these interfaces to
            have context as to which device's preset changed.
            </remarks>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDeviceProperty.ParentPropertyKey">
            <summary>
            Used to associate this property with another property
            (in addition to any <see cref="P:Crestron.RAD.Common.Interfaces.IDeviceProperty.RenderHint"/> values that imply relationships).
            <para>
            For example, a device may define 2 properties, where the 1st property is a Boolean on-off switch,
            and the 2nd property has a render hint of <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyRenderHint.Status"/> which
            indicates the status of the device turning on.
            The 2nd property will refer the 1st property key here to indicate that
            it is associated with the 1st property.
            </para>
            <para>
            Another example would be if a device had 2 sets of setpoints
            (i.e. 2 properties with <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyRenderHint.SetpointTarget"/> and
            another 2 properties <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyRenderHint.SetpointActual"/>).
            This key would indicate which target setpoint belongs with which actual setpoint (or vice-versa).
            </para>
            <para>
            This may be null if the device only contains one set of associated properties.
            Using the above example, if a device only has one target and one actual setpoint property,
            the relationship is already implied by the render hint.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDeviceProperty.State">
            <summary>
            Indicates the state of this property.
            This may change based on the values of other properties.
            <para>
            Changes will be notified via the <see cref="T:Crestron.RAD.Common.Interfaces.IDeviceWithProperties"/> capability's event
            <see cref="E:Crestron.RAD.Common.Interfaces.IDeviceWithProperties.PropertyStateChanged"/>.
            </para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IDeviceProperty.GetValue``1">
            <summary>
            Retrieves the value of this property.
            <para>
            If the requested type does not match the type referred to by <see cref="P:Crestron.RAD.Common.Interfaces.IDeviceProperty.Type"/>,
            an <see cref="T:System.InvalidCastException"/> will be thrown.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDeviceProperty`1.AvailableValues">
            <summary>
            Available values for the property;
            The property’s value can only be set to one of these.
            <para>
            In addition to being the property’s value, each ID also refers to a
            localized string that is display name of this value.
            The localized string can be retrieved via the <see cref="T:Crestron.RAD.Common.Interfaces.ILocalizedDevice"/> capability.
            </para>
            <para>
            Also, based on the <see cref="P:Crestron.RAD.Common.Interfaces.IDeviceProperty.RenderHint"/>, this may also contain labels
            for each value defined by <see cref="P:Crestron.RAD.Common.Interfaces.IDeviceProperty`1.MinValue"/> through <see cref="P:Crestron.RAD.Common.Interfaces.IDeviceProperty`1.MaxValue"/>.
            For example, if the value range is 0 to 3, this may define the labels for those
            values as "Off", "Slow", "Medium" and "Fast", respectively.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDeviceProperty`1.Value">
            <summary>
            Current value of this property.
            <para>
            Changes will be notified via the <see cref="T:Crestron.RAD.Common.Interfaces.IDeviceWithProperties"/> capability's event
            <see cref="!:IDeviceWithProperties.PropertyChanged"/>.
            </para>
            </summary>
            <remarks>
            The changed event appears on the owning device interface <see cref="T:Crestron.RAD.Common.Interfaces.IDeviceWithProperties"/>.
            This makes device driver implementations easier and allows consumers of these interfaces to
            have context as to which device's property changed.
            </remarks>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDeviceProperty`1.MinValue">
            <summary>
            Minimum value allowed for numeric values; For strings, minimum length.
            Not applicable for all other non-numeric values.
            </summary>
            <seealso cref="T:System.Type"/>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDeviceProperty`1.MaxValue">
            <summary>
            Maximum value allowed for numeric values; For strings, maximum length.
            Not applicable for all other non-numeric values.
            </summary>
            <seealso cref="T:System.Type"/>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDeviceProperty`1.StepSize">
            <summary>
            Amount to increment or decrement the value at a time;
            Applicable only when the <see cref="P:Crestron.RAD.Common.Interfaces.IDeviceProperty.Type"/> refers to a numeric value.
            <para>
            If the type is <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.Float"/> or <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.Double"/>,
            this also defines the precision of the floating point value.
            </para>
            <para>
            For example, if this value is 0.2, it would mean valid values could be 0, 0.2, 0.4, etc...
            Any invalid values passed to the <see cref="M:Crestron.RAD.Common.Interfaces.IDeviceWithProperties.SetValue``1(System.String,``0)"/> method
            will be adjusted to the nearest valid value in the direction the value is being adjusted.
            </para>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IDevicePropertyAvailableValue`1">
            <summary>
            Defines one available value for use with an <see cref="T:Crestron.RAD.Common.Interfaces.IDeviceProperty`1"/> instance.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDevicePropertyAvailableValue`1.Value">
            <summary>
            The underlying property value to be set when this available value is chosen.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IDevicePropertyAvailableValue">
            <summary>
            Defines one available value for use with an <see cref="T:Crestron.RAD.Common.Interfaces.IDeviceProperty`1"/> instance.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDevicePropertyAvailableValue.LocalizedCategoryNameId">
            <summary>
            ID referring to the localized name of the category to which this property value belongs;
            This will be 0 if this value does not belong to any category.
            <para>
            This ID should not be persisted by any consuming code.
            It is only for display/categorization purposes for the current instance of the running program/app.
            </para>
            <para>
            When "available values" are intended to be displayed with other
            similar "available values", they will all have the same category name.
            For example, if this value is the color "Red", this category name may be "Primary Colors".
            There may be another value named "Purple" and its category name would be "Secondary Colors".
            </para>
            <para>
            When displaying a mix of categorized and uncategorized values,
            it is recommended that the uncategorized values be shown last,
            possibly in their own category named "Uncategorized" or "Other", for example.
            </para>
            </summary>
            <remarks>
            This localized string can be retrieved from the device via the interface <see cref="T:Crestron.RAD.Common.Interfaces.ILocalizedDevice"/>.
            </remarks>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDevicePropertyAvailableValue.LocalizedNameId">
            <summary>
            ID referring to the localized display name of this property value.
            </summary>
            <remarks>
            This localized string can be retrieved from the device via the interface <see cref="T:Crestron.RAD.Common.Interfaces.ILocalizedDevice"/>.
            </remarks>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IDevicePropertyAvailableValue.GetValue``1">
            <summary>
            Retrieves the value of this property.
            <para>
            If the requested type does not match the type referred to by <see cref="T:System.Type"/>,
            an <see cref="T:System.InvalidCastException"/> will be thrown.
            </para>
            <para>
            The only other allowed type is "object", with the caveat that it will cause value types to be boxed.
            </para>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IDeviceScene">
            <summary>
            Defines a device scene.
            A device scene may affect only the owning device or many devices in this device's ecosystem.
            </summary>
            <dev>
            IMPORTANT: This interface intentionally defines an immutable object.
            In other words, there are no methods or property setters.
            <para>
            For ease of implementation and for thread-safety, we want to force consumers
            to go through the device capability itself and not each individual scene.
            If we allow editing through this interface, it makes device driver implementations
            more difficult as well as subsystem code (as subsystems would then have to wrap each
            property to ensure it is being called on that subsystem's thread).
            </para>
            <para>
            The above statement appears as a dev-only comment because it is specific to the
            way we have implemented subsystems in our Tools.Runtime codebase.
            </para>
            </dev>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDeviceScene.Id">
            <summary>
            ID of the scene (assigned by the device or its ecosystem).
            <para>
            Uniqueness is only guaranteed within the owning device.
            If the owning device is the primary controller of an entire ecosystem,
            this ID would be unique across all the devices provided by that ecosystem.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDeviceScene.Name">
            <summary>
            Name of the scene (as configured using the device or its software).
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDeviceScene.SupportsIsActive">
            <summary>
            Indicates if the <see cref="P:Crestron.RAD.Common.Interfaces.IDeviceScene.IsActive"/> property is supported for this scene.
            <para>
            Depending on the device capabilities affected by a scene,
            some scenes may not be capable of providing feedback.
            This value can change if the device's scene is modified.
            </para>
            </summary>
            <remarks>
            NOTE: The changed event appears on the owning device interface <see cref="!:ISceneController"/>.
            This makes implementation easier and allows consumers of these interfaces to
            have context as to which device's scene changed.
            </remarks>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IDeviceScene.IsActive">
            <summary>
            Indicates if this scene is currently active.
            </summary>
            <remarks>
            NOTE: The changed event appears on the owning device interface <see cref="!:ISceneController"/>.
            This makes implementation easier and allows consumers of these interfaces to
            have context as to which device's scene changed.
            </remarks>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IDeviceWithProperties.PropertyStateChanged">
            <summary>
            Raised when any non-value portion of a property has changed.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ILocalizedDevice">
            <summary>
            Interface to be implemented by a device that implements one or more component interfaces
            that return strings that are intended to be displayed to the user and need to be localized.
            <para>
            Some component interfaces will return a string identifier that should then be
            resolved using this interface.
            </para>
            </summary>      
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ILocalizedDevice.GetSupportedCultures">
            <summary>
            Retrieves all cultures supported by this device.
            See the <see cref="M:Crestron.RAD.Common.Interfaces.ILocalizedDevice.GetLocalizedStrings(System.String)"/> method for more information
            about the format of each culture string.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ILocalizedDevice.GetLocalizedStrings(System.String)">
            <summary>
            Retrieves all the localized strings (and their IDs) used by this device.
            </summary>
            <param name="culture">
            Specifies the language code and country region code to be retrieved.
            The string must formatted as the "languagecode2" as defined by the ISO 639-1 standard,
            followed by a hyphen and then the "country/regioncode2" as defined by the ISO 3166.
            <para>
            For example, "en-US" for English in the United States.
            </para>
            <para>
            If the specified culture is not supported, this will return null.
            </para>
            </param>
            <para>
            Keys of 0 are not supported.
            Any property that returns 0 as a localized string ID indicates an empty string.
            </para>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IPresetController">
            <summary>
            Interface to be implemented by a device
            which supports a list of presets (a.k.a. macros or scenes)
            that can be executed to change several aspects of one or more devices.
            <para>
            Each preset may affect only this device or many devices in this device's ecosystem.
            </para>
            </summary>
            <remarks>See <see cref="T:Crestron.DeviceDrivers.API.IDeviceCapability"/> for more information about device capabilities.</remarks>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IPresetController.GetPresets">
            <summary>
            Gets the list of presets available on this device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IPresetController.RecallPreset(System.String)">
            <summary>
            Recalls/executes the preset with the specified ID
            (previously retrieved from the <see cref="M:Crestron.RAD.Common.Interfaces.IPresetController.GetPresets"/>).
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IPresetController.PresetsListChanged">
            <summary>
            Raised when the list of presets has changed.
            <para>
            Presumably, subscribers of this event will have called <see cref="M:Crestron.RAD.Common.Interfaces.IPresetController.GetPresets"/> method once to
            retrieve a copy of the list. Based on the arguments of this event, the subscribers
            can then update their copy of the list without asking this device for the full list again
            (unless the event was a <see cref="F:Crestron.RAD.Common.Events.ListChangedAction.Reset"/>; In that case, the full list would
            need to be retrieved again anyway).
            </para>
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IPresetController.PresetStateChanged">
            <summary>
            Raised when the state of a preset has changed.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IPool">
            <summary>
            Interface to be implemented by a pool, spa or other body of water
            that is contained by an <see cref="!:IPoolController"/>
            </summary>
            <remarks>See <see cref="!:IDeviceCapability"/> for more information about device capabilities.</remarks>
            <seealso cref="!:IPoolController.GetPools"/>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPool.Id">
            <summary>
            ID given by the hosting pool controller; Unique within that pool controller only.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPool.Name">
            <summary>
            Name configured using the hosting pool controller's software.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPool.Type">
            <summary>
            Known type of this pool (if any).
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPool.IsEnabled">
            <summary>
            Specifies if the pool is enabled for control
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IPool.GetParts">
            <summary>
            Gets the list of parts used to control this pool.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IPool.PoolPartsListChanged">
            <summary>
            Raised when the list of pool parts has changed.
            <para>
            Presumably, subscribers of this event will have called the <see cref="M:Crestron.RAD.Common.Interfaces.IPool.GetParts"/> method once to
            retrieve a copy of the list. Based on the arguments of this event, the subscribers
            can then update their copy of the list without asking this device for the full list again
            (unless the event was a <see cref="F:Crestron.RAD.Common.Events.ListChangedAction.Reset"/>; In that case, the full list would
            need to be retrieved again anyway).
            </para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IPool.GetSections">
            <summary>
            Gets the list of sections that either physically or logically divide this pool
            (e.g. Diving Area, Kiddie Section)
            <para>
            Each pool part's <see cref="P:Crestron.RAD.Common.Interfaces.IPoolPart.SectionId"/> property will refer to the section
            to which it belongs (if any).
            </para>
            <para>
            This will return null if the sections are not supported.
            </para>
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IPool.SectionsListChanged">
            <summary>
            Raised when the list of pool sections has changed.
            <para>
            Presumably, subscribers of this event will have called the <see cref="M:Crestron.RAD.Common.Interfaces.IPool.GetSections"/> method once to
            retrieve a copy of the list. Based on the arguments of this event, the subscribers
            can then update their copy of the list without asking this device for the full list again
            (unless the event was a <see cref="F:Crestron.RAD.Common.Events.ListChangedAction.Reset"/>; In that case, the full list would
            need to be retrieved again anyway).
            </para>
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IPool.NameChanged">
            <summary>
            Raised when the <see cref="P:Crestron.RAD.Common.Interfaces.IPool.Name"/> property has changed.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IPool.IsEnabledChanged">
            <summary>
            Raised when the <see cref="P:Crestron.RAD.Common.Interfaces.IPool.IsEnabled"/> property has changed.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IBasicPoolController">
            <summary>
            Interface to be implemented by a device
            which supports controlling one or more pools.
            </summary>
            <remarks>See <see cref="!:IDeviceCapability"/> for more information about device capabilities.</remarks>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicPoolController.GetPools">
            <summary>
            Gets the list of pools, spas, fountains or other bodies of water controlled by this device.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IBasicPoolController.PoolsListChanged">
            <summary>
            Raised when the list of pools has changed.
            <para>
            Presumably, subscribers of this event will have called <see cref="M:Crestron.RAD.Common.Interfaces.IBasicPoolController.GetPools"/> method once to
            retrieve a copy of the list of members. Based on the arguments of this event, the subscribers
            can then update their copy of the list without asking this device for the full list again
            (unless the event was a <see cref="F:Crestron.RAD.Common.Events.ListChangedAction.Reset"/>; In that case, the full list would
            need to be retrieved again anyway).
            </para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicPoolController.GetNonPoolParts">
            <summary>
            Gets the list of parts not associated with any specific pool.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IBasicPoolController.NonPoolPartsListChanged">
            <summary>
            Raised when the list of non-pool-parts has changed.
            <para>
            Presumably, subscribers of this event will have called the <see cref="M:Crestron.RAD.Common.Interfaces.IBasicPoolController.GetNonPoolParts"/> method once to
            retrieve a copy of the list. Based on the arguments of this event, the subscribers
            can then update their copy of the list without asking this device for the full list again
            (unless the event was a <see cref="F:Crestron.RAD.Common.Events.ListChangedAction.Reset"/>; In that case, the full list would
            need to be retrieved again anyway).
            </para>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IPoolPart">
            <summary>
            Interface to be implemented by a device that is one part of controlling a pool.
            </summary>
            <seealso cref="T:Crestron.RAD.Common.Interfaces.IPool"/>
            <seealso cref="M:Crestron.RAD.Common.Interfaces.IPool.GetParts"/>
            <seealso cref="!:IPoolController"/>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPoolPart.Type">
            <summary>
            Known type of this pool part (if any).
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPoolPart.Name">
            <summary>
            Name of this pool part (as configured using the hosting pool controller device or its software).
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPoolPart.SectionId">
            <summary>
            Refers to a section of the pool to which this pool part belongs;
            Null or empty if it has not been assigned a section.
            </summary>
            <seealso cref="M:Crestron.RAD.Common.Interfaces.IPool.GetSections"/>
            <seealso cref="!:PoolSection"/>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IPoolPart.NameChanged">
            <summary>
            Raised when the <see cref="P:Crestron.RAD.Common.Interfaces.IPoolPart.Name"/> property has changed.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IPoolPart.SectionIdChanged">
            <summary>
            Raised when <see cref="P:Crestron.RAD.Common.Interfaces.IPoolPart.SectionId"/> property has changed.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ICecPort">
            <summary>
            Represents a CEC port.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ICecPort.SendData(System.String,System.Object[])">
            <summary>
            Allows an application to send data directly to this port, or to link another driver's transport's send method to this one.
            </summary>
            <param name="data">The data that should be sent to the device.</param>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.ICecPort.IncomingData">
            <summary>
            Any data received by the device. 
            This should be routed to the driver that is using this object to send data to the connected device.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IDeviceComPort">
            <summary>
            Represents a COM port on a device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IDeviceComPort.SetConfiguration(Crestron.RAD.Common.Transports.ComPortSpec)">
            <summary>
            Allows an application to set the configuratioon on this port.
            </summary>
            <param name="configuration">COM port configuration</param>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IDeviceComPort.SendData(System.String,System.Object[])">
            <summary>
            Allows an application to send data directly to this port, or to link another driver's transport's send method to this one.
            </summary>
            <param name="data">The data that should be sent to the device.</param>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IDeviceComPort.IncomingData">
            <summary>
            Any data received by the device. 
            This should be routed to the driver that is using this object to send data to the connected device.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IGenericIo">
            <summary>
            Represents a generic IO port.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IGenericIo.DigitalOutputState">
            <summary>
            Gets the digital output state.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IGenericIo.DigitalInputState">
            <summary>
            Gets the current state of the digital input
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IGenericIo.AnalogInputValue">
            <summary>
            Gets the current state of the analog input. The voltage range supported by the port will be scaled to a range of 0-65535.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IGenericIo.SetDigitalOutputState(System.Boolean)">
            <summary>
            Sets the digital output state.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IGenericIo.DigitalInputStateChanged">
            <summary>
            Invoked when there are changes to <see cref="P:Crestron.RAD.Common.Interfaces.IGenericIo.DigitalInputState"/>.  
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IGenericIo.AnalogInputValueChanged">
            <summary>
            Invoked when there are changes to <see cref="P:Crestron.RAD.Common.Interfaces.IGenericIo.AnalogInputValue"/>.  
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IPort">
            <summary>
            Represents a port that exists on a device. 
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPort.Type">
            <summary>
            The type of port this is.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPort.Direction">
            <summary>
            The communication direction of this port. 
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPort.Name">
            <summary>
            A friendly name for this port.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPort.Id">
            <summary>
            A unique ID for this port
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IPort.PassThruOnly">
            <summary>
            Specifies if the virtual port is pass-thru only.
            If this is true, then it means there is no API control of this port and that the 
            device's manual should be used to determine where the hardware connection goes to allow data
            to get to this port.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IRelayPort">
            <summary>
            Represents a relay port.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IRelayPort.CurrentState">
            <summary>
            The current state of the relay. True if closed.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IRelayPort.SwitchState(System.Boolean)">
            <summary>
            Allows an application to control a relay on a device.
            </summary>
            <param name="newState">True for closing the relay.</param>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IRelayPort.CurrentStateChanged">
            <summary>
            Invoked when there are changes to <see cref="P:Crestron.RAD.Common.Interfaces.IRelayPort.CurrentState"/>.  
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ISecuritySystemZone">
            <summary>
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ISecuritySystemZone.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ISecuritySystemZone.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ISecuritySystemZone4.SupportsBypassZone">
            <summary>
            Returns true if <see cref="M:Crestron.RAD.Common.Interfaces.ISecuritySystemZone.BypassZone(System.String)"/> and <see cref="M:Crestron.RAD.Common.Interfaces.ISecuritySystemZone2.UnbypassZone(System.String)"/> is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicAvr.AvrZones">
            <summary>
            List of all zones required by this device.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IBasicAvr.StateChangedEvent">
            <summary>
            Alerts of a change in state
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer2.SupportsReplay">
            <summary>
            Property used to indicate that the device supports replay
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer2.Replay">
            <summary>
            Method used to send the Replay command to the device
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer2.SupportsColorButtons">
            <summary>
            Property indicating that the Color Buttons command is supported.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.StateChangeEvent">
            <summary>
            Alerts of a change in state.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.SupportsPlayBackStatusFeedback">
            <summary>
            Property indicating that the Play Back Status Feedback is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.PlayBackStatus">
            <summary>
            Property indicating the Play Back Status.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.SupportsTrackFeedback">
            <summary>
            Property indicating that the Track Feedback is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.TrackFeedback">
            <summary>
            Property indicating the Track Feedback.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.SupportsChapterFeedback">
            <summary>
            Property indicating that the Chapter Feedback is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.ChapterFeedback">
            <summary>
            Property indicating the Chapter Feedback.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.SupportsTrackElapsedTimeFeedback">
            <summary>
            Property indicating that the Track Elapsed Time is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.TrackElapsedTime">
            <summary>
            Property indicating the Track Elapsed Time.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.SupportsTrackRemainingTimeFeedback">
            <summary>
            Property indicating that the Track Remaining Time is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.TrackRemainingTime">
            <summary>
            Property indicating the Track Remaining Time.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.SupportsChapterElapsedTimeFeedback">
            <summary>
            Property indicating that the Chapter Elapsed Time is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.ChapterElapsedTime">
            <summary>
            Property indicating the Chapter Elapsed Time.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.SupportsChapterRemainingTimeFeedback">
            <summary>
            Property indicating that the Chapter Remaining Time is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.ChapterRemainingTime">
            <summary>
            Property indicating the Chapter Remaining Time.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.SupportsTotalElapsedTimeFeedback">
            <summary>
            Property indicating that the Total Elapsed Time is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.TotalElapsedTime">
            <summary>
            Property indicating the Total Elapsed Time.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.SupportsTotalRemainingTimeFeedback">
            <summary>
            Property indicating that the Total Remaining Time is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.TotalRemainingTime">
            <summary>
            Property indicating the Total Remaining Time.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.SupportsAudio">
            <summary>
            Property indicating that the Audio command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.Audio">
            <summary>
            Method to send the audio command to the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.ColorButtonsSupported">
            <summary>
            Property indicating which Color Buttons are supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.ColorButton(Crestron.RAD.Common.Enums.ColorButtons)">
            <summary>
            Method to send a color to the device.
            </summary>
            <param name="color">The color to send to the device.</param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.SupportsDisplay">
            <summary>
            Property indicating that the Display command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.Display">
            <summary>
            Method to send the display command to the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.SupportsEject">
            <summary>
            Property indicating that the Eject command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.Eject">
            <summary>
            Method to send the eject command to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.PopUpMenu">
            <summary>
            Method to send the pop up menu command to the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.SupportsPopUpMenu">
            <summary>
            Property indicating that the Pop Up Menu command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.TopMenu">
            <summary>
            Method to send the top menu command to the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.SupportsTopMenu">
            <summary>
            Property indicating that the Top Menu command is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.SupportsOptions">
            <summary>
            Property indicating that the Options command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.Options">
            <summary>
            Method to send the options command to the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.SupportsSubtitle">
            <summary>
            Property indicating that the Subtitle command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicBlurayPlayer.Subtitle">
            <summary>
            Method to send the subtitle command to the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicCableBox3.SupportsOnDemand">
            <summary>
            Property indicating that the Letter Keys command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicCableBox3.OnDemand">
            <summary>
            Method to send the On Demand command to the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicCableBox.SupportsLetterKeys">
            <summary>
            Property indicating that the Letter Keys command is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicCableBox.LetterButtonsSupported">
            <summary>
            Property indicating which Letter Buttons are supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicCableBox.LetterKeys(Crestron.RAD.Common.Enums.LetterButtons)">
            <summary>
            Method to send a letter key to the device.
            </summary>
            <param name="letterKeys">Letter to be sent.</param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicCableBox.SupportsColorButtons">
            <summary>
            Property indicating that the Color Buttons command is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicCableBox.ColorButtonsSupported">
            <summary>
            Property indicating which Color Buttons are supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicCableBox.ColorButton(Crestron.RAD.Common.Enums.ColorButtons)">
            <summary>
            Method to send a color to the device.
            </summary>
            <param name="color">The color to send to the device.</param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicCableBox.SupportsFavorite">
            <summary>
            Property indicating that the Favorite command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicCableBox.Favorite">
            <summary>
            Method to send the Favorite command to the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicCableBox.SupportsInfo">
            <summary>
            Property indicating that the Info command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicCableBox.Info">
            <summary>
            Method to send the Info command to the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicCableBox.SupportsLast">
            <summary>
            Property indicating that the Last command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicCableBox.Last">
            <summary>
            Method to send the Last command to the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicCableBox.SupportsReplay">
            <summary>
            Property indicating that the Replay command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicCableBox.Replay">
            <summary>
            Method to send the Replay command to the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicCableBox.SupportsThumbsUp">
            <summary>
            Property indicating that the Thumbs Up command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicCableBox.ThumbsUp">
            <summary>
            Method to send the Thumbs Up command to the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicCableBox.SupportsThumbsDown">
            <summary>
            Property indicating that the Thumbs Down command is supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicCableBox.ThumbsDown">
            <summary>
            Method to send the Thumbs Down command to the device.
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IBasicCableBox.StateChangeEvent">
            <summary>
            Alerts of a change in state.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicVideoDisplay6.SupportsLetterKeys">
            <summary>
            Property indicating that the Letter Keys command is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicVideoDisplay6.LetterButtonsSupported">
            <summary>
            Property indicating which Letter Buttons are supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicVideoDisplay6.LetterKeys(Crestron.RAD.Common.Enums.LetterButtons)">
            <summary>
            Method to send a letter key to the device.
            </summary>
            <param name="letterKeys">Letter to be sent.</param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicVideoDisplay6.SupportsColorButtons">
            <summary>
            Property indicating that the Color Buttons command is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicVideoDisplay6.ColorButtonsSupported">
            <summary>
            Property indicating which Color Buttons are supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicVideoDisplay6.ColorButton(Crestron.RAD.Common.Enums.ColorButtons)">
            <summary>
            Method to send a color to the device.
            </summary>
            <param name="color">The color to send to the device.</param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicVideoServer8.SupportsLetterKeys">
            <summary>
            Property indicating that the Letter Keys command is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicVideoServer8.LetterButtonsSupported">
            <summary>
            Property indicating which Letter Buttons are supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicVideoServer8.LetterKeys(Crestron.RAD.Common.Enums.LetterButtons)">
            <summary>
            Method to send a letter key to the device.
            </summary>
            <param name="letterKeys">Letter to be sent.</param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicVideoServer8.SupportsColorButtons">
            <summary>
            Property indicating that the Color Buttons command is supported.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicVideoServer8.ColorButtonsSupported">
            <summary>
            Property indicating which Color Buttons are supported.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicVideoServer8.ColorButton(Crestron.RAD.Common.Enums.ColorButtons)">
            <summary>
            Method to send a color to the device.
            </summary>
            <param name="color">The color to send to the device.</param>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.IBasicVideoServer3.SupportsReplay">
            <summary>
            Property used to indicate that the device supports replay
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.IBasicVideoServer3.Replay">
            <summary>
            Method used to send the Replay command to the device
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Interfaces.IBasicVideoServer.StateChangeEvent">
            <summary>
            Alerts of a change in state.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.IPanopto">
            <summary>
            Interface that exposes methods for interacting with a Panopto server API.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ISerial.Disconnect">
            <summary>
            Disconnects the connection
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ISerial.Reconnect">
            <summary>
            Reestablishes the connection
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ISerial.Connect">
            <summary>
            Establishes the connection
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ITcp">
            <summary>
            Transport interface used for all drivers that require a TCP connection to the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ITcp.Port">
            <summary>
            The default port used for communication specified by the driver.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ITcp.Initialize(Crestron.SimplSharp.IPAddress,System.Int32)">
            <summary>
            Initializes the driver to prepare it for communication with a device.
            <see cref="M:Crestron.RAD.Common.Interfaces.IConnection.Connect"/> must be invoked after this method for the driver to 
            connect to the device.
            </summary>
            <param name="ipAddress">The IP Address of the device that will be controlled by the driver.</param>
            <param name="port">The port that will be used by the driver.</param>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ITcp2">
            <summary>
            Capability used to allow drivers that implement ITcp to also support hostnames.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ITcp2.Initialize(System.String,System.Int32)">
            <summary>
            Initializes the driver to prepare it for communication with a device.
            </summary>
            <param name="address">The IP address or hostname of the device that will be controlled by the driver.</param>
            <param name="port">The port that will be used by the driver.</param>
        </member>
        <member name="T:Crestron.RAD.Common.Interfaces.ITcpServer">
            <summary>
            Transport interface used for all drivers that are a TCP server.
            This is not to be used generically - this is currently only supported by IP security system drivers.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Interfaces.ITcpServer.Port">
            <summary>
            The default port used for communication by the driver.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Interfaces.ITcpServer.Initialize(Crestron.RAD.Common.Enums.EthernetAdapterType,System.Int32)">
            <summary>
            Initializes the driver to prepare it for communication with a device.
            </summary>
            <param name="adapterType">The adapter that should be used by the server.</param>
            <param name="portNumber">The port that the driver should use. The default port will be used if this is less than one.</param>
        </member>
        <member name="T:Crestron.RAD.Common.AlarmState">
            <summary>
            A collection of alarms.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.AlarmState.Burglary">
            <summary>
            Indicates the state of the burglary alarm.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.AlarmState.Fire">
            <summary>
            Indicates the state of the fire alarm.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.AlarmState.Medical">
            <summary>
            Indicates the state of the medical alarm.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.AlarmState.Tamper">
            <summary>
            Indicates the state of the tamper alarm.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.AlarmState.#ctor">
            <summary>
            When an AlarmState object is initialized the states default to the unknown state.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.AudioInput">
            <summary>
            Used for Audio Inputs
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.AudioInput.#ctor(Crestron.RAD.Common.Enums.AudioConnections,Crestron.RAD.Common.Enums.AudioConnectionTypes,System.String)">
            <summary>
            Create Audio input with audio connection
            </summary>
            <param name="inputType">AudioConections</param>
            <param name="inputConnector">AudioConnectionsType</param>
            <param name="description">Description</param>
        </member>
        <member name="T:Crestron.RAD.Common.AudioOutput">
            <summary>
            Used for Audio Outputs
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.AudioOutput.#ctor(Crestron.RAD.Common.Enums.AudioConnections,Crestron.RAD.Common.Enums.AudioConnectionTypes,System.String)">
            <summary>
            Create Audio Output with audio connection
            </summary>
            <param name="outputType">AudioConections</param>
            <param name="outputConnector">AudioConnectionsType</param>
            <param name="description">Description</param>
        </member>
        <member name="M:Crestron.RAD.Common.ZoneConnectionsNode.#ctor(Crestron.RAD.Common.VideoInOut,Crestron.RAD.Common.AudioInOut)">
            <summary>
            Method used to connect all zone inputs and outputs and assign them to their zone nodes
            </summary>
            <param name="video">Pass VideoInOut from the zone</param>
            <param name="audio">Pass AudioInOut from the zone</param>
        </member>
        <member name="M:Crestron.RAD.Common.ZoneConnectionsNode.AssignZoneConnectionInputs(Crestron.RAD.Common.VideoInOut,Crestron.RAD.Common.AudioInOut)">
            <summary>
            Assign inputs node for both video and audio.
            </summary>
            <param name="node"></param>
            <param name="video"></param>
            <param name="audio"></param>
        </member>
        <member name="M:Crestron.RAD.Common.ZoneConnectionsNode.AssignZoneVideoInputs(Crestron.RAD.Common.VideoInOut)">
            <summary>
            Assign inputs for video.
            </summary>
            <param name="node"></param>
            <param name="video"></param>
        </member>
        <member name="M:Crestron.RAD.Common.ZoneConnectionsNode.AssignZoneAudioInputs(Crestron.RAD.Common.AudioInOut)">
            <summary>
            Assign inputs for audio.
            </summary>
            <param name="node"></param>
            <param name="audio"></param>
        </member>
        <member name="M:Crestron.RAD.Common.ZoneConnectionsNode.AssignZoneConnectionOutputs(Crestron.RAD.Common.VideoInOut,Crestron.RAD.Common.AudioInOut)">
            <summary>
            Assign outputs node for both video and audio.
            </summary>
            <param name="node"></param>
            <param name="video"></param>
            <param name="audio"></param>
        </member>
        <member name="M:Crestron.RAD.Common.ZoneConnectionsNode.AssignZoneVideoOutputs(Crestron.RAD.Common.VideoInOut)">
            <summary>
            Assign outputs for video.
            </summary>
            <param name="node"></param>
            <param name="video"></param>
        </member>
        <member name="M:Crestron.RAD.Common.ZoneConnectionsNode.AssignZoneAudioOutputs(Crestron.RAD.Common.AudioInOut)">
            <summary>
            Assign outputs for audio.
            </summary>
            <param name="node"></param>
            <param name="audio"></param>
        </member>
        <member name="T:Crestron.RAD.Common.Communication">
            <summary>
            Specifies any communication settings on a driver such as the COM port specifications,
            polling settings, and command intervals.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.CommunicationType">
            <summary>
            The type of communication used to communicate with the third-party device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.Protocol">
            <summary>
            The protocol used for communication. 
            <para>If this driver does not use the COM port, this should be set to NotSpecfied.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.Baud">
            <summary>
            A portion of the COM port specifications. 
            <para>If this driver does not use the COM port, this should be set to NotSpecfied.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.Parity">
            <summary>
            A portion of the COM port specifications. 
            <para>If this driver does not use the COM port, this should be set to NotSpecfied.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.HwHandshake">
            <summary>
            A portion of the COM port specifications. 
            <para>If this driver does not use the COM port, this should be set to NotSpecfied.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.SwHandshake">
            <summary>
            A portion of the COM port specifications. 
            <para>If this driver does not use the COM port, this should be set to NotSpecfied.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.DataBits">
            <summary>
            A portion of the COM port specifications. 
            <para>If this driver does not use the COM port, this should be set to NotSpecfied.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.StopBits">
            <summary>
            A portion of the COM port specifications. 
            <para>If this driver does not use the COM port, this should be set to NotSpecfied.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.Port">
            <summary>
            The ethernet port used for communication
            <para>If this driver is not using ethernet for communication, this should be set to 0.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.EnableAutoPolling">
            <summary>
            Specifies if the driver should poll automatically.
            <para>If this is set to false, then the driver will not poll unless 
            the driver sets <see cref="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.PollingEnabled"/>
            to true.</para>
            <para>This should be set to true even if <see cref="P:Crestron.RAD.Common.BasicDriver.Feedback.SupportsUnsolicitedFeedback"/> is set to true. 
            This allows the driver to poll at least once to get initial states.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.EnableAutoReconnect">
            <summary>
            Specifies if the driver should reconnect to a device automatically if there was a disconnect.
            <para>This is not used if the driver uses the COM port.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.TimeBetweenCommands">
            <summary>
            Specifies the amount of time in ms to wait in between sending commands.
            <para>This value must be greater than 0 and a multiple of 250. 
            If it is not, it will be automatically quantized to be a multiple of 250.
            Example: A value of 200 will be treated as 250 internally and a a value of 251 will be treated 
            as 500 internally.</para>
            <para>If the driver wishes to specify a value less than 250, then it should set <see cref="P:Crestron.RAD.Common.Communication.TimeBetweenCommandsOverride"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.TimeBetweenCommandsOverride">
            <summary>
            Specifies the amount of time in ms to wait in between sending commands.
            <para>If this is not null, this will be used instead of <see cref="P:Crestron.RAD.Common.Communication.TimeBetweenCommands"/>.</para>
            <para>This value may be 0 and must be a multiple of 25.</para>
            <para>This value should only be set in the driver's embedded JSON file and should not be referenced by the driver.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.ResponseTimeout">
            <summary>
            Specifies the amount of time in ms to wait before considering a polling command to be timed out.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.WaitForResponse">
            <summary>
            Specifies if the driver should wait for a response to a previous command before sending another command.
            This is tracked using <see cref="P:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.ValidateResponse"/> 
            when it returns <see cref="T:Crestron.RAD.Common.BasicDriver.ValidatedRxData"/> 
            with <see cref="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.Ready"/> set to true.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.IpProtocol">
            <summary>
            Specifies the protocol used for ethernet communication.
            <para>This should be set to NotSpecified if the driver doesn't use ethernet for communication.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.IsUserAdjustable">
            <summary>
            Specifies if there are any values in the Communciation node that can be modified.
            <para>This is used by applications to potentially allow users to change the baud rate and other settings.
            Applications will look at <see cref="P:Crestron.RAD.Common.Communication.UserAdjustableProperties"/> to find which properties can be changed.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.Authentication">
            <summary>
            Specifies any authentication settings for communciation with the device.
            <para>This is referring to APIs that require the driver to send a username and/or password.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.IsSecure">
            <summary>
            Not used by the framework.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.UserAdjustableProperties">
            <summary>
            Specifies which properties are adjustable. This is used by applications.
            <para>Valid values are defined in <see cref="T:Crestron.RAD.Common.Enums.eTransportAdjustableProperties"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Communication.DeviceId">
            <summary>
            Specifies the default device ID that should be used for communication.
            <para>This is used when the API requires an ID to be included in commands sent to the device.</para>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.CustomCommand.CommandSetterError">
            <summary>
            An error message that is set when the setter for <see cref="P:Crestron.RAD.Common.CustomCommand.Command"/> had an exception.
            This will be logged by the command sending logic if it is not null.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Commands.AllowIsSendableOverride">
            <summary>
            Avr Zone Field to allow for Sending of zone related commands
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Commands.AllowIsQueueableOverride">
            <summary>
            Avr Zone Field to allow for Queuing of zone related commands
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.ConnectionsNode.AssignConnectionInputs(Crestron.RAD.Common.VideoInOut,Crestron.RAD.Common.AudioInOut)">
            <summary>
            Assign inputs node for both video and audio.
            </summary>
            <param name="node"></param>
            <param name="video"></param>
            <param name="audio"></param>
        </member>
        <member name="M:Crestron.RAD.Common.ConnectionsNode.AssignVideoInputs(Crestron.RAD.Common.VideoInOut)">
            <summary>
            Assign inputs for video.
            </summary>
            <param name="node"></param>
            <param name="video"></param>
        </member>
        <member name="M:Crestron.RAD.Common.ConnectionsNode.AssignAudioInputs(Crestron.RAD.Common.AudioInOut)">
            <summary>
            Assign inputs for audio.
            </summary>
            <param name="node"></param>
            <param name="audio"></param>
        </member>
        <member name="M:Crestron.RAD.Common.ConnectionsNode.AssignConnectionOutputs(Crestron.RAD.Common.VideoInOut,Crestron.RAD.Common.AudioInOut)">
            <summary>
            Assign outputs node for both video and audio.
            </summary>
            <param name="node"></param>
            <param name="video"></param>
            <param name="audio"></param>
        </member>
        <member name="M:Crestron.RAD.Common.ConnectionsNode.AssignVideoOutputs(Crestron.RAD.Common.VideoInOut)">
            <summary>
            Assign outputs for video.
            </summary>
            <param name="node"></param>
            <param name="video"></param>
        </member>
        <member name="M:Crestron.RAD.Common.ConnectionsNode.AssignAudioOutputs(Crestron.RAD.Common.AudioInOut)">
            <summary>
            Assign outputs for audio.
            </summary>
            <param name="node"></param>
            <param name="audio"></param>
        </member>
        <member name="T:Crestron.RAD.Common.DatFileAudioVideoSwitcher">
            <summary>
            Contains basic information about a switcher and its routable inputs and outputs.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileAudioVideoSwitcher.supportsAudioBreakaway">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.SupportsAudioBreakaway"/>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileAudioVideoSwitcher.autoDetectConfiguration">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.AutoDetectConfiguration"/>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileAudioVideoSwitcher.msBetweenRouteCommands">
            <summary>
            Specifies the amount of time in milliseconds to wait before sending another route command.
            Example: If an IR driver requires IN_1 to be sent, and then OUT_1 to be sent in order to
            route the first input to the first output, then this value would be set to the time between the IN_1
            and OUT_1 commands being sent.
            <para>This is only used for IR drivers.</para>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileAudioVideoSwitcher.outputs">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.GetRoutableOutputs"/>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileAudioVideoSwitcher.inputs">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.GetRoutableInputs"/>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.DatFileRootObject">
            <summary>
            Defines the contents of a DAT file in a driver PKG file.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.manufacturer">
            <summary>
            Manufacturer of device.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.driverId">
            <summary>
            A unique GUID to represent this driver.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.power">
            <summary>
            Specifies the power settings.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.deviceType">
            <summary>
            Specifies the device type.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.deviceTypeId">
            <summary>
            Specifies the device type ID.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.sdkVersion">
            <summary>
            Specifies the SDK version.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.driverVersion">
            <summary>
            Specifies the driver version.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.supportedSeries">
            <summary>
            Specifies a list of supported series for this driver.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.description">
            <summary>
            A description of the driver.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.supportedModels">
            <summary>
            Specifies a list of supported models for this driver.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.inputs">
            <summary>
            Specifies a list of input connections on the device.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.features">
            <summary>
            Specifies a list of features the driver supports.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.baseModel">
            <summary>
            Specifies the model the driver was written for.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.communication">
            <summary>
            Information about how the driver communicates with the device.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.driverVersionDate">
            <summary>
            The date the driver was last updated.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.userAttributes">
            <summary>
            Specifies a list of user attributes for the driver.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.connections">
            <summary>
            Specifies a list of connections on the devices.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.modelFiles">
            <summary>
            Specifies a list of model files.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.multiPowerOff">
            <summary>
            Specifies settings for IR files that need to send multiple commands for Power Off.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.mediaServiceProviders">
            <summary>
            Specifies a lsit of media service providers the driver supports.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.artworkMode">
            <summary>
            Specifies the supported artwork mode features.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.videoConfigurations">
            <summary>
            Specifies the supported video configurations.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.zoneList">
            <summary>
            Specifies a list of zones that are supported by an AVR driver.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.audioVideoSwitcher">
            <summary>
            Specifies information about an audio-video switcher.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.extensionDeviceData">
            <summary>
            Specifies data for extension devices
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.licenseRequired">
            <summary>
            Specifies if the driver requires licensing
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.developer">
            <summary>
            Driver developer name
            <para>
            This is also listed in <see cref="F:Crestron.RAD.Common.DatFileRootObject.developerContact"/> in <see cref="P:Crestron.RAD.Common.DeveloperInformation.Company"/>.
            The redundancy is an artifact of an original <see cref="F:Crestron.RAD.Common.DatFileRootObject.developer"/> field was later
            expanded to <see cref="F:Crestron.RAD.Common.DatFileRootObject.developerContact"/>.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.developerContact">
            <summary>
            Driver developer contact information
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.dependencyGroup">
            <summary>
            Constant used to identify drivers which rely on some shared dependency
            like a static singleton instance.
            Drivers with the same dependency group must be loaded into the same context (process, app domain)
            as each other to function properly.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.DatFileRootObject.supportedPlatforms">
            <summary>
            Specifies the list of supported platforms such as 3-Series, 4-Series, etc
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.DeveloperInformation">
            <summary>
            Provides developer contact information for support for the driver.
            This information is fed into the driver's dat file.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.DeveloperInformation.Company">
            <summary>
            The company name of the driver developer
            <para>
            Drivers published by the same company must all use the exact same string here
            so that they can be programatically associated with each other.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.DeveloperInformation.Contact">
            <summary>
            Name of contact for the developer at the <see cref="P:Crestron.RAD.Common.DeveloperInformation.Company"/>.
            This may be an individual or group name to direct any support inquiries to.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.DeveloperInformation.Email">
            <summary>
            Email address for support from the driver developer
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.DeveloperInformation.Website">
            <summary>
            URL for the developer's website
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.DeveloperInformation.PhoneNumber">
            <summary>
            Contact phone number for support from the developer
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.ExtensionDeviceData">
            <summary>
            Information about an Extension Device driver.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.ExtensionDeviceData.IsExtensionDevice">
            <summary>
            True if this driver implements the IExtensionDevice interface
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.ExtensionDeviceData.IsMediaDevice">
            <summary>
            True if this device is a media device (ie. Custom A/V Switcher)
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.ExtensionDeviceData.IsMediaSource">
            <summary>
            True is this device is a media source (ie. Custom Media Server, Custom NVR)
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.ExtensionMethods.ExtensionMethods.HasValue(System.String)">
            <summary>
            Check that a string is not null or whitespace
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.ExtensionMethods.ExtensionMethods.IsNullOrWhiteSpace(System.String)">
            <summary>
            Is Null or White/Empty space check for string
            </summary>
            <param name="inputstring"></param>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.ExtensionMethods.ExtensionMethods.DoesNotExist``1(``0)">
            <summary>
            Is Null check
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.ExtensionMethods.ExtensionMethods.Exists``1(``0)">
            <summary>
            Is not null check
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.ExtensionMethods.ExtensionMethods.GetSafeCommandString(System.String,System.Exception@)">
            <summary>
            Get safe command string for device
            Replace double backslashes with single
            </summary>
            <param name="commandString"></param>
            <param name="exception">The exception thrown by calling Regex.Unescape(commandString)</param>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.ExtensionMethods.ExtensionMethods.GetSafeCommandString(System.String)">
            <summary>
            Get safe command string for device
            Replace double backslashes with single
            </summary>
            <param name="commandString"></param>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.ExtensionMethods.ExtensionMethods.Unescape(System.String)">
            <summary>
            Replace double backslashes with single
            </summary>
            <param name="commandString"></param>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.ExtensionMethods.ExtensionMethods.Escape(System.String)">
            <summary>
            Replace single backslashes with double
            </summary>
            <param name="commandString"></param>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.ExtensionMethods.ExtensionMethods.UnescapeDictionaryValues``1(System.Collections.Generic.Dictionary{``0,System.String})">
            <summary>
            Unescape each value in given dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary"></param>
        </member>
        <member name="M:Crestron.RAD.Common.ExtensionMethods.ExtensionMethods.TryDispose(System.IDisposable)">
            <summary>
            If disposableObj exists then dispose it.
            And if it is a timer stop it before dispose.
            </summary>
            <param name="disposableObj"></param>
            <returns>true/false - whether dispose has been called.</returns>
        </member>
        <member name="M:Crestron.RAD.Common.ExtensionMethods.ExtensionMethods.Truncate(System.String,System.Int32)">
            <summary>
            Truncates a string to the specified max length
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.ExtensionMethods.ExtensionMethods.RegisterInterface``2(RADCommon.Interfaces.IInterfaceLookup{``1},``0)">
            <summary>
            Extension method to expose a generic API to register an interface on an IInterfaceLookup.
            Note that this is going to use typeof(T) to get the interface, not implementation.GetType()
            to avoid hard-to-predict results. This does mean, though, that if you call this with
            an instance of "object" it's not going to register anything since typeof(object) isn't going
            to have any interfaces that implement TBaseInterface.
            Use this API when you have an object that's already typed as the type you want to register.
            </summary>
            <typeparam name="T">The type to register</typeparam>
            <typeparam name="TBaseInterface">The base interface type of the lookup (usually ICapability)</typeparam>
            <param name="lookup">The lookup object</param>
            <param name="implementation">The object implementing the interface T to register</param>
        </member>
        <member name="M:Crestron.RAD.Common.ExtensionMethods.ExtensionMethods.TryGetInterface``2(RADCommon.Interfaces.IInterfaceLookup{``1})">
            <summary>
            Extension method to get an interface from an IInterfaceLookup and cast it to the
            desired type. This method works for any type of IInterfaceLookup but requires
            specifying the TBaseInterface for the syntax to work.
            </summary>
            <typeparam name="T">The interface to look up</typeparam>
            <typeparam name="TBaseInterface">The base interface of the IInterfaceLookup</typeparam>
            <param name="lookup">The IInterfaceLookup object</param>
            <returns>An instance of T, or null if not found</returns>
        </member>
        <member name="M:Crestron.RAD.Common.ExtensionMethods.ExtensionMethods.TryGetInterface``1(RADCommon.Interfaces.IInterfaceLookup{Crestron.DeviceDrivers.API.IDeviceCapability})">
            <summary>
            Extension method to get an interface from an IInterfaceLookup of ICapability
            and cast it to the desired type.
            </summary>
            <typeparam name="T">The interface to look up</typeparam>
            <param name="lookup">The IInterfaceLookup object where TBaseInterface is ICapabiity</param>
            <returns>An instance of T, or null if not found</returns>
        </member>
        <member name="P:Crestron.RAD.Common.GeneralInformation.LicenseRequired">
            <summary>
            Used to identify drivers that require licensing.
            This shall be used by third-parties developing drivers who wish to charge for the driver use.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.GeneralInformation.Developer">
            <summary>
            Driver developer contact information
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.GeneralInformation.DependencyGroup">
            <summary>
            Constant used to identify drivers which rely on some shared dependency
            like a static singleton instance.
            Drivers with the same dependency group must be loaded into the same context (process, app domain)
            as each other to function properly.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.InputDetail">
            <summary>
            Used for Video Inputs
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.InputDetail.#ctor(Crestron.RAD.Common.Enums.VideoConnections,Crestron.RAD.Common.Enums.VideoConnectionTypes,System.String)">
            <summary>
            Create input detail for video connection
            </summary>
            <param name="inputType">VideoConnections</param>
            <param name="inputConnector">VideoConnectionsType</param>
            <param name="description">string description</param>
        </member>
        <member name="P:Crestron.RAD.Common.MediaServiceProviderData.Feedback.ActiveFeedback.Feedback">
            <summary>
            Key is the name of the service such as "Netflix"
            Value is the response from the device for the service
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.MediaServiceProviderData.Feedback.PlaybackStateFeedback.Feedback">
            <summary>
            Key is the status such as "Playing", "Paused", or "Stopped"
            Value is the response from the device for the service
            It will be assumed that the status will be for the active service
            since more than one service cannot be active at the same time
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Resource">
            <summary>
            A resource is a object that represents the security system as a whole or a component of the security system.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Resource.Type">
            <summary>
            Represents the type of component in the security system that the resource represents.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Resource.Parent">
            <summary>
            If the security system device has a hierarchy this parameter will reflect the parent's name of this resource.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Resource.Name">
            <summary>
            The name of the resource object.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Resource.Index">
            <summary>
            The ID number of the resource. Resources of a given type should all have unique Index numbers assigned to them.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Resource.ArmedState">
            <summary>
            Indicates if the resource is armed, disarmed oor in the process of changing from one state to another.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Resource.AlarmState">
            <summary>
            A collection of alarms for the the resource.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Resource.BatteryState">
            <summary>
            The state of the battery in the security system.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Resource.ErrorState">
            <summary>
            The ErrorState of the resource indicates if there is a error or not with the resource.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Resource.LockState">
            <summary>
            If the resource has a lock the lock state indicates if the resources is locked or not.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.UserAttributeData.DefaultValueLabel">
            <summary>
            Default value label to display Url attribute type display text.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.VideoOutput">
            <summary>
            Used for Video Outputs
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.VideoOutput.#ctor(Crestron.RAD.Common.Enums.VideoConnections,Crestron.RAD.Common.Enums.VideoConnectionTypes,System.String)">
            <summary>
            Create Video Output with video connection
            </summary>
            <param name="outputType">VideoConections</param>
            <param name="outputConnector">VideoConnectionsType</param>
            <param name="description">Description</param>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.AudioVideoExtenderType">
            <summary>
            The different kinds of types an <see cref="T:Crestron.RAD.Common.Interfaces.IAudioVideoExtender"/> could be.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.AudioVideoExtenderType.Unknown">
            <summary>
            Invalid/Uninitialized value; Properly implemented devices will never use this value.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.AudioVideoExtenderType.DirectInput">
            <summary>
            An input directly on the IAudioVideoSwitcher device. 
            <para>Has no switching capabilities.</para>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.AudioVideoExtenderType.DirectOutput">
            <summary>
            An output directly on the IAudioVideoSwitcher device.
            <para>Has no switching capabilities.</para>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.AudioVideoExtenderType.IndirectInput">
            <summary>
            An input not directly on the IAudioVideoSwitcher device such as a transmitter.
            <para>Has no switching capabilities.</para>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.AudioVideoExtenderType.IndirectOutput">
            <summary>
            An output not directly on the IAudioVideoSwitcher device such as a receiver.
            HDBaseT connector on the IAudioVideoSwitcher device.
            <para>Has no switching capabilities.</para>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.AudioVideoExtenderType.IndirectInputWithSwitching">
            <summary>
            An input that has switching capabilities of its own and they are a feature of the API.
            If a transmitter has multiple inputs/outputs on it, but the API does not expose a way to switch between
            the inputs, then this type should not be used - use <see cref="F:Crestron.RAD.Common.Enums.AudioVideoExtenderType.IndirectInput"/>.
            <para>Has switching capabilities.</para>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.AudioVideoExtenderType.IndirectOutputWithSwitching">
            <summary>
            An output that has switching capabilities of its own and they are a feature of the API. 
            If a receiver has multiple inputs/outputs on it, but the API does not expose a way to switch between
            the inputs, then this type should not be used - use <see cref="F:Crestron.RAD.Common.Enums.AudioVideoExtenderType.IndirectOutput"/>.
            <para>Has switching capabilities.</para>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.DcFaultState">
            <summary>
            Supported DC fault states
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DcFaultState.None">
            <summary>
            No faults detected.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DcFaultState.OverCurrent">
            <summary>
            OverCurrent fault.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DcFaultState.OverTemperature">
            <summary>
            OverTemperarture fault.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DcFaultState.HighDcOffset">
            <summary>
            HighDcOffset fault.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DcFaultState.UnderVoltage">
            <summary>
            UnderVoltage fault.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DcFaultState.OverVoltage">
            <summary>
            OverVoltage fault.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.TemperatureUnit">
            <summary>
            The units of measurement for a temperature value.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.TemperatureUnit.Unknown">
            <summary>
             Indicates that units are not known. 
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.TemperatureUnit.Celcius">
            <summary>
            Measures whole degrees in Celsius.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.TemperatureUnit.Fahrenheit">
            <summary>
            Measures whole degrees in Fahrenheit.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyAttributes.None">
            <summary>
            Indicates the property has no additional attributes;
            It is a read-write property with no limits other than those imposed by the <see cref="!:IDeviceProperty.Type"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyAttributes.ReadOnly">
            <summary>
            Indicates the property is read-only and its value cannot be set.
            Only the device itself can change the value and report changes
            via the <see cref="!:IDeviceWithProperties.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyAttributes.MinValue">
            <summary>
            Indicates the property has a minimum value that must be respected;
            It can be retrieved via the <see cref="!:IDeviceProperty.GetMinValue&lt;TValue&gt;"/> method
            or the <see cref="!:IDeviceProperty&lt;TValue&gt;.MinValue"/> property.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyAttributes.MaxValue">
            <summary>
            Indicates the property has a maximum value that must be respected;
            It can be retrieved via the <see cref="!:IDeviceProperty.GetMaxValue&lt;TValue&gt;"/> method
            or the <see cref="!:IDeviceProperty&lt;TValue&gt;.MaxValue"/> property.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyAttributes.StepSize">
            <summary>
            Indicates the property has a step size that must be respected;
            It can be retrieved via the <see cref="!:IDeviceProperty.GetStepSize&lt;TValue&gt;"/> method
            or the <see cref="!:IDeviceProperty&lt;T&gt;.StepSize"/> property.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.DevicePropertyRenderHint">
            <summary>
            Defines hints for user interfaces as to the intended usage of a device property;
            Specified by the interface property <see cref="!:IDeviceProperty.RenderHint"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyRenderHint.None">
            <summary>
            Indicates the property value should be displayed using normal editing controls,
            such as a check box for booleans, a text box for string, etc...
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyRenderHint.OnOff">
            <summary>
            Indicates the property is intended to be displayed as on/off switch.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyRenderHint.OnOffValues">
            <summary>
            Indicates the property is an additional value that can be set,
            in addition to an associated property whose render hint is <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyRenderHint.OnOff"/>.
            <para>
            In other words, there will be 2 properties.
            One will be the property that turns on/off the device feature.
            The other will be the one that configures that device feature.
            </para>
            <para>
            For example, turning on a strobe light may offer a preset list of flashing patterns to choose from.
            The intention here is that a user interface might want to show the 2 properties closely coupled together.
            This property’s <see cref="!:IDeviceProperty&lt;T&gt;.AvailableValues"/> will be populated.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyRenderHint.SetpointTarget">
            <summary>
            Indicates the property is intended to be displayed as range of values the user can target,
            for example, as a slider or a numeric spinner.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyRenderHint.SetpointActual">
            <summary>
            Indicates the property is intended to be displayed as the actual/current value
            when there is another property with the hint of <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyRenderHint.SetpointTarget"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyRenderHint.Slider">
            <summary>
            Indicates the property is intended to be displayed as slider or similar control.
            <para>
            How exactly the slider is rendered can vary depending on the number of values specified by the range
            <see cref="!:IDeviceProperty&lt;T&gt;.MinValue"/> and <see cref="!:IDeviceProperty&lt;T&gt;.MaxValue"/>
            and the <see cref="!:IDeviceProperty&lt;T&gt;.StepSize"/> between them.
            </para>
            <para>
            The <see cref="!:IDeviceProperty.Units"/> should also be factored in when rendering the slider.
            </para>
            <para>
            If the <see cref="!:IDeviceProperty&lt;T&gt;.AvailableValues"/> is populated,
            it indicates custom labels from the device for each value (e.g. Slow, Medium, Fast).
            </para>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyRenderHint.Status">
            <summary>
            Indicates the property is the status of an associated property.
            <para>
            For example, turning on pump may require a "priming" phase.
            One property would exist to turn the pump on/off.
            Another property with this render hint and the appropriate <see cref="!:IDeviceProperty.OwnerPropertyKey"/>
            would have a value of "Priming" while the pump is turning on.
            </para>
            <para>
            The intention here is that a user interface might want to show the 2 properties
            closely coupled together since one is the status of the other.
            </para>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.DevicePropertyStates">
            <summary>
            Defines state information about a device property;
            Specified by the interface property <see cref="!:IDeviceProperty.State"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyStates.Default">
            <summary>
            Indicates a default, valid state.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyStates.Disabled">
            <summary>
            Indicates if the property is currently disabled.
            <para>
            This may change based on the values of other properties.
            For example, changing the value of one property may disable another property.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyStates.ValueNotAvailable">
            <summary>
            Indicates if the value of the property is not currently available.
            <para>
            In other words, the device may not have the value yet or
            the device is not capable of retrieving the value
            (for example, if a temperature sensor is not connected).
            </para>
            <para>
            When this flag is present, the value returned by <see cref="!:IDeviceProperty.GetValue&lt;TValue&gt;"/>
            or <see cref="!:IDeviceProperty&lt;T&gt;.Value"/> must be ignored.
            </para>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.DevicePropertyType">
            <summary>
            Defines the possible types of a device property;
            Specified by the interface property <see cref="P:Crestron.RAD.Common.Interfaces.IDeviceProperty.Type"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyType.Boolean">
            <summary>
            Represents a value of type <see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyType.String">
            <summary>
            Represents a value of type <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyType.Int16">
            <summary>
            Represents a value of type <see cref="T:System.Int16"/>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyType.UInt16">
            <summary>
            Represents a value of type <see cref="T:System.UInt16"/>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyType.Int32">
            <summary>
            Represents a value of type <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyType.UInt32">
            <summary>
            Represents a value of type <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyType.Int64">
            <summary>
            Represents a value of type <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyType.UInt64">
            <summary>
            Represents a value of type <see cref="T:System.UInt64"/>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyType.Float">
            <summary>
            Represents a value of type <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyType.Double">
            <summary>
            Represents a value of type <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyType.LocalizedString">
            <summary>
            Indicates the type is a localized string that must be resolved using the <see cref="T:Crestron.RAD.Common.Interfaces.ILocalizedDevice"/> interface.
            <para>
            The actual value of this property will be equivalent to <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.Int32"/>.
            That integer then needs to be looked up in the key-value pairs returned
            by <see cref="M:Crestron.RAD.Common.Interfaces.ILocalizedDevice.GetLocalizedStrings(System.String)"/>.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyType.Object">
            <summary>
            Represents a value of type <see cref="T:System.Object"/>
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyType.ObjectList">
            <summary>
            Represents a value of type <see cref="T:System.Collections.Generic.List`1"/> where T is an <see cref="T:System.Object"/>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.DevicePropertyUnit">
            <summary>
            Defines the possible units of measurement of a device property;
            Specified by the interface property <see cref="!:IDeviceProperty.Units"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyUnit.None">
            <summary>
            Indicates that units are not applicable or not known.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyUnit.Celsius">
            <summary>
            Measures whole degrees in Celsius.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyUnit.Fahrenheit">
            <summary>
            Measures whole degrees in Fahrenheit.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyUnit.Percentage">
            <summary>
            Measures a percentage, typically between 0 and 100,
            but the minimum and maximum may vary depending on the <see cref="!:IDeviceProperty&lt;T&gt;"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyUnit.Millivolts">
            <summary>
            Measures 1/1,000th of a volt; Abbreviated as mV.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyUnit.PartsPerMillion">
            <summary>
            Imperial system unit of measure for the concentration of a substance; Abbreviated as ppm.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DevicePropertyUnit.GramsPerLiter">
            <summary>
            Metric system unit of measure for the concentration of a substance; Abbreviated as g/L.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.PoolControllerFunctions">
            <summary>
            Defines the functions that can be supported by an <see cref="!:IPoolController"/> instance.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.PoolControllerFunctions.RequiredOnly">
            <summary>
            Indicates only the required events, properties and methods on the interface are supported.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.PoolControllerFunctions.AirTemperature">
            <summary>
            Indicates the device supports reading the air temperature.
            </summary>
            <seealso cref="!:IPoolController.AirTemperature"/>
            <seealso cref="!:IPoolController.TemperatureScale"/>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.PoolFunctions">
            <summary>
            Defines the functions that can be supported by an <see cref="!:IPool"/> instance.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.PoolFunctions.RequiredOnly">
            <summary>
            Indicates only the required events, properties and methods on the interface are supported.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.PoolFunctions.WaterTemperature">
            <summary>
            Indicates the pool supports reading the water temperature.
            </summary>
            <seealso cref="!:IPool.WaterTemperature"/>
            <seealso cref="!:IPoolController.TemperatureScale"/>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.PoolFunctions.PH">
            <summary>
            Indicates the pool supports reading the pH level of the water.
            </summary>
            <seealso cref="!:IPool.PH"/>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.PoolFunctions.Salinity">
            <summary>
            Indicates the pool supports reading the salinity level of the water.
            </summary>
            <seealso cref="!:IPool.Salinity"/>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.PoolFunctions.FlowRate">
            <summary>
            Indicates the pool supports reading the flow rate of the water.
            </summary>
            <seealso cref="!:IPool.FlowRate"/>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.PoolFunctions.Orp">
            <summary>
            Indicates the pool supports reading the Oxidation-Reduction Potential of the water.
            </summary>
            <seealso cref="!:IPool.Orp"/>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.PoolPartType">
            <summary>
            Defines the known types of pool parts.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.PoolPartType.FilterPump">
            <summary>
            Indicates the primary pump(s) of a pool.
            All other pumps will use the <see cref="F:Crestron.RAD.Common.Enums.PoolPartType.OtherPump"/> value instead.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.PoolPartType.Heater">
            <summary>
            Indicates the primary heater(s) of a pool.
            All other devices targeting a specific value will use the <see cref="F:Crestron.RAD.Common.Enums.PoolPartType.Setpoint"/> value instead.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.PoolType">
            <summary>
            Defines the known types of pools.
            </summary>
            <seealso cref="!:IPool"/>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.TemperatureScale">
            <summary>
            Defines the temperature scale of a device.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.TemperatureScale.Unknown">
            <summary>
            Default enum value; Typically used when the temperature scale is not supported or not yet known.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.TemperatureScale.Celsius">
            <summary>
            Indicates the device reports its temperatures in Celsius.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.TemperatureScale.Fahrenheit">
            <summary>
            Indicates the device reports its temperatures in Fahrenheit.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.PortDirection">
            <summary>
            The direction of a port on a device.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.PortDirection.Unknown">
            <summary>
            Port direction is unknown.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.PortDirection.Input">
            <summary>
            Port allows control.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.PortDirection.Output">
            <summary>
            Port allows feedback.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.PortDirection.All">
            <summary>
            Port is bi-directional.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.PortType">
            <summary>
            The type of port.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.PortType.Unknown">
            <summary>
            Invalid/Uninitialized value; Properly implemented devices will never use this value.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.PortType.IR">
            <summary>
            Represents an IR port. 
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.PortType.COM">
            <summary>
            Represents a COM port in any configuration. 
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.PortType.CEC">
            <summary>
            Represents a CEC port.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.PortType.Relay">
            <summary>
            Represents a relay.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.PortType.GenericIo">
            <summary>
            Represents a versiport
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.SecuritySystemKeypadFunctionButtonIcon">
            <summary>
            
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.BatteryState">
            <summary>
            The BatteryState enum defines the different states of a battery in a device.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.eComBaudRates">
            <summary>
            Enumeration of the com port Baud Rates
            
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.eComDataBits">
            <summary>
            Number of Data bits for the com port
            
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.eComHardwareHandshakeType">
            <summary>
            Hardware Handshake type for the com port
            
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.CommonFeatureSupport.SupportsTemperatureFeedback">
            <summary>
            Used by <see cref="P:Crestron.RAD.Common.Interfaces.IHardwareDiagnostics.SupportsTemperatureFeedback"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.CommonFeatureSupport.SupportsSpeakerProtectFeedback">
            <summary>
            Used by <see cref="P:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SupportsSpeakerProtectFeedback"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.CommonFeatureSupport.SupportsDiscreteSpeakerProtect">
            <summary>
            Used by <see cref="P:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SupportsDiscreteSpeakerProtect"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.CommonFeatureSupport.SupportsSpeakerProtectToggle">
            <summary>
            Used by <see cref="P:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SupportsSpeakerProtectToggle"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.CommonFeatureSupport.SupportsAudioIsClippingFeedback">
            <summary>
            Used by <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.SupportsAudioIsClippingFeedback"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.CommonFeatureSupport.SupportsDcFaultStateFeedback">
            <summary>
            Used by <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.SupportsDcFaultStateFeedback"/>.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.CommonCommandGroupType">
            <summary>
            The group a <see cref="!:CommandSet"/> could be a part of.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.CommonCommandGroupType.AudioVideoSwitcher">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IAudioVideoSwitcher"/> for all routing commands.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.CommonCommandGroupType.AudioVideoExtender">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IAudioVideoExtender"/> for all commands. Extenders utilize
            <see cref="P:Crestron.RAD.Common.BasicDriver.CommandSet.SubCommandGroup"/> to provide more information about the type of command
            being sent.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.CommonCommandGroupType.SpeakerProtect">
            <summary>
            Used by commands made by <see cref="T:Crestron.RAD.Common.Interfaces.ISpeakerProtect"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.CommonCommandGroupType.Temperature">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IHardwareDiagnostics"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.CommonCommandGroupType.TemperatureUnits">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IHardwareDiagnostics"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.CommonCommandGroupType.DcFaultState">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IAudioVideoExtender"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.CommonCommandGroupType.ClippingAudio">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IAudioVideoExtender"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.CommonCommandGroupType.CecPortCommunication">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.ICecPort"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.CommonCommandGroupType.ComPortCommunication">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IDeviceComPort"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.CommonCommandGroupType.RelayPortCommunication">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IRelayPort"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.CommonCommandGroupType.GenericIoAnalogCommunication">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IGenericIo"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.CommonCommandGroupType.GenericIoDigitalCommunication">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IGenericIo"/>.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.eComParityType">
            <summary>
            Parity type for the com port
            
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.eComProtocolType">
            <summary>
            Protocol for the com ports
            
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.eComSoftwareHandshakeType">
            <summary>
            Software Handshake type for the com port
            
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.eComStopBits">
            <summary>
            Number of stop bits for the com Port
            
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.Amplifier">
            <summary>
            Audio amplifier
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.Appliance">
            <summary>
            Stove, oven, refridgerator, coffee maker, microwave, dishwasher
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.AudioProcessor">
            <summary>
            Audio processor, pre-amp
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.Fan">
            <summary>
            Ceiling fan, vent fan, stove hood
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.Fireplace">
            <summary>
            Gas/electric fireplace
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.GameConsole">
            <summary>
            Xbox, Playstation, Nintendo
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.GarageDoor">
            <summary>
            Garage door opener
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.Hvac">
            <summary>
            Thermostat, heating, air conditioner, humidifier, dehumidifier
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.IrrigationSystem">
            <summary>
            Lawn sprinkler, garden irrigation
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.Light">
            <summary>
            Light switch, smart bulb, LED controller
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.Lock">
            <summary>
            Door lock, pad lock, etc.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.Outlet">
            <summary>
            Smart outlet, smart plug
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.PowerController">
            <summary>
            Ups, power conditioner
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.Printer">
            <summary>
            Document printer
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.ProjectorLift">
            <summary>
            Motorized projector lift
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.Router">
            <summary>
            Wifi router
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.Scanner">
            <summary>
            Document scanner
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.Screen">
            <summary>
            Motorized projector screen
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.Sensor">
            <summary>
            Door sensor, occupancy sensor, light sensor
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.Speaker">
            <summary>
            Smart speaker
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.Shade">
            <summary>
            Window shades, curtains, drapes
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.Vacuum">
            <summary>
            Robot vacuum, pool vacuum
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.Vehicle">
            <summary>
            Tesla, wifi/cell connected car
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.Gateway">
            <summary>
            Obsolete, please use Platform instead
            Gateway device contains list of paired devices.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.AudioVideoSwitcher">
            <summary>
            Obsolete, please use AVSwitcher instead
            Audio/Video Switcher
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.Platform">
            <summary>
            Device type which contains a list of paired devices.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.AVSwitcher">
            <summary>
            Audio/Video Switcher
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.AudioMixer">
            <summary>
            Audio Mixer
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.NetworkSwitch">
            <summary>
            Network Switch
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.DeviceTypes.CustomConferencing">
            <summary>
            Custom Conferencing
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.EthernetAdapterType.EthernetUnknownAdapter">
            <summary>
            Indicates adapter is unknown or ignored
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.EthernetAdapterType.EthernetLANAdapter">
            <summary>
            Indicates Ethernet LAN Adapter
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.EthernetAdapterType.EthernetCSAdapter">
            <summary>
            Indicates Ethernet Control Subnet Adapter
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.EthernetAdapterType.EthernetWIFIAdapter">
            <summary>
            Indicates WIFI Adapter
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.EthernetAdapterType.EthernetLAN2Adapter">
            <summary>
            Indicates second EthernetLANAdapter
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.LockState">
            <summary>
            The LockState enum defines the different states of a lock in a device.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.AudioVideoSwitcherRoute">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IAudioVideoSwitcher"/> for routing commands.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.AudioVideoSwitcherRoutePoll">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IAudioVideoSwitcher"/> for route poll commands.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.AudioVideoExtenderRoute">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IAudioVideoExtender"/> for routing commands.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.AudioVideoExtenderRoutePoll">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IAudioVideoExtender"/> for route poll commands.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.SpeakerProtectOn">
            <summary>
            Used by <see cref="M:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SpeakerProtectOn"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.SpeakerProtectOff">
            <summary>
            Used by <see cref="M:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SpeakerProtectOff"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.SpeakerProtectToggle">
            <summary>
            Used by <see cref="M:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SpeakerProtectToggle"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.SpeakerProtectPoll">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.ISpeakerProtect"/> for requesting the current speaker protect state.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.TemperaturePoll">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IHardwareDiagnostics"/> for requesting the current temperature value.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.TemperatureUnitPoll">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IHardwareDiagnostics"/> for requesting the current units of measurement for temperature.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.DcFaultStatePoll">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IAudioVideoExtender"/> for requesting the current speaker protect state.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.ClippingAudioPoll">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IAudioVideoExtender"/> for requesting the current speaker protect state.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.SetRelayStateOn">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IRelayPort"/> for setting the relay state.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.SetRelayStateOff">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IRelayPort"/> for setting the relay state.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.RelayStatePoll">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IRelayPort"/> for requesting the current relay state.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.SetGenerIoDigitalOutputOn">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IGenericIo"/> for setting the digital state.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.SetGenerIoDigitalOutputOff">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IGenericIo"/> for setting the digital state.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.GenericIoAnalogInputPoll">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IGenericIo"/> for requesting the analog state.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.GenericIoDigitalInputPoll">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.IGenericIo"/> for requesting the digital state.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.SendComData">
            <summary>
            Used by <see cref="!:Crestron.RAD.Common.Interfaces.IDeviceComport"/> for sending the data to the device.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.StandardCommandsEnum.SendCecData">
            <summary>
            Used by <see cref="T:Crestron.RAD.Common.Interfaces.ICecPort"/> for sending data to the device.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Enums.eTransportAdjustableProperties">
            <summary>
            Fields in .json that if specified will generate fields that are adjustable in resulting com .dat file
            
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.UserAttributeRequiredForConnectionType.None">
            <summary>
            Specifies that the user attribute is not required in order to connect to the device.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.UserAttributeRequiredForConnectionType.Before">
            <summary>
            Specifes that the user attribute is required before connecting to the device.
            These user attributes must be set before calling <see cref="M:Crestron.RAD.Common.Interfaces.IConnection.Connect"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Enums.UserAttributeRequiredForConnectionType.After">
            <summary>
            Specifies that the user attribute is required after connecting to the device.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.ADevicePreset">
            <summary>
            General purpose implementation of <see cref="T:Crestron.RAD.Common.Interfaces.IDevicePreset"/>.
            Device drivers can derive this or implement their own class.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.ADevicePreset.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructs this immutable object with all the required properties.
            </summary>
            <param name="id">See <see cref="P:Crestron.RAD.Common.ADevicePreset.Id"/>.</param>
            <param name="name">See <see cref="P:Crestron.RAD.Common.ADevicePreset.Name"/>.</param>
            <param name="supportsIsActive">See <see cref="P:Crestron.RAD.Common.ADevicePreset.SupportsIsActive"/>.</param>
            <param name="isActive">See <see cref="P:Crestron.RAD.Common.ADevicePreset.IsActive"/>.</param>
        </member>
        <member name="P:Crestron.RAD.Common.ADevicePreset.Id">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IDevicePreset.Id"/>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.ADevicePreset.Name">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IDevicePreset.Name"/>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.ADevicePreset.SupportsIsActive">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IDevicePreset.SupportsIsActive"/>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.ADevicePreset.IsActive">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IDevicePreset.IsActive"/>
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.ADevicePreset.SupportsToggle">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IDevicePreset.SupportsToggle"/>
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.ADeviceProperty">
            <summary>
            General purpose implementation of <see cref="T:Crestron.RAD.Common.Interfaces.IDeviceProperty"/>.
            Device drivers can derive this or implement their own class.
            </summary>
            <seealso cref="T:Crestron.RAD.Common.DeviceProperty`1"/>
        </member>
        <member name="T:Crestron.RAD.Common.DeviceProperty`1">
            <summary>
            General purpose implementation of <see cref="T:Crestron.RAD.Common.Interfaces.IDeviceProperty`1"/>.
            Device drivers can derive this or implement their own class.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.DevicePropertyAvailableValue`1">
            <summary>
            General purpose implementation of <see cref="T:Crestron.RAD.Common.Interfaces.IDevicePropertyAvailableValue`1"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.DevicePropertyAvailableValue`1.LocalizedCategoryNameId">
            <see cref="!:IDevicePropertyAvailableValue&lt;T&gt;.LocalizedCategoryNameId"/>
        </member>
        <member name="P:Crestron.RAD.Common.DevicePropertyAvailableValue`1.LocalizedNameId">
            <see cref="!:IDevicePropertyAvailableValue&lt;T&gt;.LocalizedNameId"/>
        </member>
        <member name="P:Crestron.RAD.Common.DevicePropertyAvailableValue`1.Value">
            <see cref="!:IDevicePropertyAvailableValue&lt;T&gt;.LocalizedNameId"/>
        </member>
        <member name="M:Crestron.RAD.Common.Helpers.AudioToneHelper.ScaleAudioTone(Crestron.RAD.Common.AudioToneDetail)">
            <summary>
            Scale signed tone level to percent value 
            </summary>
            <param name="audioToneDetail"></param>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.Helpers.AudioToneHelper.GetScaledValueFromPercent(System.Single,System.Single,System.Single)">
            <summary>
            Get tone value from scaled percent value 
            </summary>
            <param name="value"></param>
            <param name="max"></param>
            <param name="min"></param>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.Helpers.AudioToneHelper.GetScaledPercentValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get scaled percent value from unscaled volume value, min and max
            </summary>
            <param name="unscaledValue"></param>
            <param name="max"></param>
            <param name="min"></param>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.Helpers.AudioToneHelper.ScaleValueToPercent(System.Int32,System.Int32,System.Int32)">
            <summary>
            Convert unscaled value to percent value
            </summary>
            <param name="unscaledValue"></param>
            <param name="max"></param>
            <param name="min"></param>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.Helpers.VolumeHelper.ScaleVolume(Crestron.RAD.Common.VolumeDetail)">
            <summary>
            Scale Volume value to percent value
            </summary>
            <param name="volumeDetail"></param>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.Helpers.VolumeHelper.GetScaleValueFromPercent(System.Single,System.Single,System.Single)">
            <summary>
            Get volume value from scaled percent value 
            </summary>
            <param name="value"></param>
            <param name="max"></param>
            <param name="min"></param>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.Helpers.VolumeHelper.GetScaledPercentValue(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Get scaled percent value from unscaled volume value, min and max
            </summary>
            <param name="unscaledValue"></param>
            <param name="max"></param>
            <param name="min"></param>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.Common.Helpers.VolumeHelper.ScaleValueToPercent(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Convert unscaled value to percent value
            </summary>
            <param name="unscaledValue"></param>
            <param name="max"></param>
            <param name="min"></param>
            <returns></returns>
        </member>
        <member name="T:Crestron.RAD.Common.Logging.Logger">
            <summary>
            Used for more verbose logging by the framework.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Logging.Logger.LoggingEnabled">
            <summary>
            Specifies if logging is enabled on the system
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Logging.Logger.RuntimeLogger">
            <summary>
            Instance of IRuntimeLogger provided by ABaseDriver to allow for higher lever diagnostic logging
            if the logging level is enabled
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Logging.Logger.CurrentLevel">
            <summary>
            The current logging level.
            By default, Error will be selected.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Logging.Logger.Debug(System.String)">
            <summary>
            Sends a debug message to the RuntimeLogger if enabled or to an internal driver
            logging instance if not enabled
            </summary>
            <param name="message">Message to be logged</param>
        </member>
        <member name="M:Crestron.RAD.Common.Logging.Logger.Warning(System.String)">
            <summary>
            Sends a warning message to the RuntimeLogger if enabled or to an internal driver
            logging instance if not enabled
            </summary>
            <param name="message">Message to be logged</param>
        </member>
        <member name="M:Crestron.RAD.Common.Logging.Logger.Error(System.String)">
            <summary>
            Sends an error message to the RuntimeLogger if enabled or to an internal driver
            logging instance if not enabled
            </summary>
            <param name="message">Message to be logged</param>
        </member>
        <member name="T:Crestron.RAD.Common.Logging.LoggingLevel">
            <summary>
             Error - Exceptions
             Warning - Exceptions and warnings
             Debug - Exceptions, warnings, and everything else
             
            Logs will only print if EnableLogging is enabled.
            Drivers should not reference this enumeration.
            Drivers should only check the property EnableLogging before making a call to the method Log.
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Transports.DataObjects.DriverMetadata">
            <summary>
            Represents a loaded drivers basic properties
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Transports.HttpsTransport">
            <summary>
            Generic HTTPS transport that uses HttpsClient.
            This transport should send data and wait for a response or timeout before sending any more data.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.HttpsTransport.HttpsClientHostVerification">
            <summary>
            Setting used by HttpsClient.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.HttpsTransport.HttpsClientPeerVerification">
            <summary>
            Setting used by HttpsClient.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.HttpsTransport.HttpsClientKeepAlive">
            <summary>
            Setting used by HttpsClient.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.HttpsTransport.HttpsClientVerbose">
            <summary>
            Setting used by HttpsClient.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.HttpsTransport.HttpsClientIncludeHeaders">
            <summary>
            Setting used by HttpsClient.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.HttpsTransport.HttpsClientSecure">
            <summary>
            Setting used by HttpsClient.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Transports.HttpsTransport.HttpsUserName">
            <summary>
            Setting used by HttpsClient.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Transports.HttpsTransport.HttpsPassword">
            <summary>
            Setting used by HttpsClient.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.HttpsTransport.Connected">
            <summary>
            Returns true if the client's last request received a response.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.HttpsTransport.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.HttpsTransport.Initialize(Crestron.SimplSharp.IPAddress,System.Int32)">
            <summary>
            Initializes HttpTransport with an IP address and port. 
            </summary>
            <param name="ipAddress">IP address used for HttpClient.</param>
            <param name="port">Port used for HttpClient.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.HttpsTransport.Initialize(System.String,System.Int32)">
            <summary>
            Initializes HttpTransport with an address that can be a hostname or an IP address.
            </summary>
            <param name="address">IP address or hostname used for HttpClient.</param>
            <param name="port">Port used for HttpClient.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.HttpsTransport.Start">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.HttpsTransport.Stop">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.HttpsTransport.SendMethod(System.String,System.Object[])">
            <summary>
            Sends the specified message using POST by default in the ContentString.
            This is a blocking call.
            </summary>
            <param name="message">Message to use in the URL.</param>
            <param name="paramaters">Will process objects of type RequestType and HttpsHeader.</param>
        </member>
        <member name="T:Crestron.RAD.Common.Transports.HttpTransport">
            <summary>
            Generic HTTP transport that uses HttpClient.
            This transport should send data and wait for a response or timeout before sending any more data.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.HttpTransport.Connected">
            <summary>
            Returns true if the client's last request received a response.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.HttpTransport.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.HttpTransport.Initialize(Crestron.SimplSharp.IPAddress,System.Int32)">
            <summary>
            Initializes HttpTransport with an IP address and port. 
            </summary>
            <param name="ipAddress">IP address used for HttpClient.</param>
            <param name="port">Port used for HttpClient.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.HttpTransport.Initialize(System.String,System.Int32)">
            <summary>
            Initializes HttpTransport with an address that can be a hostname or an IP address.
            </summary>
            <param name="address">IP address or hostname used for HttpClient.</param>
            <param name="port">Port used for HttpClient.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.HttpTransport.Start">
            <summary>
            Creates a new instance of the client if it does not exist.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.HttpTransport.Stop">
            <summary>
            Disposes the client instance if it exists.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.HttpTransport.SendMethod(System.String,System.Object[])">
            <summary>
            Sends the specified message using POST by default in the URL in the format of
            "http://{device address}:{port}/{message} using DispatchAsync.
            </summary>
            <param name="message">Message to use in the URL.</param>
            <param name="paramaters">Will process objects of type RequestType.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.HttpTransport.HostResponseCallback(Crestron.SimplSharp.Net.Http.HttpClientResponse,Crestron.SimplSharp.Net.Http.HTTP_CALLBACK_ERROR)">
            <summary>
            Invoked by the client when there is a response to the last request.
            </summary>
            <param name="response">The response from the device.</param>
            <param name="Error">Any error that happened while receiving the response. The connection state will be
            set depending on this value.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.IComPort.Send(System.String)">
            <summary>
            Function for the user to send a string out the com port.
            
            </summary>
            <param name="dataToTransmit">Serial data to send out</param><exception cref="T:System.ArgumentNullException">The specified string to transmit is 'null'.</exception>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.IComPort.SetComPortSpec(Crestron.RAD.Common.Enums.eComBaudRates,Crestron.RAD.Common.Enums.eComDataBits,Crestron.RAD.Common.Enums.eComParityType,Crestron.RAD.Common.Enums.eComStopBits,Crestron.RAD.Common.Enums.eComProtocolType,Crestron.RAD.Common.Enums.eComHardwareHandshakeType,Crestron.RAD.Common.Enums.eComSoftwareHandshakeType,System.Boolean)">
            <summary>
            Function to set the com spec for the specified COM Port
            
            </summary>
            <param name="paramBaudRate">Baud Rate</param><param name="paramNumberOfDataBits">Number Of Data Bits</param><param name="paramParityType">Parity Type</param><param name="paramNumberOfStopBits">Number of Stop bits</param><param name="paramProtocolType">Protocol Type</param><param name="paramHardwareHandShake">Hardware Handshake</param><param name="paramSoftwareHandshake">Software Handshake</param><param name="paramReportCTSChanges">Indicates whether we want to report CTS Changes</param>
            <returns>
            UShort if sending the new com port specification was successful. 0 = successful.
            </returns>
            <exception cref="T:System.NotSupportedException">The COMPORT does not supports a part of the specified configuration. See messages for more information.</exception><exception cref="T:System.InvalidOperationException">The COMPORT is not registered.</exception>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.IComPort.SetComPortSpec(Crestron.RAD.Common.Transports.ComPortSpec)">
            <summary>
            Function to set the COM port's specification as defined in the ComPortSpec structure.
            
            </summary>
            <param name="paramComPortSpecificationStructure">Structure that contains information about how the serial port will be configured.</param>
            <returns>
            UShort if sending the new com port specification was successful. 0 = successful.
            </returns>
            <exception cref="T:System.NotSupportedException">The COMPORT does not supports a part of the specified configuration. See messages for more information.</exception><exception cref="T:System.InvalidOperationException">The COMPORT is not registered.</exception>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.IComPort.UnRegister">
            <summary>
            Function to unregister the ComPort, if registered.
            
            </summary>
            
            <returns>
            Returns device unregistration response
            </returns>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.RcvdString">
            <summary>
            Function to get the Rcvdata on the COMPORT
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.TransmitString">
            <summary>
            Send data to the COMPORT
            
            </summary>
            <exception cref="T:System.InvalidOperationException">The specified string to transmit is 'null'.</exception>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.EnableFeedback">
            <summary>
            Enable Feedback for Comports
                        Reserved for future use
            
            </summary>
            <exception cref="T:System.NotSupportedException">This function is not supported.</exception>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.RTS">
            <summary>
            Set the RTS flag.
            
            </summary>
            <exception cref="T:System.NotSupportedException">This COMPORT does not support RTS.</exception>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.CTS">
            <summary>
            Get the current CTS flag state
            
            </summary>
            <exception cref="T:System.NotSupportedException">This COMPORT does not support CTS.</exception>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.CD">
            <summary>
            Get the CD flag
            
            </summary>
            <exception cref="T:System.NotSupportedException">This COMPORT does not support CD.</exception>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.DSR">
            <summary>
            Get the DSR state
            
            </summary>
            <exception cref="T:System.NotSupportedException">This COMPORT does not support DSR.</exception>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.RING">
            <summary>
            Get the RING state
            
            </summary>
            <exception cref="T:System.NotSupportedException">This COMPORT does not support RING.</exception>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.SupportsRTSCTS">
            <summary>
            See if the COMPORT supports RTS/CTS
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.Supports485">
            <summary>
            See if the COMPORT Supports 485
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.Supports232">
            <summary>
            See if the COMPORT Supports 232
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.Supports422">
            <summary>
            See if the COMPORT Supports 422
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.ReportCTSChanges">
            <summary>
            Property to return if this COM port will report CTS changes
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.BaudRate">
            <summary>
            Get the current baud rate
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.DataBits">
            <summary>
            Get the data bits
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.Parity">
            <summary>
            Get the parity
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.StopBits">
            <summary>
            Get the number of stop bits
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.Protocol">
            <summary>
            Get the current protocol
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.HwHandShake">
            <summary>
            Get the hardware handshake state
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.SwHandShake">
            <summary>
            Get the software handshake state
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.ComPort_Capabilities">
            <summary>
            Get the Capabilities of this com port. (RS 232/422/485 and RTS/CTS Support).
                        Bitwise against the ComportCapabilitiesEnum.
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.IComPort.SupportedBaudRates">
            <summary>
            Get the supported baudrates of this com port.
                        Bitwise against the ComBaudRatesEnum.
            
            </summary>
        </member>
        <member name="E:Crestron.RAD.Common.Transports.IComPort.SerialDataReceived">
            <summary>
            Serial data receive event handler
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.ComPortSpec.BaudRate">
            <summary>
            Property to set the rate at which the serial data will be transmitted and received at.
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.ComPortSpec.DataBits">
            <summary>
            Set the number of databits in each serial packet.
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.ComPortSpec.Parity">
            <summary>
            Set the parity of the bits in the serial packets.
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.ComPortSpec.StopBits">
            <summary>
            Set the number of stop bits used.
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.ComPortSpec.Protocol">
            <summary>
            Set the Serial protocol the port will use.
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.ComPortSpec.HardwareHandShake">
            <summary>
            Set the hardware handshaking mode of the port.
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.ComPortSpec.SoftwareHandshake">
            <summary>
            Set the software handshaking mode of the port.
            
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.ComPortSpec.ReportCTSChanges">
            <summary>
            Indicate to the driver to report CTS state changes.
            
            </summary>
        </member>
        <member name="T:Crestron.RAD.Common.Transports.TcpTransport">
            <summary>
            Generic TCP transport that uses TCPClient.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Transports.TcpTransport.Client">
            <summary>
            Client used for communication.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Transports.TcpTransport.ReconnectTimer">
            <summary>
            CTimer used for reconnecting if there is a non-user disconnect.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Transports.TcpTransport.TimeBetweenReconnects">
            <summary>
            The time this transport waits in milliseconds before it attempts to reconnect to the device.
            </summary>
        </member>
        <member name="F:Crestron.RAD.Common.Transports.TcpTransport.LastMessage">
            <summary>
            Tracks the last sent message to TCPClient.
            This is set in this class, but not used by this class.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.TcpTransport.WaitingForAsyncSendCallback">
            <summary>
            True if a SendDataAsync was called on <see cref="F:Crestron.RAD.Common.Transports.TcpTransport.Client"/> and <see cref="M:Crestron.RAD.Common.Transports.TcpTransport.SendDataCallback(Crestron.SimplSharp.CrestronSockets.TCPClient,System.Int32)"/> 
            hasn't been invoked by the client. This is used to prevent multiple SendDataAsync calls when the previous 
            one has not finished.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.TcpTransport.Connected">
            <summary>
            Returns true if TCPClient is connected.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.TcpTransport.ReConnecting">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="P:Crestron.RAD.Common.Transports.TcpTransport.EnableAutoReconnect">
            <summary>
            Driver will attempt to reconnect to the device on a non-user disconnect if this is set to true.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.TcpTransport.#ctor(System.Boolean,System.Boolean,System.Action{System.String},System.Boolean,System.Boolean)">
            <summary>
            Expanded constructor. 
            </summary>
            <param name="autoReconnect">True to enable auto reconnect on non-user disconnects.</param>
            <param name="logging">True to enable logging.</param>
            <param name="customLogger">Optional custom logger to use for logging by this object.</param>
            <param name="rxDebug">True to enable RX logging.</param>
            <param name="txDebug">True to enable TX logging.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.TcpTransport.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.TcpTransport.Initialize(Crestron.SimplSharp.IPAddress,System.Int32)">
            <summary>
            Initializes TCPTransport with an IP address and port. 
            </summary>
            <param name="ipAddress">IP address used for TCPClient.</param>
            <param name="port">Port used for TCPClient.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.TcpTransport.Initialize(System.String,System.Int32)">
            <summary>
            Initializes TCPTransport with an address that can be a hostname or an IP address.
            </summary>
            <param name="address">IP address or hostname used for TCPClient.</param>
            <param name="port">Port used for TCPClient.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.TcpTransport.SendMethod(System.String,System.Object[])">
            <summary>
            Sends the specified message to the device.
            </summary>
            <param name="message">Message to send to the device.</param>
            <param name="paramaters">Not used.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.TcpTransport.ReceiveData(Crestron.SimplSharp.CrestronSockets.TCPClient,System.Int32)">
            <summary>
            Invoked by TCPClient when it has received data. This will call DataHandler with the received message.
            </summary>
            <param name="client">Client that has received data.</param>
            <param name="size">Size of data received.</param>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.TcpTransport.Start">
            <summary>
            Connects TCPClient to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.Common.Transports.TcpTransport.Stop">
            <summary>
            Disconnects TCPClient from the device.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher">
            <summary>
            Represents an audio video switcher. 
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.AudioVideoSwitcherProtocol">
            <summary>
            The protocol instance that handles communication with the device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.AudioVideoSwitcherData">
            <summary>
            The configuration of the driver
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.Dispose">
            <summary>
            Implementation of IDisposable
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.AbstractClassType">
            <summary>
            See <see cref="P:Crestron.RAD.Common.BasicDriver.ABasicDriver.AbstractClassType"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.ConvertJsonFileToDriverData(System.String)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.ConvertJsonFileToDriverData(System.String)"/>.
            <para>Overridden to deserialize the string to type <see cref="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherRootObject"/> and
            assigns it to <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.AudioVideoSwitcherData"/>.
            This then invokes <see cref="M:Crestron.RAD.Common.BasicDriver.ABasicDriver.Initialize(Crestron.RAD.Common.BasicDriver.BaseRootObject)"/> with <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.AudioVideoSwitcherData"/> cast
            as <see cref="T:Crestron.RAD.Common.BasicDriver.BaseRootObject"/> and assigns all matching hidden properties.</para>
            </summary>
            <param name="jsonString">String object created using the first embedded resource that ends with .json.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.CreateDeviceSupportConverter">
            <summary>
            Overridden to add support for DeviceSupport{} in AudioVideoExtender 
            having invalid values.
            </summary>
            <returns>New instance of <see cref="T:Crestron.RAD.Common.DeviceSupportConverter"/>.</returns>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.AudioVideoSwitcherId">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitcher.AudioVideoSwitcherId"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.AutoDetectConfiguration">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.AutoDetectConfiguration"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.GetRoutableOutputs">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.GetRoutableOutputs"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.GetRoutableInputs">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.GetRoutableInputs"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.RouteVideoInput(System.String,System.String)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.RouteVideoInput(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.RouteAudioInput(System.String,System.String)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.RouteAudioInput(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.SupportsAudioBreakaway">
            <summary>
            Specifies if this switching device supports routing audio and video from different input extenders
            to one extender output.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.SetOutputExtender(System.UInt32,Crestron.RAD.Common.Interfaces.IAudioVideoExtender)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.SetOutputExtender(System.UInt32,Crestron.RAD.Common.Interfaces.IAudioVideoExtender)"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.SetInputExtender(System.UInt32,Crestron.RAD.Common.Interfaces.IAudioVideoExtender)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.SetInputExtender(System.UInt32,Crestron.RAD.Common.Interfaces.IAudioVideoExtender)"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.CompatibleOutputs">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.CompatibleOutputs"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.CompatibleInputs">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.CompatibleInputs"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.CurrentTemperature">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IHardwareDiagnostics.CurrentTemperature"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.CurrentTemperatureUnits">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IHardwareDiagnostics.CurrentTemperatureUnits"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.SupportsTemperatureFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IHardwareDiagnostics.SupportsTemperatureFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.SupportsPowerFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPower.SupportsPowerFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.PowerIsOn">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPower.PowerIsOn"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.SupportsDiscretePower">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPower.SupportsDiscretePower"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.PowerOn">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IPower.PowerOn"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.PowerOff">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IPower.PowerOff"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.SupportsTogglePower">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPower.SupportsTogglePower"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.PowerToggle">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IPower.PowerToggle"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.SupportsWarmUpTime">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPower.SupportsWarmUpTime"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.WarmUpTime">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPower.WarmUpTime"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.SupportsCoolDownTime">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPower.SupportsCoolDownTime"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.CoolDownTime">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPower.CoolDownTime"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.WarmingUp">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPower.WarmingUp"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcher.CoolingDown">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPower.CoolingDown"/>.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol">
            <summary>
            An abstract protocol class meant to be inherited by drivers.
            
            The protocol is where all commands are built, and where responses are handled.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.AutoDetectConfiguration">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.AutoDetectConfiguration"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.SupportsAudioBreakaway">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.SupportsAudioBreakaway"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.AudioVideoSwitcherId">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitcher.AudioVideoSwitcherId"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.CurrentTemperature">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IHardwareDiagnostics.CurrentTemperature"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.CurrentTemperatureUnits">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IHardwareDiagnostics.CurrentTemperatureUnits"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.CompatibleOutputs">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.CompatibleOutputs"/>.
            This collection is built from the embedded JSON file 
            (<see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherData.CompatibleOutputs"/>) 
            when <see cref="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.Initialize(System.Object)"/> is called.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.CompatibleInputs">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.CompatibleInputs"/>.
            This collection is built from the embedded JSON file 
            (<see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherData.CompatibleInputs"/>) 
            when <see cref="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.Initialize(System.Object)"/> is called.
            </summary>
        </member>
        <member name="F:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.RootObject">
            <summary>
            Object that contains all information about the API and meta-data the driver needs to function.
            Driver developers can access this to get any information that was in the embedded JSON file.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.#ctor(Crestron.RAD.Common.Transports.ISerialTransport,System.Byte)">
            <summary>
            Constructor
            </summary>
            <param name="transport">The transport that will be used for sending and receiving data.</param>
            <param name="id">An ID that can be used if the API requires an ID for the device in commands/responses.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.Initialize(System.Object)">
            <summary>
            Loads the configuration for the switcher and sets the 
            routable/compatible inputs/outputs, adds all defined polling commands to the queue for the switcher and extenders.
            </summary>
            <param name="driverData">Object of type <see cref="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherRootObject"/>.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.MakeExtenderCollection(System.Collections.Generic.List{Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender},System.Boolean)">
            <summary>
            Helper method to create instances of <see cref="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender"/> for each extender found
            in the embedded JSON file.
            </summary>
            <param name="configurationCollection">The target collection that contains information about each extender.</param>
            <param name="makePollCommands">True if this should also add poll commands to the queue found in extenders.
            This is set to false when loading the compatible inputs/outputs.</param>
            <returns>Collection of <see cref="T:Crestron.RAD.Common.Interfaces.IAudioVideoExtender"/>.</returns>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.Dispose">
            <summary>
            Implementation of IDisposable.
            <para>This can be overriden in the driver, but the base call must be made.</para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ConnectionChangedEvent(System.Boolean)">
            <summary>
            Method to capture connection change events from <see cref="T:Crestron.RAD.Common.Transports.ISerialTransport"/>.
            <para>Drivers can override this to perform custom actions based on the connection state changing. 
            The base method should still be called to ensure the application gets the event
            and that <see cref="P:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.IsConnected"/> is properly set.</para>
            </summary>
            <param name="connection">The current connection state</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ResponseValidator(System.String,Crestron.RAD.Common.Enums.CommonCommandGroupType)">
            <summary>
            Validates the received data is a properly formatted and handled response, sets the command group 
            based on what is contained in <see cref="F:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.RootObject"/>, and sets <see cref="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.Ready"/> to true.
            <para>
            This will attempt to gather responses based on the delimiter 
            specified in <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherFeedback.ApiDelimiter"/>.
            </para>
            <para>
            This will check for all AV Switcher feedback headers, and then it will loop through the extenders if nothing
            matched the switcher first.
            </para>
            </summary>
            <param name="response">
            The data the driver has received so far. 
            <para>
            If <see cref="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.Ready"/> or <see cref="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.Ignore"/> is not 
            set to true, then the next call to this method will contain the previous response and whatever new
            data has been received since. There is logic in the framework to clear this buffer if 
            a response is not validated within the value specified by <see cref="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.TimeOut"/>.
            </para>
            </param>
            <param name="commandGroup">
            The command group of the last <see cref="T:Crestron.RAD.Common.BasicDriver.CommandSet"/> sent to the device. 
            To get more information on the <see cref="T:Crestron.RAD.Common.BasicDriver.CommandSet"/>, reference <see cref="!:PendingRequest"/>.
            <para>This is useful when <see cref="F:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.WaitForResponse"/> is true and 
            there is no context to responses.</para>
            </param>
            <returns>Instance of ValidatedRxData that is ready to be processed by the internal receiving logic.</returns>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ChooseDeconstructMethod(Crestron.RAD.Common.BasicDriver.ValidatedRxData)">
            <summary>
            Chooses which DeConstruct method to call. 
            This should be overriden if the driver needs to manage this in a custom way using 
            <see cref="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.CustomCommandGroup"/>.
            </summary>
            <param name="validatedData">Instance of <see cref="T:Crestron.RAD.Common.BasicDriver.ValidatedRxData"/> where 
            <see cref="P:Crestron.RAD.Common.BasicDriver.ValidatedRxData.Ready"/> was set to true by <see cref="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ResponseValidator(System.String,Crestron.RAD.Common.Enums.CommonCommandGroupType)"/>.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructAckNak(System.String)">
            <summary>
            Handles a Ack/Nak command group response.
            </summary>
            <param name="response">The response from the device without any headers.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructSwitcherRoute(System.String)">
            <summary>
            This must be overridden in the driver if the driver supports routing feedback.
            </summary>
            <param name="response">Response from the device</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructTemperature(System.String)">
            <summary>
            Invokes <see cref="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ConvertCurrentTempearture(Crestron.RAD.Common.Enums.TemperatureUnit)"/> if there is a change to the temperature value.
            </summary>
            <param name="response">This is parsed as a short value and exceptions are caught and logged.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructTemperatureUnits(System.String)">
            <summary>
            Invokes <see cref="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ConvertCurrentTempearture(Crestron.RAD.Common.Enums.TemperatureUnit)"/> if there is a change to the units.
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ConvertCurrentTempearture(Crestron.RAD.Common.Enums.TemperatureUnit)">
            <summary>
            Converts <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.CurrentTemperature"/> to the specified new units of measurement.
            The default logic assumes the device will report the new temperature value before the units are 
            specified, so this returns the current temperature by default. Driver developers should override this
            if the API behaves differently.
            </summary>
            <param name="newUnits">The new units of measurement</param>
            <returns>Converted temperature value</returns>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructSwitcherPower(System.String)">
            <summary>
            Determines if the provided response is On or Off feedback, sets 
            <see cref="P:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.PowerIsOn"/> based on the response, and throws an event using
            <see cref="E:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.PowerIsOnChanged"/>.
            </summary>
            <param name="response">The validated response.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructCecPort(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderCecPort,System.String)">
            <summary>
            Verifies the response is not null/empty and invokes <see cref="E:Crestron.RAD.Common.Interfaces.ICecPort.IncomingData"/> with the response.
            </summary>
            <param name="port">The port object that is receiving data.</param>
            <param name="response">The validated response.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructComPort(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderComPort,System.String)">
            <summary>
            Verifies the response is not null/empty and invokes <see cref="E:Crestron.RAD.Common.Interfaces.IDeviceComPort.IncomingData"/> with the response.
            </summary>
            <param name="port">The port object that is receiving data.</param>
            <param name="response">The validated response.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructDigitalGenericIo(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderGenerioIo,System.String)">
            <summary>
            Verifies the response is not null/empty and determines if this is on/off feedback.
            </summary>
            <param name="port">The port object that is receiving data.</param>
            <param name="response">The validated response.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructAnalogGenericIo(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderGenerioIo,System.String)">
            <summary>
            Verifies the response is not null/empty and determines what ushort value it is.
            </summary>
            <param name="port">The port object that is receiving data.</param>
            <param name="response">The validated response.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructRelayPort(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderRelay,System.String)">
            <summary>
            Verifies the response is not null/empty and determines if this is on/off feedback.
            </summary>
            <param name="port">The port object that is receiving data.</param>
            <param name="response">The validated response.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructExtenderPower(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender,System.String)">
            <summary>
            Determines if the provided response is On or Off feedback for the specified extender, sets 
            <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.PowerIsOn"/> based on the response.
            </summary>
            <param name="extender">The extender this feedback is for.</param>
            <param name="response">The validated response.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructExtenderVolume(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender,System.String)">
            <summary>
            Determines if the provided response is volume feedback for the specified extender, sets 
            <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.VolumePercent"/> based on the response.
            <para>The default logic assumes the device will respond with a percentage. If it responds in dB or another scale, 
            then the driver developer has to override this and convert it to a percentage and call the base with 
            updated response.</para>
            </summary>
            <param name="extender">The extender this feedback is for.</param>
            <param name="response">The validated response.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructExtenderMute(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender,System.String)">
            <summary>
            Determines if the provided response is On or Off feedback for the specified extender, sets 
            <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.Muted"/> based on the response.
            </summary>
            <param name="extender">The extender this feedback is for.</param>
            <param name="response">The validated response.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructExtenderToneControl(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender,System.String)">
            <summary>
            Determines if the provided response is On or Off feedback for the specified extender, sets 
            <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.ToneControlState"/> based on the response.
            </summary>
            <param name="extender">The extender this feedback is for.</param>
            <param name="response">The validated response.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructExtenderBass(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender,System.String)">
            <summary>
            Determines if the provided response is bass feedback for the specified extender, sets 
            <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.BassPercent"/> based on the response.
            <para>The default logic assumes the device will respond with a percentage. If it responds in dB, 
            then the driver developer has to override this and convert it to a percentage and call the base with 
            updated response.</para>
            </summary>
            <param name="extender">The extender this feedback is for.</param>
            <param name="response">The validated response.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructExtenderTreble(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender,System.String)">
            <summary>
            Determines if the provided response is treble feedback for the specified extender, sets 
            <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.TreblePrecent"/> based on the response.
            <para>The default logic assumes the device will respond with a percentage. If it responds in dB, 
            then the driver developer has to override this and convert it to a percentage and call the base with 
            updated response.</para>
            </summary>
            <param name="extender">The extender this feedback is for.</param>
            <param name="response">The validated response.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructExtenderSpeakerProtect(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender,System.String)">
            <summary>
            Determines if the provided response is On or Off feedback for the specified extender, sets 
            <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.IsSpeakerProtectOn"/> based on the response.
            </summary>
            <param name="extender">The extender this feedback is for.</param>
            <param name="response">The validated response.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructExtenderLoudness(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender,System.String)">
            <summary>
            Determines if the provided response is On or Off feedback for the specified extender, sets 
            <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.IsSpeakerProtectOn"/> based on the response.
            </summary>
            <param name="extender">The extender this feedback is for.</param>
            <param name="response">The validated response.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructExtenderDcFaultState(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender,System.String)">
            <summary>
            Determines if the provided response is DC fault state feedback for the specified extender, sets 
            <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.DcFaultState"/> based on the response.
            </summary>
            <param name="extender">The extender this feedback is for.</param>
            <param name="response">The validated response.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructExtenderClippingAudio(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender,System.String)">
            <summary>
            Determines if the provided response has clipping or no clipping for the specified extender, sets 
            <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.AudioIsClipping"/> based on the response.
            </summary>
            <param name="extender">The extender this feedback is for.</param>
            <param name="response">The validated response.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructExtenderComPortMessage(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender,System.String)">
            <summary>
            
            </summary>
            <param name="extender"></param>
            <param name="response"></param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.DeConstructExtenderRoute(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender,System.String)">
            <summary>
            Hanldes the extender's route feedback if the extender supports switching.
            No base implementation provided. 
            </summary>
            <param name="extender">The extender that needs to deconstruct the route</param>
            <param name="response">The response form the device.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.GetExtenderById(System.String)">
            <summary>
            Helper method to get an extender object by ID.
            </summary>
            <param name="id">Unique ID of an extender</param>
            <returns>The extender with the same ID as the specified one. Null if no extender was found.</returns>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.GetExtenderByApiIdentifier(System.String)">
            <summary>
            Helper method to get an extender object by API identifier.
            </summary>
            <param name="apiIdentifier">API identifier of an extender</param>
            <returns>The extender with the same API identifier as the specified one. Null if no extender was found.</returns>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.RouteVideoInput(System.String,System.String)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.RouteVideoInput(System.String,System.String)"/>.
            
            This method will look through the data contained in the embedded JSON-formatted file
            and retrieve the correct API identifier for each extender. This will replace the string "{input}"
            with that input's API identifier, and the same will be done with "{output}". This will
            match the extenders by ID.
            
            <para>Drivers must override this if the API command built differs from the standard implementation.</para>
            <para>Default logic assumes there is no audio-breakaway supported. If it is and different API commands are used
            for the different routes, then the method must be overriden and build the independent commands manually.</para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.RouteAudioInput(System.String,System.String)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.RouteAudioInput(System.String,System.String)"/>.
            
            This method will look through the data contained in the embedded JSON-formatted file
            and retrieve the correct API identifier for each extender. This will replace the string "{input}"
            with that input's API identifier, and the same will be done with "{output}". This will
            match the extenders by ID.
            
            <para>Drivers must override this if the API command built differs from the standard implementation.</para>
            <para>Default logic assumes there is no audio-breakaway supported. If it is and different API commands are used
            for the different routes, then the method must be overriden and build the independent commands manually.</para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderRouteVideoInput(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender,System.String,System.String)">
            <summary>
            Mirrors the functionality for <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.RouteVideoInput(System.String,System.String)"/> but for instances
            of <see cref="T:Crestron.RAD.Common.Interfaces.IAudioVideoExtender"/>. 
            
            <para>Drivers would override this if the API command built differs from the standard implementation.</para>
            </summary>
            <param name="targetExtender">The extender that needs to route an input to and output.</param>
            <param name="inputId">The extender's input ID that needs to be routed.</param>
            <param name="outputId">The extender's output ID that needs to be routed.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderRouteAudioInput(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender,System.String,System.String)">
            <summary>
            Mirrors the functionality for <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.RouteAudioInput(System.String,System.String)"/> but for instances
            of <see cref="T:Crestron.RAD.Common.Interfaces.IAudioVideoExtender"/>. 
            
            <para>Drivers would override this if the API command built differs from the standard implementation.</para>
            </summary>
            <param name="targetExtender">The extender that needs to route an input to and output.</param>
            <param name="inputId">The extender's input ID that needs to be routed.</param>
            <param name="outputId">The extender's output ID that needs to be routed.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.PowerOn">
            <summary>
            Builds and send the PowerOn commmand to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.PowerOff">
            <summary>
            Builds and send the PowerOff commmand to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.PowerToggle">
            <summary>
            Builds and send the PowerToggle commmand to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.PowerToggleCallback">
            <summary>
            Callback for <see cref="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.PowerToggle"/> to determine if <see cref="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.WarmUp"/> or
            <see cref="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.CoolDown"/> need to be invoked after the command is sent to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderPowerOn(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the PowerOn commmand for the specified extender to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderPowerOff(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the PowerOff commmand for the specified extender to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderPowerToggle(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the PowerToggle commmand for the specified extender to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.WarmUp">
            <summary>
            Invoked when the PowerOn command is sent to the device and the driver believes power to be off. 
            Sets the <see cref="P:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.WarmingUp"/> to true and invokes <see cref="E:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.WarmingUpChanged"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.WarmedUp(System.Object)">
            <summary>
            Invoked when the WarmUp sequence is complete. 
            Sets the <see cref="P:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.WarmingUp"/> to false and invokes <see cref="E:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.WarmingUpChanged"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.CoolDown">
            <summary>
            Invoked when the PowerOff command is sent to the device and the driver believes power to be on.
            Sets the <see cref="P:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.CoolingDown"/> to true and invokes <see cref="E:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.CoolingDownChanged"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.CooledDown(System.Object)">
            <summary>
            Invoked when the CoolDown sequence is complete. 
            Sets the <see cref="P:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.CoolingDown"/> to false and invokes <see cref="E:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.CoolingDownChanged"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.WarmUpCoolDownProcessed">
            <summary>
            See <see cref="M:Crestron.RAD.Common.BasicDriver.ABaseDriverProtocol.WarmUpCoolDownProcessed"/>.
            Used for extender warmup/cooldown.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderMuteOn(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the MuteOn commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderMuteOff(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the MuteOff commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderMute(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the Mute commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderSetVolume(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender,System.UInt32)">
            <summary>
            Builds and send the SetVolume commmand for the specified to the device.
            The paramater will be a percentage value.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderPressVolumeUp(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the VolumeUp commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderReleaseVolumeUp(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Invoked when Volume ramping should stop. There is no base implementation for this since the 
            framework assumes ramping is done by sending a command on repeat.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderPressVolumeDown(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the VolumeDown commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderReleaseVolumeDown(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Invoked when Volume ramping should stop. There is no base implementation for this since the 
            framework assumes ramping is done by sending a command on repeat.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderToneControlOn(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the ToneControlOn commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderToneControlOff(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the ToneControlOff commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderToneControlToggle(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the ToneControlToggle commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderLoudnessOn(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the LoudnessOn commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderLoudnessOff(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the LoudnessOff commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderToggleLoudness(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the ToggleLoudness commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderResetBassToDefaultValue(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the ResetBassToDefaultValue commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderResetTrebleToDefaultValue(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the ResetTrebleToDefaultValue commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderSetBass(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender,System.Int32)">
            <summary>
            Builds and send the SetBass commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderPressBassUp(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the BassUp commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderReleaseBassUp(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Invoked when Bass ramping should stop. There is no base implementation for this since the 
            framework assumes ramping is done by sending a command on repeat.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderPressBassDown(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the BassDown commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderReleaseBassDown(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Invoked when Bass ramping should stop. There is no base implementation for this since the 
            framework assumes ramping is done by sending a command on repeat.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderSetTreble(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender,System.Int32)">
            <summary>
            Builds and send the SetTreble commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderPressTrebleUp(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the TrebleUp commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderReleaseTrebleUp(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Invoked when Treble ramping should stop. There is no base implementation for this since the 
            framework assumes ramping is done by sending a command on repeat.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderPressTrebleDown(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the TrebleDown commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderReleaseTrebleDown(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Invoked when Treble ramping should stop. There is no base implementation for this since the 
            framework assumes ramping is done by sending a command on repeat.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderSpeakerProtectOn(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the SpeakerProtectOn commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderSpeakerProtectOff(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the SpeakerProtectOff commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ExtenderSpeakerProtectToggle(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender)">
            <summary>
            Builds and send the SpeakerProtectToggle commmand for the specified to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.GetRoutableOutputs">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.GetRoutableOutputs"/>.
            
            <para>Drivers can modify this collection using the method <see cref="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.SetOutputExtender(System.UInt32,Crestron.RAD.Common.Interfaces.IAudioVideoExtender)"/>.</para>
            
            <para>This collection is initially set to the contents of the embedded JSON-formatted file and does not need
            to be changed unless the application modifies the collection.</para>
            
            <para>This may be overriden if the driver developer is handling the routable input/output collections in their driver.</para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.GetRoutableInputs">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.GetRoutableInputs"/>.
            
            <para>Drivers can modify this collection using the method <see cref="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.SetInputExtender(System.UInt32,Crestron.RAD.Common.Interfaces.IAudioVideoExtender)"/>.</para>
            
            <para>This collection is initially set to the contents of the embedded JSON-formatted file and does not need
            to be changed unless the application modifies the collection or the driver needs to. 
            All ListChanged events are handled internally.</para>
            
            <para>This may be overriden if the driver developer is handling the routable input/output collections in their driver.</para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.SetOutputExtender(System.UInt32,Crestron.RAD.Common.Interfaces.IAudioVideoExtender)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.SetOutputExtender(System.UInt32,Crestron.RAD.Common.Interfaces.IAudioVideoExtender)"/>.
            
            <para>Drivers can use this to set the extenders if they can detect changes on their own.
            In these cases <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.AutoDetectConfiguration"/> must be set to true otherwise applications 
            may ignore the changes.</para>
            
            <para>When this class is initialized, the extender configuration specified in the
            embedded JSON-formatted file will be used.</para>
            
            <para>The initial configuration determines the maximum number of inputs and outputs.</para>
            
            <para>This may be overriden if the driver developer is handling the routable input/output collections in their driver.</para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.SetInputExtender(System.UInt32,Crestron.RAD.Common.Interfaces.IAudioVideoExtender)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.SetInputExtender(System.UInt32,Crestron.RAD.Common.Interfaces.IAudioVideoExtender)"/>.
            
            <para>Drivers can use this to set the extenders if they can detect changes on their own.
            In these cases <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.AutoDetectConfiguration"/> must be set to true otherwise applications 
            may ignore the changes.</para>
            
            <para>When this class is initialized, the extender configuration specified in the
            embedded JSON-formatted file will be used.</para>
            
            <para>This may be overriden if the driver developer is handling the routable input/output collections in their driver.</para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.ScaleValue(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Scales from one range to another range.
            </summary>
            <param name="raw">The value being scaled.</param>
            <param name="rawMin">The minimum value of raw.</param>
            <param name="rawMax">The maximum value of raw.</param>
            <param name="scaledMin">The minimum value the scaled value can be.</param>
            <param name="scaledMax">The maxumum value the scaled value can be.</param>
            <returns>Scaled value</returns>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.SendDataToComPort(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderComPort,System.String,System.Object[])">
            <summary>
            Builds a command that instructs the device to send the specified payload to its COM port.
            This will replace "{value}" with data.
            </summary>
            <param name="port">The COM port.</param>
            <param name="data">The payload data.</param>
            <param name="parameters">Not used by default.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.SetComPortConfiguration(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderComPort,Crestron.RAD.Common.Transports.ComPortSpec)">
            <summary>
            This must be implemented by a driver if this feature is supported.
            </summary>
            <param name="port">The COM port.</param>
            <param name="configuration">The desired configuration of the COM port.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.SendDataToCecPort(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderCecPort,System.String,System.Object[])">
            <summary>
            Builds a command that instructs the device to send the specified payload to its CEC pin.
            This will replace "{value}" with data.
            </summary>
            <param name="port">The CEC port.</param>
            <param name="data">The payload data.</param>
            <param name="parameters">Not used by default.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.SetDigitalOutputState(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderGenerioIo,System.Boolean)">
            <summary>
            Builds a command that instructs the device to set the digital output to the specified state.
            </summary>
            <param name="port">The GenericIo port.</param>
            <param name="state">The new state.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol.SwitchRelayState(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderRelay,System.Boolean)">
            <summary>
            Builds a command that instructs the device to set the relay to the specified state.
            </summary>
            <param name="port">The Relay port.</param>
            <param name="state">The new state.</param>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender">
            <summary>
            Used internally for default <see cref="T:Crestron.RAD.Common.Interfaces.IAudioVideoExtender"/> logic.
            This class will decide if feedback is applicable to itself and relies on <see cref="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol"/> 
            to do the processing so that a driver developer can override all methods within one class instead of creating 
            a new implementation of <see cref="T:Crestron.RAD.Common.Interfaces.IAudioVideoExtender"/> to override certain fields. The same logic applies
            to commands being sent to the device.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.Initialize(Crestron.RAD.DeviceTypes.AudioVideoSwitcher.AAudioVideoSwitcherProtocol,Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherData,Crestron.RAD.Common.Logging.Logger)">
            <summary>
            Invoked after being deserialized
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.DeviceSupport">
            <summary>
            Defines all supported features on this extender instance.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.StandardCommands">
            <summary>
            Specifies all supports commands by this driver.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.BuildCommand(Crestron.RAD.Common.Enums.StandardCommandsEnum,Crestron.RAD.Common.Enums.CommonCommandGroupType,Crestron.RAD.Common.BasicDriver.CommandPriority,System.Action)">
            <summary>
            Builds a command for an extender using <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.StandardCommands"/>.
            Driver developers must use this to build the initial CommandSet prior to sending.
            This will attempt to find the standard command in <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.StandardCommands"/>, but if 
            no match is found then the CommandSet will be instantiated with an empty string for
            <see cref="P:Crestron.RAD.Common.BasicDriver.CommandSet.Command"/>.
            </summary>
            <param name="standardCommand">The key to use from <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.StandardCommands"/>.</param>
            <param name="subCommandGroup">The command group that should be used for this command. 
            This is used for sending/queueing logic.</param>
            <param name="priority">The priority of the command</param>
            <param name="sendCallback">The action to perform after this command is sent to the device (not to the queue).</param>
            <returns>An instance of CommandSet</returns>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.Feedback">
            <summary>
            Feedback information
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.IsHandledFeedback(System.String,Crestron.RAD.Common.Enums.CommonCommandGroupType@)">
            <summary>
            Method used to check is the feedback has handling in the framework for processing the response
            </summary>
            <param name="response"></param>
            <param name="commandGroup"></param>
            <returns>True is response has matching feedback handling</returns>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.ProcessFeedback(System.String,Crestron.RAD.Common.Enums.CommonCommandGroupType,Crestron.RAD.Common.BasicDriver.ValidatedRxData)">
            <summary>
            Method used to process the response and prepare the validated data prior to chosing the deconstruct
            method needed to update the device feedback
            </summary>
            <param name="response"></param>
            <param name="commandGroup"></param>
            <param name="validatedData"></param>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.Id">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Id"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.Name">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Name"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.Manufacturer">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Manufacturer"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.Model">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Model"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.Type">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Type"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.AudioInputDetails">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.AudioInputDetails"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.AudioOutputDetails">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.AudioOutputDetails"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.VideoInputDetails">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.VideoInputDetails"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.VideoOutputDetails">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.VideoOutputDetails"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.Ports">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Ports"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.VideoSourceExtenderId">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.VideoSourceExtenderId"/>.
            
            This can be set directly by the driver and is required when the driver implements response handling
            for route feedback. 
            
            <para>Setting this will automatically invoke <see cref="E:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.VideoSourceExtenderIdChanged"/> if the
            new value is different than the previous value.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.AudioSourceExtenderId">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.AudioSourceExtenderId"/>.
            
            This can be set directly by the driver and is required when the driver implements response handling
            for route feedback. 
            
            <para>Setting this will automatically invoke <see cref="E:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.AudioSourceExtenderIdChanged"/> if the
            new value is different than the previous value.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.AudioIsClipping">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.AudioIsClipping"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsAudioIsClippingFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.SupportsAudioIsClippingFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.DcFaultState">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.DcFaultState"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsDcFaultStateFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.SupportsDcFaultStateFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.ApiIdentifier">
            <summary>
            The value to use when swapping out strings "{input}" and "{output}" in defined commands/feedback.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsAudioBreakaway">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.SupportsAudioBreakaway"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.AutoDetectConfiguration">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.AutoDetectConfiguration"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.GetRoutableOutputs">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.GetRoutableOutputs"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.GetRoutableInputs">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.GetRoutableInputs"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.RouteVideoInput(System.String,System.String)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.RouteVideoInput(System.String,System.String)"/>.
            </summary>
            <param name="inputId">The ID (<see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Id"/>) of the input.</param>
            <param name="outputId">The ID (<see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Id"/>) of the output.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.RouteAudioInput(System.String,System.String)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.RouteAudioInput(System.String,System.String)"/>.
            </summary>
            <param name="inputId">The ID (<see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Id"/>) of the input.</param>
            <param name="outputId">The ID (<see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Id"/>) of the output.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SetOutputExtender(System.UInt32,Crestron.RAD.Common.Interfaces.IAudioVideoExtender)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.SetOutputExtender(System.UInt32,Crestron.RAD.Common.Interfaces.IAudioVideoExtender)"/>.
            </summary>
            <param name="index">The index of the collection returned by <see cref="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.GetRoutableOutputs"/> to be set.</param>
            <param name="compatibleExtender">Instance of extender retrievied from <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.CompatibleOutputs"/>.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SetInputExtender(System.UInt32,Crestron.RAD.Common.Interfaces.IAudioVideoExtender)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.SetInputExtender(System.UInt32,Crestron.RAD.Common.Interfaces.IAudioVideoExtender)"/>.
            </summary>
            <param name="index">The index of the collection returned by <see cref="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.GetRoutableInputs"/> to be set.</param>
            <param name="compatibleExtender">Instance of extender retrievied from <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.CompatibleInputs"/>.</param>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.CompatibleOutputs">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.CompatibleOutputs"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.CompatibleInputs">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.CompatibleInputs"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.GetExtenderById(System.String)">
            <summary>
            Helper method to get an extender object by ID.
            </summary>
            <param name="id">Unique ID of an extender (<see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Id"/>).</param>
            <returns>The extender with the same ID as the specified one. Null if no extender was found.</returns>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.GetExtenderByApiIdentifier(System.String)">
            <summary>
            Helper method to get an extender object by API identifier.
            </summary>
            <param name="apiIdentifier">API identifier of an extender</param>
            <returns>The extender with the same API identifier as the specified one. Null if no extender was found.</returns>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsPowerFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPower.SupportsPowerFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsDiscretePower">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPower.SupportsDiscretePower"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsTogglePower">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPower.SupportsTogglePower"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsWarmUpTime">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPower.SupportsWarmUpTime"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsCoolDownTime">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPower.SupportsCoolDownTime"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.PowerIsOn">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPower.PowerIsOn"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.WarmUpTime">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPower.WarmUpTime"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.CoolDownTime">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPower.CoolDownTime"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.WarmingUp">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPower.WarmingUp"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.CoolingDown">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPower.CoolingDown"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.PowerOn">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IPower.PowerOn"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.PowerOff">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IPower.PowerOff"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.PowerToggle">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IPower.PowerToggle"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.WarmUp">
            <summary>
            This is invoked when the PowerOn/PowerToggle command is sent to the device. This will
            start the warmup sequence for this extender.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.WarmedUp">
            <summary>
            Invoked by the framework when the warmup time has elapsed.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.CoolDown">
            <summary>
            This is invoked when the PowerOff/PowerToggle command is sent to the device. This will
            start the cooldown sequence for this extender.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.CooledDown">
            <summary>
            Invoked by the framework when the cooldown time has elapsed.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.ProcessWarmUpCoolDown">
            <summary>
            Handles warmup/cooldown finishing.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsVolumePercentFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IVolume.SupportsVolumePercentFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsVolumeDbFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IVolume.SupportsVolumeDbFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsMuteFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IVolume.SupportsMuteFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsDiscreteMute">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IVolume.SupportsDiscreteMute"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsMute">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IVolume.SupportsMute"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsSetVolume">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IVolume.SupportsSetVolume"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsChangeVolume">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IVolume.SupportsChangeVolume"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.VolumePercent">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IVolume.VolumePercent"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.VolumeDb">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IVolume.VolumeDb"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.Muted">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IVolume.Muted"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.MuteOn">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IVolume.MuteOn"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.MuteOff">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IVolume.MuteOff"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.Mute">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IVolume.Mute"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SetVolume(System.UInt32)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IVolume.SetVolume(System.UInt32)"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.VolumeUp(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IVolume.VolumeUp(Crestron.RAD.Common.Enums.CommandAction)"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.VolumeDown(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IVolume.VolumeDown(Crestron.RAD.Common.Enums.CommandAction)"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsToneControlFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsToneControlFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsDiscreteToneControl">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsDiscreteToneControl"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsToneControlToggle">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsToneControlToggle"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsBassFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsBassFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsBassDbFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsBassDbFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsTrebleFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsTrebleFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsTrebleDbFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsTrebleDbFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsChangeBass">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsChangeBass"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsSetTreble">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsSetTreble"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsChangeTreble">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsChangeTreble"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsLoudnessFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsLoudnessFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsDiscreteLoudness">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsDiscreteLoudness"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsLoudnessToggle">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsLoudnessToggle"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsSetBass">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.SupportsSetBass"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.ToneControlState">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.ToneControlState"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.BassPercent">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.BassPercent"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.BassDb">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.BassDb"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.TreblePrecent">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.TreblePrecent"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.TrebleDb">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.TrebleDb"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.LoudnessState">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudio.LoudnessState"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.ToneControlOn">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudio.ToneControlOn"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.ToneControlOff">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudio.ToneControlOff"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.ToneControlToggle">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudio.ToneControlToggle"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SetBass(System.Int32)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudio.SetBass(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SetTreble(System.Int32)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudio.SetTreble(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.BassUp(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudio.BassUp(Crestron.RAD.Common.Enums.CommandAction)"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.BassDown(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudio.BassDown(Crestron.RAD.Common.Enums.CommandAction)"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.TrebleUp(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudio.TrebleUp(Crestron.RAD.Common.Enums.CommandAction)"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.TrebleDown(Crestron.RAD.Common.Enums.CommandAction)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudio.TrebleDown(Crestron.RAD.Common.Enums.CommandAction)"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.LoudnessOn">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudio.LoudnessOn"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.LoudnessOff">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudio.LoudnessOff"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.ToggleLoudness">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudio.ToggleLoudness"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.ResetBassToDefaultValue">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudio2.ResetBassToDefaultValue"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.ResetTrebleToDefaultValue">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudio2.ResetTrebleToDefaultValue"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsSpeakerProtectFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SupportsSpeakerProtectFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsDiscreteSpeakerProtect">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SupportsDiscreteSpeakerProtect"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SupportsSpeakerProtectToggle">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SupportsSpeakerProtectToggle"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.IsSpeakerProtectOn">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.ISpeakerProtect.IsSpeakerProtectOn"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SpeakerProtectOn">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SpeakerProtectOn"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SpeakerProtectOff">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SpeakerProtectOff"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.SpeakerProtectToggle">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.ISpeakerProtect.SpeakerProtectToggle"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender.Dispose">
            <summary>
            Implementation of IDisposable.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderCecPort">
            <summary>
            See <see cref="T:Crestron.RAD.Common.Interfaces.ICecPort"/>.
            Used internally by <see cref="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderCecPort.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderCecPort.SendData(System.String,System.Object[])">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.ICecPort.SendData(System.String,System.Object[])"/>.
            </summary>
            <param name="data">The data to send to the device. 
            This will use <see cref="!:SendDataCommand"/>.</param>
            <param name="parameters">Not used by default.</param>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderCecPort.IncomingDataFeedbackHeader">
            <summary>
            The header expected for responses that contain incoming data.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderCecPort.OnIncomingData(System.String)">
            <summary>
            Must be invoked whenever there is any data received on the COM port so that
            applications can route it to a different driver.
            </summary>
            <param name="data">The raw data from the device without any extra data that the API may append.</param>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderComPort">
            <summary>
            See <see cref="T:Crestron.RAD.Common.Interfaces.IDeviceComPort"/>.
            Used internally by <see cref="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderComPort.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderComPort.SetConfiguration(Crestron.RAD.Common.Transports.ComPortSpec)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IDeviceComPort.SetConfiguration(Crestron.RAD.Common.Transports.ComPortSpec)"/>
            </summary>
            <param name="configuration">The COM port configuration</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderComPort.SendData(System.String,System.Object[])">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IDeviceComPort.SendData(System.String,System.Object[])"/>
            </summary>
            <param name="data">The data to send to the device.</param>
            <param name="parameters">Not used by default.</param>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderComPort.IncomingDataFeedbackHeader">
            <summary>
            The header expected for responses that contain incoming data.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderComPort.OnIncomingData(System.String)">
            <summary>
            Must be invoked whenever there is any data received on the COM port so that
            applications can route it to a different driver.
            </summary>
            <param name="data">The raw data from the device without any extra data that the API may append.</param>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderGenerioIo">
            <summary>
            See <see cref="T:Crestron.RAD.Common.Interfaces.IGenericIo"/>.
            Used internally by <see cref="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderGenerioIo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderGenerioIo.DigitalOutputState">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IGenericIo.DigitalOutputState"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderGenerioIo.DigitalInputState">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IGenericIo.DigitalInputState"/>.
            Setting this will invoke <see cref="E:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderGenerioIo.DigitalInputStateChanged"/> if the state changes.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderGenerioIo.AnalogInputValue">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IGenericIo.AnalogInputValue"/>.
            Setting this will invoke <see cref="E:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderGenerioIo.AnalogInputValueChanged"/> if the state changes.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderGenerioIo.SetDigitalOutputState(System.Boolean)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IGenericIo.SetDigitalOutputState(System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderGenerioIo.DigitalInputStateFeedbackHeader">
            <summary>
            The header expected for responses that contain <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderGenerioIo.DigitalInputState"/> data.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderGenerioIo.AnalogInputValueStateFeedbackHeader">
            <summary>
            The header expected for responses that contain <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderGenerioIo.AnalogInputValue"/> data.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderGenerioIo.OnStateFeedback">
            <summary>
            The string expected for off feedback.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderGenerioIo.OffStateFeedback">
            <summary>
            The string expected for off feedback.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderPort">
            <summary>
            Generic IPort implementation for <see cref="T:Crestron.RAD.Common.Interfaces.IAudioVideoExtender"/>.
            Used internally by <see cref="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender"/>.
            </summary>
        </member>
        <member name="F:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderPort.ParentExtender">
            <summary>
            Specifies the extender that owns this object.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderPort.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderPort.Type">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPort.Type"/>
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderPort.Direction">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPort.Direction"/>
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderPort.Name">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPort.Name"/>
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderPort.Id">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPort.Id"/>
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderPort.PassThruOnly">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IPort.PassThruOnly"/>
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderPort.StandardCommands">
            <summary>
            Specifies all supports commands by this driver.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderPort.BuildCommand(Crestron.RAD.Common.Enums.StandardCommandsEnum,Crestron.RAD.Common.Enums.CommonCommandGroupType,Crestron.RAD.Common.BasicDriver.CommandPriority,System.Action)">
            <summary>
            Builds a command for a port using <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderPort.StandardCommands"/>.
            Driver developers must use this to build the initial CommandSet prior to sending.
            This will attempt to find the standard command in <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderPort.StandardCommands"/>, but if 
            no match is found then the CommandSet will be instantiated with an empty string for
            <see cref="P:Crestron.RAD.Common.BasicDriver.CommandSet.Command"/>.
            </summary>
            <param name="standardCommand">The key to use from <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderPort.StandardCommands"/>.</param>
            <param name="subCommandGroup">The command group that should be used for this command. 
            This is used for sending/queueing logic.</param>
            <param name="priority">The priority of the command</param>
            <param name="sendCallback">The action to perform after this command is sent to the device (not to the queue).</param>
            <returns>An instance of CommandSet</returns>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderRelay">
            <summary>
            See <see cref="T:Crestron.RAD.Common.Interfaces.IRelayPort"/>.
            Used internally by <see cref="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtender"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderRelay.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderRelay.CurrentState">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IRelayPort.CurrentState"/>.
            Setting this will invoke <see cref="E:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderRelay.CurrentStateChanged"/> if the state changes.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderRelay.SwitchState(System.Boolean)">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IRelayPort.SwitchState(System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderRelay.CurrentStateFeedbackHeader">
            <summary>
            The header expected for responses that contain <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderRelay.CurrentState"/> data.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderRelay.OnStateFeedback">
            <summary>
            The string expected for off feedback.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Extender.AudioVideoExtenderRelay.OffStateFeedback">
            <summary>
            The string expected for off feedback.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherRootObject">
            <summary>
            Specifies the configuration of the audio/video switcher.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherRootObject.CrestronSerialDeviceApi">
            <summary>
            Extended CrestronSerialDeviceApi with AudioVideoSwitcher properties.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherDeviceApi">
            <summary>
            Information about the AudioVideoSwitcher device.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherDeviceApi.Api">
            <summary>
            Extended API with AudioVideoSwitcher properties.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherApi">
            <summary>
            Information about the device's API.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherApi.AudioVideoSwitcher">
            <summary>
            See <see cref="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherData"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherApi.Feedback">
            <summary>
            See <see cref="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherFeedback"/>.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherFeedback">
            <summary>
            Information about the device's supported feedback.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherFeedback.ApiDelimiter">
            <summary>
            The message delimiter common to all messages handled by this driver.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherFeedback.PowerFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherFeedback.PowerFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherFeedback.TemperatureFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherFeedback.TemperatureFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherFeedback.RoutedExtenderFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherFeedback.RoutedExtenderFeedback"/>.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback">
            <summary>
            Information about all feedback supported by an <see cref="T:Crestron.RAD.Common.Interfaces.IAudioVideoExtender"/> instance.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.PowerFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.PowerFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.MuteFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.MuteFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.VolumeFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.VolumeFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.BassFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.BassFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.TrebleFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.TrebleFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.ToneControlFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.ToneControlFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.LoudnessFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.LoudnessFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.SpeakerProtectFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.SpeakerProtectFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.DcFaultStateFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.DcFaultStateFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.AudioIsClippingFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.AudioIsClippingFeedback"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.RoutedExtenderFeedback">
            <summary>
            See <see cref="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoExtenderFeedback.RoutedExtenderFeedback"/>.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.OnOffFeedback">
            <summary>
            Enum of On/Off values for feedback
            </summary>
        </member>
        <member name="F:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.OnOffFeedback.On">
            <summary>
             Speicifes ON feedback.
            </summary>
        </member>
        <member name="F:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.OnOffFeedback.Off">
            <summary>
            Specifies OFF feedback.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.PowerFeedback">
            <summary>
            Information about power-related responses.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.PowerFeedback.GroupHeader">
            <summary>
            The message header expected for this feedback.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.PowerFeedback.Feedback">
            <summary>
            The expected values for ON and OFF.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.DcFaultStateFeedback">
            <summary>
            Information about DC fault states feedback.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.DcFaultStateFeedback.GroupHeader">
            <summary>
            The message header expected for this feedback.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.DcFaultStateFeedback.Feedback">
            <summary>
            The expected values for DC fault states.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioIsClippingFeedback">
            <summary>
            Information about audio clipping feedback.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioIsClippingFeedback.GroupHeader">
            <summary>
            The message header expected for this feedback.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioIsClippingFeedback.Feedback">
            <summary>
            The expected values for ON(there is clipping) and OFF(there is no clipping).
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.MuteFeedback">
            <summary>
            Information about mute-related responses.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.MuteFeedback.GroupHeader">
            <summary>
            The message header expected for this feedback.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.MuteFeedback.Feedback">
            <summary>
            The expected values for ON and OFF.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.VolumeFeedback">
            <summary>
            Information about volume-related responses.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.VolumeFeedback.GroupHeader">
            <summary>
            The message header expected for this feedback.
            The default logic assumes all data after this value is the volume percent level.
            The driver may have to convert gain to a percentage if the API does not report values as a percent.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.BassFeedback">
            <summary>
            Information about bass-related responses.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.BassFeedback.GroupHeader">
            <summary>
            The message header expected for this feedback.
            The default logic assumes all data after this value is the bass percent level.
            The driver may have to convert gain to a percentage if the API does not report values as a percent.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.TrebleFeedback">
            <summary>
            Information about treble-related responses.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.TrebleFeedback.GroupHeader">
            <summary>
            The message header expected for this feedback.
            The default logic assumes all data after this value is the treble percent level.
            The driver may have to convert gain to a percentage if the API does not report values as a percent.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.ToneControlFeedback">
            <summary>
            Information about tone-related responses.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.ToneControlFeedback.GroupHeader">
            <summary>
            The message header expected for this feedback.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.ToneControlFeedback.Feedback">
            <summary>
            The expected values for ON and OFF.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.LoudnessFeedback">
            <summary>
            Information about loudness-related responses.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.LoudnessFeedback.GroupHeader">
            <summary>
            The message header expected for this feedback.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.LoudnessFeedback.Feedback">
            <summary>
            The expected values for ON and OFF.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.SpeakerProtectFeedback">
            <summary>
            Information about speaker protect-related responses.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.SpeakerProtectFeedback.GroupHeader">
            <summary>
            The message header expected for this feedback.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.SpeakerProtectFeedback.Feedback">
            <summary>
            The expected values for ON and OFF.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.TemperatureFeedback">
            <summary>
            Information about temperature-related responses.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.TemperatureFeedback.ValueGroupHeader">
            <summary>
            The message header expected for temperature feedback.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.TemperatureFeedback.UnitGroupHeader">
            <summary>
            The message header expected for the current units of measurement for temperature feedback.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.TemperatureFeedback.MetricIdentifer">
            <summary>
            Identifier for metric temperature units of measurement.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.TemperatureFeedback.StandardIdentifier">
            <summary>
            Identifier for standard temperature units of measurement.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.RoutedExtenderFeedback">
            <summary>
            Information about the current audio/video route.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.RoutedExtenderFeedback.GroupHeader">
            <summary>
            The header expected for current audio/video route feedback.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherData">
            <summary>
            Specifies the configuration of the audio/video switcher.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherData.AutoDetectConfiguration">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.AutoDetectConfiguration"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherData.SupportsAudioBreakaway">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.SupportsAudioBreakaway"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherData.NullInputIdentifier">
            <summary>
            Used in the RouteInput command to specify no input.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherData.VolumeRampingRate">
            <summary>
            The time in ms to use when ramping volume.
            <para>Volume ramping logic will decrease the ramping time from 250ms to this value over a series of steps.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherData.BassRampingRate">
            <summary>
            The time in ms to use when ramping bass.
            <para>Bass ramping logic will decrease the ramping time from 250ms to this value over a series of steps.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherData.TrebleRampingRate">
            <summary>
            The time in ms to use when ramping treble.
            <para>Treble ramping logic will decrease the ramping time from 250ms to this value over a series of steps.</para>
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherData.VolumeScalingInfo">
            <summary>
            Information needed to properly scale volume to a percent to/from the device's min/max.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherData.BassScalingInfo">
            <summary>
            Information needed to properly scale bass to a percent to/from the device's min/max.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherData.TrebleScalingInfo">
            <summary>
            Information needed to properly scale treble to a percent to/from the device's min/max.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherData.RoutableOutputs">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.GetRoutableOutputs"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherData.RoutableInputs">
            <summary>
            See <see cref="M:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.GetRoutableInputs"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherData.CompatibleOutputs">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.CompatibleOutputs"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.RootObject.AudioVideoSwitcherData.CompatibleInputs">
            <summary>
            See <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoSwitchingCapabilities.CompatibleInputs"/>.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Converters.AudioVideoExtenderPortConverter">
            <summary>
            Used for deserializing <see cref="P:Crestron.RAD.Common.Interfaces.IAudioVideoExtender.Ports"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Converters.AudioVideoExtenderPortConverter.CanConvert(System.Type)">
            <summary>
            Always returns true.
            </summary>
            <param name="objectType">Type being converted</param>
            <returns>True</returns>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Converters.AudioVideoExtenderPortConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Handles parsing the port collection and translating it to the AudioVideoSwitcher types.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.AudioVideoSwitcher.Converters.AudioVideoExtenderPortConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Implemented for DAT file production.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice">
            <summary>
            An Extension Device is a driver for Crestron Home that gives the driver developer the ability to provide their own custom user interface. The UI is
            defined by an XML file that is included in the driver's .pkg file and the code backing the UI is defined in the implementation of this class.
            <para>
            This class provides many methods that can be used by the driver developer to create and modify the <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition"/> and
            <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue"/> objects which define the Extension Device.
            </para>
            <para>
            This class also contains abstract methods that must be implemented by the driver developer as well as virtual methods that the driver developer may
            override if the base implementation does not provide the functionality that is required.
            </para>
            </summary>
            <example>
            The following example demonstrates how to define an Extension Device by implementing the <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice"/> class, creating properties,
            objects, and lists, and changing their values.
            <para>
            NOTE: The example below is incomplete and is used for instructional purposes only. An actual driver implementation will have more business logic that
            will actually communicate with the device to send the updated values and receive feedback.
            </para>
            <para>
            For completed sample drivers, see the Samples solution included with the Rad SDK.
            </para>
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="AExtensionDevice" removeRegionMarkers="true"/>
            </example>
            <seealso cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition"/>
            <seealso cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition"/>
            <seealso cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue"/>
        </member>
        <member name="F:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice._classDefinitions">
            <summary>
            Contains the definitions for all object classes
            </summary>
        </member>
        <member name="F:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice._rootPropertyDefinitions">
            <summary>
            Contains the definitions for all root properties by key
            </summary>
        </member>
        <member name="F:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice._propertyValues">
            <summary>
            Contains all of the property values by id
            </summary>
        </member>
        <member name="F:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice._pendingPropertyValueChanges">
            <summary>
            Contains all of the property values that have changed since the last time <see cref="E:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.PropertyValuesChanged"/> was raised.
            </summary>
        </member>
        <member name="F:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice._pendingRemovedPropertyValues">
            <summary>
            Contains all of the property values that have been removed since the last time <see cref="E:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice.PropertyValuesRemoved"/> was raised.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.#ctor">
            <summary>
            The consuming application will call this constructor to create an instance of this Extension. Each instance represents one device in the system.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.ConvertJsonFileToDriverData(System.String)">
            <summary>
            Converts the json string from the data file for this driver into an <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ExtensionDeviceRootObject"/> and assigns it to
            <see cref="F:Crestron.RAD.Common.BasicDriver.ABasicDriver.DriverData"/>. Any of the values in the driver's data can be accessed using the <see cref="F:Crestron.RAD.Common.BasicDriver.ABasicDriver.DriverData"/> object.
            </summary>
            <remarks>
            This method is sealed and should not be overridden by the driver developer.
            </remarks>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.AbstractClassType">
            <summary>
            Returns the <see cref="T:System.Type"/> of this object.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.DoCommand(System.String,System.String[])">
            <summary>
            Called by the consuming application to indicate to the Extension that the user has triggered a command action.
            </summary>
            <param name="command">The command to send, as defined in the UI definition.</param>
            <param name="parameters">The command's parameters, as defined in the UI definition.</param>
            <returns>Returns an <see cref="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IOperationResult"/> which is used to tell the user if the command was sent successfully or not.</returns>
            <remarks>
            Any control with a command action assigned to it will call this method when the action is invoked. For example, the user presses a button on the UI.
            </remarks>
            <example>
            The following example demonstrates how to implement the <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.DoCommand(System.String,System.String[])"/> method.
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="DoCommand"/>
            </example>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.SetDriverPropertyValue``1(System.String,``0)">
            <summary>
            Called by the consuming application to indicate to the Extension that the user has set the value of a property to a new value.
            </summary>
            <typeparam name="T">
            The type of the property. This matches the type "T" used when creating the property in the <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateProperty``1(Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition)"/> method, as
            well as the <see cref="T:Crestron.RAD.Common.Enums.DevicePropertyType"/> as specified in the <see cref="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.Type"/>.
            <para>
            NOTE: The type "T" will only ever be a primitive type (int, string, bool, etc.), never an object.
            </para>
            </typeparam>
            <param name="propertyKey">
            The property key. As defined in the <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition"/> and the UI definition. See <see cref="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.Key"/>.
            </param>
            <param name="value">
            The new value.
            </param>
            <returns>Returns an <see cref="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IOperationResult"/> which is used to tell the user if the property was set successfully or not.</returns>
            <remarks>
            UI controls that can modify a property will call this method to update a property's value. This method is only called when there is input from the
            user, for example, the user slides a slider or enters text into a text entry box.
            <para>
            It is imperative for the driver to send the new value immediately to the device and provide feedback to the consuming application as soon as possible.
            Some UI controls will revert back to the previous value if feedback is not received.
            </para>
            </remarks>
            <seealso cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.SetDriverPropertyValue``1(System.String,``0)"/>
            <seealso cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue`1"/>
            <example>
            The following example demonstrates how to implement the <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.SetDriverPropertyValue``1(System.String,``0)"/> method. This is not a complete
            implementation but it is enough to provide a basic understanding of what <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.SetDriverPropertyValue``1(System.String,``0)"/> does.
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="SetDriverPropertyValue"/>
            </example>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.SetDriverPropertyValue``1(System.String,System.String,``0)">
            <summary>
            Called by the consuming application to indicate to the Extension that the user has set the value of an object's property to a new value. If the
            property that changed belongs to an object then this method will be called, otherwise <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.SetDriverPropertyValue``1(System.String,``0)"/> will be called.
            </summary>
            <typeparam name="T">
            The type of the property. This matches the type "T" used when creating the property in the <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateProperty``1(Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition)"/> method, as
            well as the <see cref="T:Crestron.RAD.Common.Enums.DevicePropertyType"/> as specified in the <see cref="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.Type"/>.
            <para>
            NOTE: The type "T" will only ever be a primitive type (int, string, bool, etc.), never an object.
            </para>
            </typeparam>
            <param name="objectId">
            The ID of the object. See <see cref="!:ObjectValue.Id"/>.
            </param>
            <param name="propertyKey">
            The property key. As defined in the <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition"/> and the UI definition. See <see cref="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.Key"/>.
            </param>
            <param name="value">
            The new value.
            </param>
            <returns>Returns an <see cref="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IOperationResult"/> which is used to tell the user if the property was set successfully or not.</returns>
            <remarks>
            UI controls that can modify a property will call this method to update a property's value if that property belongs to an object. This method is only
            called when there is input from the user, for example, the user slides a slider or enters text into a text entry box.
            <para>
            It is imperative for the driver to send the new value immediately to the device and provide feedback to the consuming application as soon as possible.
            Some UI controls will revert back to the previous value if feedback is not received.
            </para>
            </remarks>
            <seealso cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.SetDriverPropertyValue``1(System.String,``0)"/>
            <seealso cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue"/>
            <seealso cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue`1"/>
            <example>
            The following example demonstrates how to implement the <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.SetDriverPropertyValue``1(System.String,System.String,``0)"/> method. This is not a complete
            implementation but it is enough to provide a basic understanding of what <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.SetDriverPropertyValue``1(System.String,System.String,``0)"/> does.
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="SetDriverPropertyValueObject"/>
            </example>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.GetUiDefinition(System.String)">
            <summary>
            Called by the consuming application to get the UI definition from the Extension.
            </summary>
            <param name="uiFolderPath">The path to the UI definitions folder.</param>
            <returns>The contents of the UI definition file as a string.</returns>
            <remarks>
            The default implementation of this method assumes there is only one UI definition. If more than one exists, this method can be overridden to provide
            additional logic to determine which UI definition to return. It can also be overridden to ignore the <paramref name="uiFolderPath"/> and simply
            return a static or dynamic UI definition from anywhere, for example, a web API.
            <para>
            If this method is overridden the corresponding method <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.RaiseUiDefinitionChangedEvent"/> must be called whenever the UI definition changes.
            </para>
            <para>
            The <paramref name="uiFolderPath"/> provided may be different depending on the consuming application but any UI definition that was provided with the
            driver's .pkg will be located in this folder.
            </para>
            <para>
            The encoding of the UI definition file must be "UTF-8". "UTF-8 with BOM" is not supported and will cause errors.
            </para>
            </remarks>
            <example>
            The following example demonstrates how to override the <seealso cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.GetUiDefinition(System.String)"/> method if needed. The example code shown performs similar
            logic to the base implementation which covers most cases. The only reason to override this method is if additional custom logic is needed.
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="GetUiDefinition"/>
            </example>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.GetSupportedCultures(System.String)">
            <summary>
            Called by the consuming application to get the supported cultures for the driver.
            </summary>
            <param name="translationsFolderPath">The path to the translations folder.</param>
            <returns>All cultures supported by this device.</returns>
            <remarks>
            The default implementation of this method uses the names of the translation files provided in the "Translations" folder of the driver's pkg. This
            method can be overridden to provide custom logic to determine what the supported cultures are.
            <para>
            If this method is overridden the corresponding method <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.RaiseSupportedCulturesChangedEvent"/> must be called whenever the supported cultures
            change.
            </para>
            <para>
            The format of the returned strings are "languagecode2-country/regioncode2" as defined by the ISO 639-1 standard and the ISO 3166 standard, for
            example, "en-US" for English in the United States.
            </para>
            <para>
            The <paramref name="translationsFolderPath"/> provided may be different depending on the consuming application but any translation file that was
            provided with the driver's .pkg will be located in this folder.
            </para>
            </remarks>
            <seealso cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.GetLanguageTranslations(System.String,System.String)"/>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.GetLanguageTranslations(System.String,System.String)">
            <summary>
            Called by the consuming application to get the language translations for the provided culture.
            </summary>
            <param name="translationsFolderPath">The path to the translations folder.</param>
            <param name="culture">The requested culture. Example: "en-US" for English in the United States.</param>
            <returns>
            A dictionary of translations where the key is <see cref="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.NameLocalizationKey"/> and the value is the translated string.
            </returns>
            <remarks>
            The default implementation of this method finds the translation file in the "Translations" folder of the driver's pkg that matches the provided
            culture and returns the translations dictionary provided in that file. This method can be overridden to provide custom logic to determine what
            translations should be returned.
            <para>
            If this method is overridden the corresponding method <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.RaiseLanguageTranslationsChangedEvent"/> must be called whenever the translations change.
            </para>
            <para>
            The <paramref name="translationsFolderPath"/> provided may be different depending on the consuming application but any translation file that was
            provided with the driver's .pkg will be located in this folder.
            </para>
            </remarks>
            <seealso cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.GetSupportedCultures(System.String)"/>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateClassDefinition(System.String)">
            <summary>
            Defines a class for your driver. A "class" is a collection of properties that can be used to group properties in your driver together.
            <para>
            Properties can be added to the class via <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition.AddProperty(Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition)"/>.
            </para>
            <para>
            To create an instance of the class use the method <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateObject(Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition)"/>. 
            </para>
            </summary>
            <param name="className">The name of the class. Must be unique across all classes.</param>
            <returns>The class definition.</returns>
            <remarks>
            An instance of a class is an <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue"/>. Multiple instances of a class can exist.
            </remarks>
            <example>
            The following example demonstrates how to define a class.
            <para>
            In this example we define a class named "Person" and create two instances of that class using the <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateObject(Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition)"/> method.
            </para>
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="CreateObject"/>
            </example>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateProperty``1(Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition)">
            <summary>
            Create an instance of a property that is a value type such as an int, string, bool, etc.
            <para>
            This method does not support properties that are of type <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.Object"/> or <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.ObjectList"/>. For
            those properties see the methods <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateObject(Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition)"/> and <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateList(Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition)"/>.
            </para>
            </summary>
            <typeparam name="T">
            The type of the property. This must match the <see cref="T:Crestron.RAD.Common.Enums.DevicePropertyType"/> of the provided <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition"/>.
            </typeparam>
            <param name="propertyDefinition">The definition of the property.</param>
            <returns>An instance of the property.</returns>
            <remarks>
            When the value of a property changes the <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.Commit"/> method must be called to propagate the changes to the consuming application.
            </remarks>
            <example>
            The following example demonstrates how to create properties. 3 different types of properties are shown in the example but there are many more
            combinations that may exist in the real world.
            <para>
            For this example we create a simple boolean property, a string property with 3 available values, and an interger property with a specified min, max,
            and step size.
            </para>
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="CreateProperty"/>
            </example>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateObject(Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition)">
            <summary>
            Create an instance of the provided <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition"/>.
            <para>
            When an instance of an object is created it will also create a <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue"/> for each of the properties defined in the
            <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition"/>. The value of these properties will be set to the default based on the property's type. For example a string will be
            an empty string ("") and an integer will be 0. To set these properties to the desired value use <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue.GetValue``1(System.String)"/> to retrieve
            the property, and then set the value using <see cref="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue`1.Value"/>.
            </para>
            </summary>
            <param name="classDefinition">The definition of the object.</param>
            <returns>An instance of the provided class.</returns>
            <remarks>
            When the value of an object changes the <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.Commit"/> method must be called to propagate the changes to the consuming application.
            <para>
            An <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue"/> will not work on its own. It must be part of an <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList"/> in order to be used by the UI.
            </para>
            </remarks>
            <example>
            The following example demonstrates how to create an instance of an object using the <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateObject(Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition)"/> method.
            <para>
            In this example we create two instances of the class "Person", and initialize the properties on each of our new objects. Remember to call
            <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.Commit"/> so that consuming application gets the updated values.
            </para>
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="CreateObject"/>
            </example>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateList(Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition)">
            <summary>
            Creates a property that is of type <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.ObjectList"/>.
            <para>
            An <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList"/> contains <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue"/> objects and can be bound to the "List Button" control in the UI definition.
            </para>
            </summary>
            <param name="listDefinition">
            The definition of the object list. The <see cref="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.Type"/> must of type <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.ObjectList"/>.
            </param>
            <returns>A new <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList"/></returns>
            <remarks>
            Items can be added to the list using the <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList.AddObject(Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue)"/> method. The <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.Commit"/> method must be called to propagate the
            changes to the consuming application.
            </remarks>
            <example>
            The following example demonstrates how to create an <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList"/> and add objects to it.
            <para>
            In this example we create a list and add two "Person" objects to the list. Remember to call <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.Commit"/> so that consuming application
            gets the updated list.
            </para>
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="CreateObject"/>
            </example>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.DeleteProperty(Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue)">
            <summary>
            Deletes the instance of the provided property.
            <para>
            If the property is an <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue"/>, all of the property values that belong to that object will also be deleted. If the object is a member
            of an <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList"/>, it will be removed from the list.
            </para>
            <para>
            If the property is an <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList"/>, all of the members of the list will also be deleted.
            </para>
            </summary>
            <para>
            The property instance can be a <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue`1"/>, a <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue"/>, or a <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList"/>.
            </para>
            <param name="propertyInstance">The property to delete.</param>
            <example>
            The following example demonstrates how to delete a property value.
            <para>
            In this example we have two "Person" objects, "person1" and "person2" which have both been added to a list "personList". To delete "person1" call
            <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.DeleteProperty(Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue)"/> and pass in "person1" as shown below. This will also remove the person from the list. Remember to call <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.Commit"/>
            so that consuming application gets the updated list.
            </para>
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="DeleteProperty"/>
            </example>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.Commit">
            <summary>
            Sends out an event with all of the modified property values. This allows property values to be updated in batches.
            <para>
            NOTE: Whenever a <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue"/> changes this method must be called, otherwise the new value will not be sent to the UI.
            </para>
            </summary>
            <example>
            The following example demonstrates how to use the <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.Commit"/> method after modifying the value of a property. <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.Commit"/> must be
            called no matter which type of property is modified but it does not need to be called right away. Properties can be modified in chunks and then
            <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.Commit"/> can be called at the end which will send all of the new values out at once.
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="CreateObject"/>
            </example>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.RaiseUiDefinitionChangedEvent">
            <summary>
            Raises an event telling the consuming application that the UI definition for this driver has changed.
            <para>
            This method is only needed if <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.GetUiDefinition(System.String)"/> has been overridden and the UI definition changes at runtime.
            </para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.RaiseSupportedCulturesChangedEvent">
            <summary>
            Raises an event telling the consuming application that the supported cultures have changed.
            <para>
            This method is only needed if <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.GetSupportedCultures(System.String)"/> is overridden and the supported cultures change at runtime.
            </para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.RaiseLanguageTranslationsChangedEvent">
            <summary>
            Raises an event telling the consuming application that the language translations have changed.
            <para>
            This method is only needed if <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.GetLanguageTranslations(System.String,System.String)"/> is overridden and the language translations change at runtime.
            </para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.QueuePropertyValueChangedEvent(Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue)">
            <summary>
            Queue a property value changed event whenever a property is modified or added.
            If the property is added or removed also queue the property that it was added or removed from.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.QueuePropertyValueRemovedEvent(System.String)">
            <summary>
            Queue a property value removed event whenever a property is removed.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.RaisePropertyValuesChangedEvent">
            <summary>
            This method should only ever be called from <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.Commit"/>.
            All property value changes should be queued using <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.QueuePropertyValueChangedEvent(Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue)"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.RaisePropertyValuesRemovedEvent">
            <summary>
            This method should only ever be called from <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.Commit"/>.
            All removed property values should be queued using <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.QueuePropertyValueRemovedEvent(System.String)"/>.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition">
            <summary>
            A "class" is a collection of properties that can be used to group properties in your driver together. To create a class defintion the method
            <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateClassDefinition(System.String)"/> must be used.
            <para>
            Just like object-oriented programming, a class must be instantiated using the method <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateObject(Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition)"/>. An instance of a class
            is an <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue"/>.
            </para>
            <para>
            Properties can be added to the class via the <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition.AddProperty(Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition)"/> method.
            </para>
            </summary>
            <remarks>
            A <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition"/> is similar to a class in C# except it only contains properties, and not methods or events. Instances of a class, called
            objects, can be passed around and used by adding them to lists. Any UI element that is bound to the list can also bind to the properties of an object,
            so when an object is added it is displayed in the list.
            </remarks>
            <example>
            The following example demonstrates how to use <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition"/>.
            <para>
            In this example we define a class named "Person" and create two instances of that class using the <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateObject(Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition)"/> method.
            </para>
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="CreateObject"/>
            </example>
            <seealso cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateClassDefinition(System.String)"/>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition.#ctor(System.String)">
            <summary>
            Create a new class definition. This constructor cannot be called directly, the method <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateClassDefinition(System.String)"/> must be
            used to construct a new class definition.
            </summary>
            <param name="className">The name of the class.</param>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition.ClassName">
            <inheritdoc />
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition.Properties">
            <inheritdoc />
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition.AddProperty(Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition)">
            <summary>
            Adds the provided property to the class.
            <para>
            When a class is created using <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateClassDefinition(System.String)"/> it will not have any properties. Properties must be added using
            this method.
            </para>
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ExtensionDeviceRootObject">
            <summary>
            Underlying object used for an Extensions .json data file. This is used internally.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.ExtensionDevice.OperationResult">
            <summary>
            Defines a result for an operation on an <see cref="T:Crestron.RAD.Common.Interfaces.ExtensionDevice.IExtensionDevice"/>.
            <para>
            This class is used as the return value for <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.DoCommand(System.String,System.String[])"/>, <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.SetDriverPropertyValue``1(System.String,``0)"/>,
            and <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.SetDriverPropertyValue``1(System.String,System.String,``0)"/>. If the operation is successful, the result returned by these methods
            should be <see cref="F:Crestron.RAD.Common.Interfaces.ExtensionDevice.OperationResultCode.Success"/>. Otherwise, if the operation failed, the returned result code should be
            <see cref="F:Crestron.RAD.Common.Interfaces.ExtensionDevice.OperationResultCode.Error"/>. If the result code is <see cref="F:Crestron.RAD.Common.Interfaces.ExtensionDevice.OperationResultCode.Error"/>, an optional <see cref="P:Crestron.RAD.DeviceTypes.ExtensionDevice.OperationResult.UserMessage"/> can be
            provided to the user.
            </para>
            </summary>
            <example>
            The following examples demonstrate how to use <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.OperationResult"/>.
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="DoCommandOperationResult"/>
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="SetDriverPropertyValueOperationResult"/>
            </example>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.OperationResult.#ctor(Crestron.RAD.Common.Interfaces.ExtensionDevice.OperationResultCode)">
            <summary>
            Create an operation result.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.OperationResult.#ctor(Crestron.RAD.Common.Interfaces.ExtensionDevice.OperationResultCode,System.String)">
            <summary>
            Create an operation result with a message.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.OperationResult.ResultCode">
            <inheritdoc />
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.OperationResult.UserMessage">
            <inheritdoc />
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyAvailableValue">
            <summary>
            An available value represents a valid value that a <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue"/> can be set to. See <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyAvailableValue`1"/> to get the
            actual value.
            </summary>
            <remarks>
            Certain UI elements such as the Selector Button will only display the available values of the <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue"/> that it is bound to.
            </remarks>
            <example>
            The following example demonstrates how to use <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyAvailableValue"/>.
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="PropertyAvailableValueDefinition"/>
            </example>
            <seealso cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyAvailableValue`1"/>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyAvailableValue.#ctor(System.String,System.String)">
            <summary>
            Create a new available value for a property.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyAvailableValue.Label">
            <inheritdoc />
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyAvailableValue.LabelLocalizationKey">
            <inheritdoc />
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyAvailableValue.Enabled">
            <inheritdoc />
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyAvailableValue`1">
            <summary>
            An available value represents a valid value that a <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue"/> can be set to.
            </summary>
            <remarks>
            Certain UI elements such as the Selector Button will only display the available values of the <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue"/> that it is bound to.
            </remarks>
            <typeparam name="T">The primitive type of the value.</typeparam>
            <example>
            The following example demonstrates how to use <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyAvailableValue`1"/>.
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="PropertyAvailableValueDefinition"/>
            </example>
            <seealso cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyAvailableValue"/>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyAvailableValue`1.#ctor(`0,Crestron.RAD.Common.Enums.DevicePropertyType,System.String,System.String)">
            <summary>
            Create a new available value for a property.
            </summary>
            <param name="value">The actual value. The type of this object must match the provided <paramref name="type"/></param>
            <param name="type">The type of the value.</param>
            <param name="labelLocalizationKey">The translation key. Set to Null to use the <paramref name="label"/> parameter and bypass translations.</param>
            <param name="label">
            The user visible label of the availbale value. If a translation key is provided then the translated string will be prioritized over the label.
            </param>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyAvailableValue`1.Value">
            <inheritdoc />
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition">
            <summary>
            Represents a property on an <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice"/>. An instance of a property is a <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue`1"/>.
            </summary>
            <example>
            The following examples demonstrate how to use <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition"/> to define different types of properties. These examples do not cover all
            properties but they do cover the basics for everything.
            <para>Boolean property:</para>
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="BooleanPropertyDefinition"/>
            <para>Property with available values:</para>
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="PropertyAvailableValueDefinition"/>
            <para>Property with min/max and step size:</para>
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="PropertyWithMinMaxDefinition"/>
            <para>Object:</para>
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="ObjectPropertyDefinition"/>
            <para>List:</para>
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="ListPropertyDefinition"/>
            </example>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.#ctor(System.String,System.String,Crestron.RAD.Common.Enums.DevicePropertyType)">
            <summary>
            Create a property definition for primitive types (string, int, bool, etc.).
            </summary>
            <param name="key">The key of property.</param>
            <param name="nameLocalizationKey">The translation key.</param>
            <param name="type">The type of the property.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.#ctor(System.String,System.String,Crestron.RAD.Common.Enums.DevicePropertyType,Crestron.RAD.Common.Interfaces.ExtensionDevice.IClassDefinition)">
            <summary>
            Create a property definition for a property of type <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.Object"/> or <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.ObjectList"/>.
            </summary>
            <param name="key">The key of property.</param>
            <param name="nameLocalizationKey">The translation key.</param>
            <param name="type">
            The type of the property. In this case it should be <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.Object"/> or <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.ObjectList"/>.
            </param>
            <param name="classDefinition">
            For <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.Object"/> this is the class definition of the object.
            <para>
            For <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.ObjectList"/> this is the class definition of the objects that the list contains.
            </para>
            </param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.#ctor(System.String,System.String,Crestron.RAD.Common.Enums.DevicePropertyType,System.Collections.Generic.IEnumerable{Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyAvailableValue})">
            <summary>
            Create a property definition for a property with a set amount of available values.
            </summary>
            <param name="key">The key of property.</param>
            <param name="nameLocalizationKey">The translation key.</param>
            <param name="type">The type of the property.</param>
            <param name="availableValues">The values that this property can be set to.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.#ctor(System.String,System.String,Crestron.RAD.Common.Enums.DevicePropertyType,System.Double,System.Double,System.Double)">
            <summary>
            Create a property definition for a property with a minimum value, maximum value, and step size.
            </summary>
            <param name="key">The key of property.</param>
            <param name="nameLocalizationKey">The translation key.</param>
            <param name="type">The type of the property.</param>
            <param name="minValue">The minimum value that this property can be set to.</param>
            <param name="maxValue">The maximum value that this property can be set to.</param>
            <param name="stepSize">The increment size that this property can be set to starting at <see cref="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.MinValue"/> and ending at <see cref="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.MaxValue"/>.</param>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.Key">
            <inheritdoc />
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.NameLocalizationKey">
            <inheritdoc />
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.Type">
            <inheritdoc />
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.SubType">
            <inheritdoc />
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.AssociatedClass">
            <inheritdoc />
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.AvailableValues">
            <inheritdoc />
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.MinValue">
            <inheritdoc />
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.MaxValue">
            <inheritdoc />
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.StepSize">
            <inheritdoc />
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue">
            <summary>
            Represents the instance of a <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition"/>. A property value can be bound to certain UI elements so that the value displayed in the UI
            will match the value that the property is set to.
            <para>For value types this is a <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue`1"/></para>
            <para>For objects this is an <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue"/></para>
            <para>For object lists this is an <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList"/></para>
            </summary>
            <remarks>
            A property can be created using the <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateProperty``1(Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition)"/> method. When the value of a property changes the
            <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.Commit"/> method must be called to propagate the changes to the consuming application.
            </remarks>
            <example>
            The following examples demonstrate how to use <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue"/>. The specific property value classes that derive this one contain more specific
            examples to their usage: See <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue`1"/>,
            <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue"/>, and <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList"/>.
            <para>Creating a <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue`1"/>:</para>
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="CreateProperty"/>
            <para>Creating an <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue"/> and <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList"/></para>
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="CreateObject"/>
            </example>
            <seealso cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue`1"/>
            <seealso cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateProperty``1(Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition)"/>
            <seealso cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue"/>
            <seealso cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateObject(Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition)"/>
            <seealso cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList"/>
            <seealso cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateList(Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition)"/>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue.#ctor(System.String,Crestron.RAD.Common.Enums.DevicePropertyType,System.Action{System.String})">
            <summary>
            Create a new property value.
            </summary>
            <param name="definitionKey">The property definition key.</param>
            <param name="type">The type of the properties value.</param>
            <param name="logger">Method for logging.</param>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue.Id">
            <inheritdoc />
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue.DefinitionKey">
            <inheritdoc />
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue.Type">
            <inheritdoc />
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue.Enabled">
            <inheritdoc />
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue.IsValueAvailable">
            <inheritdoc />
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue.Crestron#RAD#Common#Interfaces#ExtensionDevice#IPropertyValue#IsRootProperty">
            <inheritdoc />
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue.Crestron#RAD#Common#Interfaces#ExtensionDevice#IPropertyValue#MemberIds">
            <inheritdoc />
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue.ParentIds">
            <summary>
            The <see cref="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue.Id"/> of the parent or parents if applicable. Empty, if this property does not have a parent.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue.GetMembers">
            <summary>
            Gets the children of the property. For Objects these are the properties that make up the object
            and for Lists these are the objects that are currently in the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue.RaisePropertyChangedEvent">
            <summary>
            Event to be raised whenever a public property on a <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue"/> changes.
            </summary>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue`1">
            <summary>
            Represents the instance of a <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue"/> that is of a value type (int, string, or bool).
            </summary>
            <remarks>
            A property can be created using the <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateProperty``1(Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition)"/> method. When the value of a property changes the
            <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.Commit"/> method must be called to propagate the changes to the consuming application.
            </remarks>
            <example>
            The following examples demonstrate how to use <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue`1"/>.
            <para>This example shows how to set the value of a simple boolean property:</para>
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="BooleanPropertyValue"/>
            <para>This example shows how to set the value of a string property with available values:</para>
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="PropertyAvailableValueSetValue"/>
            <para>This example shows how to set the value of an integer property with a min, max, and step size:</para>
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="PropertyWithMinMaxValue"/>
            </example>
            <seealso cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue"/>
            <seealso cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateProperty``1(Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition)"/>	
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue`1.#ctor(System.String,Crestron.RAD.Common.Enums.DevicePropertyType,System.Action{System.String})">
            <summary>
            Create a property definition for primitive types (string, int, bool, etc.).
            </summary>
            <param name="definitionKey">The property definition key.</param>
            <param name="type">The type of T</param>
            <param name="logger">Method for logging.</param>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue`1.Value">
            <inheritdoc />
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue">
            <summary>
            Represents the instance of a <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue"/> that is of type <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.Object"/>.
            </summary>
            <remarks>
            An object can be created using the <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateObject(Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition)"/> method. Objects can not be used on their own. The purpose of an object is
            to be a member of an <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList"/> so the UI controls such as the "List Button" can pass more than one property per list entry when used to
            navigate to a new page.
            <para>
            An example of this would be a "List Button" that displayed a list of "users", which when clicked, navigated to a page specific to that user. Each user
            in the code would be represented by an <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue"/> which may contain multiple properties used to define a "user".
            </para>
            <para>
            When the value of an object changes the <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.Commit"/> method must be called to propagate the changes to the consuming application.
            </para>
            </remarks>
            <example>
            The following example demonstrates how to use <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue"/>.
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="ObjectListPropertyValue"/>
            </example>
            <seealso cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue"/>
            <seealso cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateObject(Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition)"/>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue.#ctor(System.String,System.Action{System.String})">
            <summary>
            Create a property value for an object.
            </summary>
            <param name="className">The name of the class that this value belongs too.</param>
            <param name="logger">Method for logging.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue.#ctor(System.String,System.String,System.Action{System.String})">
            <summary>
            Create a property value for an object.
            </summary>
            <param name="definitionKey">
            The key of this property's property definition if it has one. Root level objects don't
            have a property definition, only a class definition.
            </param>
            <param name="className">The name of the class that this value belongs too.</param>
            <param name="logger">Method for logging.</param>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue.SubType">
            <summary>
            The class type of the object. See <see cref="P:Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition.ClassName"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue.ObjectProperties">
            <summary>
            Dictionary containing the ids of the properties of this object by property key.
            Key = <see cref="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue.DefinitionKey"/>
            Value = <see cref="P:Crestron.RAD.Common.Interfaces.ExtensionDevice.IPropertyValue.Id"/>
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue.GetValue``1(System.String)">
            <summary>
            Get the value of a property.
            <para>
            Applies to properties that are value types such as int, string, bool, etc.
            </para>
            <para>
            See <see cref="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue`1.Value"/> to get and set the actual value of this property.
            </para>
            </summary>
            <typeparam name="T">The type of the properties value.</typeparam>
            <param name="propertyKey">The key of the property.</param>
            <returns>The <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue`1"/> containing the value.</returns>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue.GetObjectValue(System.String)">
            <summary>
            Get the value of a property where the property is an object.
            <para>
            Applies to properties that are of type <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.Object"/>.
            </para>
            </summary>
            <param name="propertyKey">The key of the property.</param>
            <returns>The object value of the property.</returns>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue.GetListValue(System.String)">
            <summary>
            Get the value of a property where the property is an object list.
            <para>
            Applies to properties that are of type <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.ObjectList"/>.
            </para>
            </summary>
            <param name="propertyKey">The key of the property.</param>
            <returns>The list value of the property.</returns>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue.SetObjectValue(System.String,Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue)">
            <summary>
            Sets the value of a property where the property is an object.
            <para>
            Applies to properties that are of type <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.Object"/>.
            </para>
            <para>
            The object provided must be the same class as the property being set. See <see cref="P:Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition.ClassName"/>.
            </para>
            </summary>
            <param name="propertyKey">The key of the property.</param>
            <param name="value">The object value.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue.SetListValue(System.String,Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList)">
            <summary>
            Sets the value of a property where the property is an object list.
            <para>
            Applies to properties that are of type <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.ObjectList"/>.
            </para>
            </summary>
            <param name="propertyKey">The key of the property.</param>
            <param name="value">The object list value.</param>
        </member>
        <member name="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList">
            <summary>
            Represents the instance of a <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue"/> that is of type <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.ObjectList"/>.
            </summary>
            <remarks>
            An object list can be created using the <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateList(Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition)"/> method. Items can be added to the list using the <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList.AddObject(Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue)"/>
            method. The <see cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.Commit"/> method must be called to propagate the changes to the consuming application.
            </remarks>
            <example>
            The following example demonstrates how to use <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList"/>.
            <code lang="cs" source="..\Common\ThirdPartyCommon\DocumentationSamples\ExtensionDeviceSamples.cs" region="ObjectListPropertyValue"/>
            </example>
            <seealso cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue"/>
            <seealso cref="M:Crestron.RAD.DeviceTypes.ExtensionDevice.AExtensionDevice.CreateList(Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition)"/>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList.#ctor(System.String,System.String,System.Action{System.String})">
            <summary>
            Create a property value for an object that is a member of a list.
            </summary>
            <param name="definitionKey">The property definition key.</param>
            <param name="listSubType">The type of objects that the list contains.</param>
            <param name="logger">Method for logging.</param>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList.SubType">
            <summary>
            The class type of the objects that this list contains. See <see cref="P:Crestron.RAD.DeviceTypes.ExtensionDevice.ClassDefinition.ClassName"/>.
            </summary>
        </member>
        <member name="P:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList.ListMembers">
            <summary>
            List containing all of the objects in this <see cref="T:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList"/>.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList.AddObject(Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectValue)">
            <summary>
            Add the provided object to the list.
            </summary>
            <param name="objectValueToAdd">
            The object to add. The <see cref="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyValue.Type"/> of this object must be of type <see cref="F:Crestron.RAD.Common.Enums.DevicePropertyType.Object"/>
            and the <see cref="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.SubType"/> of this object must match the <see cref="P:Crestron.RAD.DeviceTypes.ExtensionDevice.PropertyDefinition.SubType"/>
            of the list it is being added to.
            </param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList.RemoveObject(System.String)">
            <summary>
            Remove the provided object from the list.
            <para>
            If the object is not in the list this method will do nothing.
            If there are multiple occurrences of the object in the list then this method will remove the first occurrence.
            </para>
            </summary>
            <param name="objectId">The id of the object to remove.</param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.ObjectList.Clear">
            <summary>
            Clears all objects from the provided list.
            <para>
            If the list is already empty this method will do nothing.
            </para>
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.ExtensionDeviceLogHelper.LogMessage(System.Action{System.String},Crestron.RAD.DeviceTypes.ExtensionDevice.LogLevel,System.String)">
            <summary>
            Used to log a message from a private method where we may not want to show the name of the method
            because it doesn't really do the driver developer much good.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.ExtensionDevice.ExtensionDeviceLogHelper.LogMessage(System.Action{System.String},Crestron.RAD.DeviceTypes.ExtensionDevice.LogLevel,System.String,System.String,System.String)">
            <summary>
            Used to log a message with the class and method name included.
            This should only be used by public and protected methods that the driver developer
            can see so that they know where the error is.
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.Gateway.AGatewayProtocol.DeConstructResponse(System.String)">
            <summary>
            No operations performed in base
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.Gateway.AGatewayProtocol.ResponseValidator(System.String,Crestron.RAD.Common.Enums.CommonCommandGroupType)">
            <summary>
            By default, this always returns a new instance of ValidatedRxData with Ready set to False and Data set to response
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.PoolController.APoolControllerProtocol.StartConfiguration">
            <summary>
            This will start suppressing PoolsListChanged events until CompleteConfiguration() is called
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.PoolController.APoolControllerProtocol.CompleteConfiguration">
            <summary>
            This will stop suppressing events and send one Reset event for the pool list 
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.PoolController.APoolControllerProtocol.ResponseValidator(System.String,Crestron.RAD.Common.Enums.CommonCommandGroupType)">
            <summary>
            By default, this always returns a new instance of ValidatedRxData with Ready set to False and Data set to response
            </summary>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.PoolController.APoolControllerProtocol.DeConstructResponse(System.String)">
            <summary>
            No operations performed in base
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.PoolController.APoolControllerProtocol.ChooseDeconstructMethod(Crestron.RAD.Common.BasicDriver.ValidatedRxData)">
            <summary>
            By default, this will call DeConstructResponse
            </summary>
            <param name="validatedData"></param>
        </member>
        <member name="M:Crestron.RAD.DeviceTypes.PoolController.APoolControllerProtocol.OnIsAuthenticatedChanged(System.Boolean,System.String)">
            <summary>
            Invoked by driver to let applications know if there was a change in the authentication state
            Only used by drivers that do not have a generic StateChange event currently
            </summary>
            <param name="isAuthenticated">True if the driver is authenticated with the device</param>
            <param name="authenticationError">An error message returned from the device. This should be something that is acceptable to show on a UI</param>
        </member>
        <member name="T:RADCommon.Devices.Gateway.Interfaces.IDeviceInformation">
            <summary>
            Information specific to a device instance
            Any device specific settings should be stored as part of IDriverInitialization
            </summary>
        </member>
        <member name="P:RADCommon.Devices.Gateway.Interfaces.IDeviceInformation.Id">
            <summary>
            Unique identifier for the device, should persist across reboots
            Could be a MAC address or any other device specific identifier
            </summary>
        </member>
        <member name="P:RADCommon.Devices.Gateway.Interfaces.IDeviceInformation.Name">
            <summary>
            User friendly name for the device
            Ideally, this would be a name assigned to the device by the user
            </summary>
        </member>
        <member name="P:RADCommon.Devices.Gateway.Interfaces.IDeviceInformation.Description">
            <summary>
            User friendly description of the device
            </summary>
        </member>
        <member name="P:RADCommon.Devices.Gateway.Interfaces.IDeviceInformation.Manufacturer">
            <summary>
            The name of the manufacturer
            </summary>
        </member>
        <member name="P:RADCommon.Devices.Gateway.Interfaces.IDeviceInformation.Model">
            <summary>
            Name of the device model
            </summary>
        </member>
        <member name="P:RADCommon.Devices.Gateway.Interfaces.IDeviceInformation.DeviceType">
            <summary>
            The type of device
            Should match a value from the Crestron.RAD.Common.Enums.DeviceTypes.
            If the device type is not listed in the DeviceTypes enumeration, a custom value may be used.
            </summary>
        </member>
        <member name="P:RADCommon.Devices.Gateway.Interfaces.IDeviceInformation.DeviceSubtype">
            <summary>
            The subtype of device
            This field is optional and can be used to further specify the type of device (IE. DeviceType = Appliance, DeviceSubtype=Dishwasher)
            </summary>
        </member>
        <member name="P:RADCommon.Devices.Gateway.Interfaces.IDeviceInformation.AssemblyFileName">
            <summary>
            The file name of the assembly containing the class for the driver
            </summary>
        </member>
        <member name="P:RADCommon.Devices.Gateway.Interfaces.IDeviceInformation.ClassName">
            <summary>
            The name of the class instance that will be instantiated for this device.
            </summary>
        </member>
        <member name="P:RADCommon.Devices.Gateway.Interfaces.IDeviceInformation.SupportedInterfaces">
            <summary>
            The collection of interfaces the device supports
            </summary>
        </member>
        <member name="P:RADCommon.Devices.Gateway.Interfaces.IDeviceInformation.UserAttributes">
            <summary>
            List of user attributes supported by this device.
            </summary>
        </member>
        <member name="T:RADCommon.Devices.Gateway.Interfaces.IGateway">
            <summary>
            Interface to support devices which are controlled through a gateway or cloud. This contains the devices controlled by this interface.
            </summary>
        </member>
        <member name="M:RADCommon.Devices.Gateway.Interfaces.IGateway.GetDevices">
            <summary>
            Gets the collection of devices that are controllable through this 
            gateway
            </summary>
            <returns></returns>
        </member>
        <member name="M:RADCommon.Devices.Gateway.Interfaces.IGateway.GetDeviceInstance``1(System.String)">
             <summary>
             Returns the instance of the driver specified by the deviceInfo
             </summary>
             <typeparam name="T">The type associated with the driver. Could be 
             either the class or one of the supported interfaces
            </typeparam>
             <param name="deviceId">Device Id associated with the device</param>
             <returns>A T instance of the driver</returns>
        </member>
        <member name="E:RADCommon.Devices.Gateway.Interfaces.IGateway.DeviceListChanged">
            <summary>
            Event to notify the device list changes.
            </summary>
        </member>
        <member name="F:RADCommon.Devices.SecuritySystem.SimplSecuritySystem._rxLock">
            <summary>
            Sends strings sent from the device.
            </summary>
        </member>
        <member name="E:RADCommon.Devices.SecuritySystem.SimplSecuritySystem.RxOut">
            <summary>
            An event that provides data received by the driver.
            <para />This event is only active while EnableRxOut is true.
            </summary>
        </member>
        <member name="T:RADCommon.Interfaces.IInterfaceLookup`1">
            <summary>
            Describes an object which can look up an implementation of an interface
            and can have implementations registered for those interfaces.
            It supports "recursively" adding an implementation so that the base interfaces
            implemented by that interface are also retrievable from the lookup.
            </summary>
            <typeparam name="TBaseInterface">The base interface types which entries must derive from. Use object if you want to use all interfaces.</typeparam>
        </member>
        <member name="M:RADCommon.Interfaces.IInterfaceLookup`1.RegisterInterface(System.Type,System.Object)">
            <summary>
            Recursively registers an implementation of an interface to be looked up later via
            <see cref="M:RADCommon.Interfaces.IInterfaceLookup`1.TryGetInterface(System.Type)"/>. If the type passed is not an interface, the type
            itself is not added but the interfaces it implements are.
            Overwrites any previously registered interfaces of this type or base interfaces.
            </summary>
            <param name="t">The interface type to register for</param>
            <param name="implementation">The object which provides the interface</param>
        </member>
        <member name="M:RADCommon.Interfaces.IInterfaceLookup`1.TryGetInterface(System.Type)">
            <summary>
            Get a previously registered object which implements T, or null if none is found.
            </summary>
            <param name="t">The interface type to retrieve an implementation of</param>
            <returns>An object implementing T, or null if none was found</returns>
        </member>
    </members>
</doc>
